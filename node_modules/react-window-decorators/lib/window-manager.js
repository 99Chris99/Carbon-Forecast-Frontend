'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isTouchDevice = require('is-touch-device');

var _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EVENT_NAME = 'window-resize';

var instance = null;
var instancesCount = 0;

var orientations = {
  LANDSCAPE: '(orientation: landscape)',
  PORTRAIT: '(orientation: portrait)'
};

var IS_TOUCH_DEVICE = (0, _isTouchDevice2.default)();

var isWindowDefined = typeof window !== 'undefined';

// ------------------------------------------------
// Custom Event detection
// ------------------------------------------------
var supportsCustomEvents = isWindowDefined && typeof window.CustomEvent === 'function';

// ------------------------------------------------
// Window Manager
// ------------------------------------------------

var WindowManager = function () {
  function WindowManager(breakpoints) {
    var debounceTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;

    _classCallCheck(this, WindowManager);

    if (!isWindowDefined) {
      // Silently return null if it is used on server
      return null;
    }

    // Increase reference count
    instancesCount++;

    // Save or update options
    this.breakpoints = breakpoints;
    this.debounceTime = debounceTime;

    // If singleton instance exists, return it rather than creating a new one
    if (instance) {
      return instance;
    }

    // Save singleton instance
    instance = this;

    // Bind handlers
    this.handleResize = this.handleResize.bind(this);

    // Add resize listener
    window.addEventListener('resize', this.handleResize);
  }

  _createClass(WindowManager, [{
    key: 'removeListener',
    value: function removeListener() {
      instancesCount--;

      if (instancesCount === 0) {
        // Clear singleton instance
        instance = null;
        // Remove listeners
        window.removeEventListener('resize', this.handleResize);
      }
    }
  }, {
    key: 'getDimensions',
    value: function getDimensions() {
      return {
        width: window.innerWidth,
        height: window.innerHeight
      };
    }
  }, {
    key: 'getOrientation',
    value: function getOrientation() {
      return window.matchMedia(orientations.LANDSCAPE).matches ? 'landscape' : 'portrait';
    }
  }, {
    key: 'getBreakpoint',
    value: function getBreakpoint() {
      var breakpoint = null;

      if (this.breakpoints) {
        for (var i = 0; i < this.breakpoints.length; i++) {
          if (window.matchMedia(this.breakpoints[i].media).matches) {
            breakpoint = this.breakpoints[i].name;
          }
        }
      }

      return breakpoint;
    }
  }, {
    key: 'isTouchDevice',
    value: function isTouchDevice() {
      return IS_TOUCH_DEVICE;
    }
  }, {
    key: 'handleResize',
    value: function handleResize() {
      var _this = this;

      clearTimeout(this.timeoutID);
      this.timeoutID = setTimeout(function () {
        var event = void 0;

        var detail = {
          breakpoint: _this.getBreakpoint(),
          dimensions: _this.getDimensions(),
          orientation: _this.getOrientation()
        };

        if (supportsCustomEvents) {
          event = new CustomEvent(EVENT_NAME, { detail: detail });
        } else {
          event = document.createEvent('CustomEvent');
          event.initCustomEvent(EVENT_NAME, false, false, detail);
        }

        // Dispatch the event.
        window.dispatchEvent(event);
      }, this.debounceTime);
    }
  }]);

  return WindowManager;
}();

exports.default = WindowManager;