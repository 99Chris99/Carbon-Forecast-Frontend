'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _windowScrollManager = require('window-scroll-manager');

var _windowScrollManager2 = _interopRequireDefault(_windowScrollManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withScroll = function withScroll(ComposedComponent) {
  return function (_Component) {
    _inherits(ScrollDecorator, _Component);

    function ScrollDecorator() {
      _classCallCheck(this, ScrollDecorator);

      var _this = _possibleConstructorReturn(this, (ScrollDecorator.__proto__ || Object.getPrototypeOf(ScrollDecorator)).call(this));

      var scrollPositionX = 0;
      var scrollPositionY = 0;

      // Check for universal rendering
      if (typeof window !== 'undefined') {
        _this.scrollManager = new _windowScrollManager2.default();

        // Initial scroll position
        scrollPositionX = _this.scrollManager.getScrollPosition().scrollPositionX;
        scrollPositionY = _this.scrollManager.getScrollPosition().scrollPositionY;

        // Bind events
        _this.handleScrollChange = _this.handleScrollChange.bind(_this);
        window.addEventListener('window-scroll', _this.handleScrollChange);
      }

      _this.state = {
        scrollPositionX: scrollPositionX,
        scrollPositionY: scrollPositionY,
        // Alias for scrollPositionY for backwards compatibility
        scrollPosition: scrollPositionY
      };
      return _this;
    }

    _createClass(ScrollDecorator, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        // Remove and reset interval/animationFrame
        window.removeEventListener('window-scroll', this.handleScrollChange);

        this.scrollManager.removeListener();
        this.scrollManager = null;
      }
    }, {
      key: 'handleScrollChange',
      value: function handleScrollChange(e) {
        var _this2 = this;

        var _state = this.state,
            scrollPositionY = _state.scrollPositionY,
            scrollPositionX = _state.scrollPositionX;

        var newScrollPositionY = e.detail.scrollPositionY;
        var newScrollPositionX = e.detail.scrollPositionX;

        // Update the state only when scroll position is changed
        if (newScrollPositionY !== scrollPositionY || newScrollPositionX !== scrollPositionX) {
          requestAnimationFrame(function () {
            _this2.setState({
              scrollPositionX: newScrollPositionX,
              scrollPositionY: newScrollPositionY,
              // Alias for scrollPositionY for backwards compatibility
              scrollPosition: newScrollPositionY
            });
          });
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _state2 = this.state,
            scrollPositionX = _state2.scrollPositionX,
            scrollPositionY = _state2.scrollPositionY;


        return _react2.default.createElement(ComposedComponent, _extends({}, this.props, {
          scrollPositionX: scrollPositionX,
          scrollPositionY: scrollPositionY
          // Alias for scrollPositionY for backwards compatibility
          , scrollPosition: scrollPositionY
        }));
      }
    }]);

    return ScrollDecorator;
  }(_react.Component);
};

exports.default = withScroll;