{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js\";\nimport React, { Component } from 'react';\nimport { XYPlot, LineSeries, MarkSeries, HorizontalGridLines, Hint, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries } from 'react-vis';\nimport { Sticky, Header, Table, Dimmer, Loader, TableCell } from 'semantic-ui-react';\nimport { withScroll } from 'react-window-decorators'; // @withScroll\n\nclass Timeline extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rawData: [{\n        y: 0,\n        x: 0,\n        label: 'loading | loadidng'\n      }],\n      barPosition: {\n        date: '',\n        offset: 0\n      },\n      labelData: [{\n        lable: 'Testing'\n      }],\n      height: 50,\n      middle: typeof this.props.middle !== 'undefined' ? this.props.mediumLevel : 150,\n      value: null,\n      // scrollCount: 0,\n      initalScrollCounter: 0,\n      dataIndex: -1,\n      position: this.props.scrollPositionY,\n      scrollPlots: [],\n      getLevel: 0,\n      yOffset: 0,\n      currentLevel: {\n        level: 0,\n        time: 'loading',\n        text: 'loading'\n      }\n    };\n\n    this.calYOffset = () => {\n      const stickyTop = document.querySelector('#sticky');\n      let stickyTopVals = stickyTop.getBoundingClientRect();\n      console.log(stickyTopVals);\n      const girdPlotTop = document.querySelector('.rv-xy-plot__grid-lines');\n      let girdPlotTopVals = girdPlotTop.getBoundingClientRect();\n      console.log(girdPlotTopVals);\n      const girdPlotOuterTop = document.querySelector('.rv-xy-plot__inner');\n      let girdPlotOuterTopVals = girdPlotOuterTop.getBoundingClientRect();\n      console.log(girdPlotOuterTopVals);\n      let valA = stickyTopVals.top;\n      let valB = girdPlotTopVals.top - girdPlotOuterTopVals.top;\n      let output = valA + valB - 2; //109\n\n      this.setState({\n        yOffset: output\n      });\n      return output;\n    };\n\n    this.chartGap = () => {\n      const chartTop = document.querySelector('.rv-xy-plot__grid-lines'); // console.log('clientHeight '+ chartTop.clientHeight )\n\n      let height = chartTop.getBoundingClientRect();\n      console.log(height);\n      let output = height.height / this.state.rawData.length;\n      console.log(output);\n      return output;\n    };\n\n    this.scrollPlots = () => {\n      setTimeout(() => this.calYOffset(), 700);\n      setTimeout(() => {\n        let gap = this.chartGap();\n        console.log(gap);\n        let scrollPlots = this.props.timelineVals.map((point, index) => {\n          let data = {\n            time: \"\".concat(this.parseDate(point.from, 'time'), \" \").concat(this.parseDate(point.from, 'date')),\n            y: gap * index + index / 2,\n            level: point.level,\n            text: point.text\n          };\n          return data;\n        });\n        this.setState({\n          scrollPlots: scrollPlots\n        });\n      }, 800);\n    };\n\n    this.getLevel = () => {\n      if (this.state.scrollPlots.length > 1) {\n        let currY = this.props.scrollPositionY - this.state.yOffset;\n        let newArray = this.state.scrollPlots.map(obj => {\n          return obj.y;\n        });\n        let closest = newArray.reduce((prev, curr) => {\n          return Math.abs(curr - currY) < Math.abs(prev - currY) ? curr : prev;\n        });\n        let found = this.state.scrollPlots.find(obj => {\n          return obj.y === closest;\n        });\n        return this.setState({\n          currentLevel: {\n            level: found.level,\n            time: found.time,\n            text: found.text\n          }\n        });\n      } //return found.level \n\n    };\n\n    this.parseDate = (input, timeOrDate) => {\n      let output = 0;\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let options24 = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n\n      if (timeOrDate === 'time') {\n        output = parsedDate.toLocaleString(\"en-GB\", optionsTime);\n      } else if (timeOrDate === 'date') {\n        output = \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n      } else if (timeOrDate === '24') {\n        output = parsedDate.toLocaleString(\"en-GB\", options24);\n      }\n\n      return output;\n    };\n\n    this.lowCarbonLabel = item => {\n      let output = '';\n      console.log(item.text); //if (item.text.split(' ')[0] === 'Low' || item.text.split(' ')[1] === 'Low' ) {\n\n      if (item.text === 'Low' || item.text === 'Very Low') {\n        output = 'â˜…';\n      }\n\n      return output;\n    };\n\n    this.formatData = () => {\n      let data = [];\n      let labelData = [];\n      let dayLabels = [];\n      let middleVal = this.props.middle; //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n      if (this.props.timelineVals !== []) {\n        this.props.timelineVals.map((item, index) => {\n          let bar = {\n            x: item.level - 10,\n            y: -index,\n            label: \"\".concat(this.lowCarbonLabel(item)),\n            style: {\n              fill: '#00cc66'\n            },\n            yOffset: -25\n          };\n          data = [...data, bar];\n        });\n        this.props.timelineVals.map((item, index) => {\n          let barLabel = {\n            x: 0,\n            y: -index,\n            label: \"\".concat(this.parseDate(item.from, 'time')),\n            xOffset: -60\n          };\n          labelData = [...labelData, barLabel];\n        });\n        this.props.timelineVals.map((item, index) => {\n          // let middle = this.props.screenWidth / 2\n          // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n          //middle += 100\n          let day = '';\n\n          if (parseInt(\"\".concat(this.parseDate(item.from, '24'))) < 1 || index < 1) {\n            day = \"\".concat(this.parseDate(item.from, 'date'));\n            console.log(day);\n          }\n\n          let dayLabel = {\n            x: this.state.middle,\n            y: -index,\n            label: day,\n            xOffset: this.props.mobileUser ? 0 : -30,\n            yOffset: -15\n          };\n          dayLabels = [...dayLabels, dayLabel];\n        });\n      } //console.log(data)\n\n\n      this.setState({\n        rawData: data,\n        labelData: labelData,\n        dayLabels: dayLabels\n      });\n    };\n\n    this.manageHeight = () => {\n      let newHeight = this.props.timelineVals.length += 400;\n      this.setState({\n        height: newHeight\n      });\n    };\n\n    this._forgetValue = () => {\n      this.setState({\n        value: null\n      });\n    };\n\n    this._rememberValue = value => {\n      this.setState({\n        value\n      });\n    };\n  }\n\n  componentDidMount() {\n    // this.getposition()\n    //  this.manageScrollDisplay()\n    if (typeof this.props.timelineVals[0] !== 'undefined') {\n      return this.formatData(), this.manageHeight();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.scrollPositionY !== prevProps.scrollPositionY) {\n      return this.getLevel();\n    }\n\n    if (this.props.timelineVals !== prevProps.timelineVals) return this.formatData(), this.manageHeight();\n\n    if (this.state.rawData !== prevState.rawData) {\n      return this.scrollPlots();\n    }\n  } //       //let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n  //       let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n  //       let chartTopPos = chartTop.getBoundingClientRect() \n  //         console.log('clientHeight '+ chartTop.clientHeight )\n\n\n  // <i ref={(ref) => this.scrollIcon = ref} className=\"fa fa-2x fa-chevron-down\"></i>\n  render() {\n    //const {value} = this.state\n    let scroll = window.scrollY; // console.log(scrolledDown)\n\n    return React.createElement(\"div\", {\n      style: {\n        height: '800vh',\n        background: '#fff'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(Dimmer, {\n      active: this.props.loading,\n      page: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Loading\")), React.createElement(\"div\", {\n      id: \"sticky\",\n      height: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \" Carbon Intensity Timeline\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(Table, {\n      id: \"sticky-table\",\n      fixed: true,\n      unstackable: true,\n      singleLine: true,\n      celled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, this.state.currentLevel.time)), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, this.state.currentLevel.level)), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Share\"))), React.createElement(Table.Row, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: this.state.currentLevel.text === \"Low\" || this.state.currentLevel.text === \"Very Low\" ? \"highlight, green\" : \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"\\u27F5  Low\")), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: this.state.currentLevel.text === \"Moderate\" ? {\n        color: 'orange',\n        fontWeight: 'bold'\n      } : {\n        color: 'black',\n        fontWeight: 'normal'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Medium\")), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: this.state.currentLevel.text === \"High\" || this.state.currentLevel.text === \"Very High\" ? {\n        color: 'red',\n        fontWeight: 'bold',\n        borderStyle: 'solid',\n        borderColor: 'red',\n        borderSpacing: '15px;'\n      } : {\n        color: 'black',\n        fontWeight: 'normal'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"High  \\u27F6\")))))), React.createElement(\"div\", {\n      id: \"stickyMeasure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"timeline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width: '100%',\n        height: '800vh',\n        //height: `${this.state.height}vh`,\n        overflow: 'auto'\n      },\n      id: \"bg-fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%'\n      } // style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(FlexibleXYPlot, {\n      id: \"timeline-chart\",\n      margin: {\n        bottom: 1000,\n        left: 80,\n        right: 20,\n        top: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(HorizontalGridLines, {\n      tickTotal: this.state.rawData.length,\n      animation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.rawData,\n      color: 'black',\n      animation: true,\n      style: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: 8\n      },\n      curve: 'curveMonotoneX',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.rawData // labelAnchorX={\"end\"}\n      // labelAnchorY={\"middle\"}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.labelData,\n      labelAnchorX: \"start\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.dayLabels,\n      labelAnchorX: \"end\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withScroll(Timeline);","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js"],"names":["React","Component","XYPlot","LineSeries","MarkSeries","HorizontalGridLines","Hint","XAxis","YAxis","Borders","VerticalGridLines","HorizontalBarSeries","GradientDefs","AreaSeries","FlexibleXYPlot","LabelSeries","Sticky","Header","Table","Dimmer","Loader","TableCell","withScroll","Timeline","state","rawData","y","x","label","barPosition","date","offset","labelData","lable","height","middle","props","mediumLevel","value","initalScrollCounter","dataIndex","position","scrollPositionY","scrollPlots","getLevel","yOffset","currentLevel","level","time","text","calYOffset","stickyTop","document","querySelector","stickyTopVals","getBoundingClientRect","console","log","girdPlotTop","girdPlotTopVals","girdPlotOuterTop","girdPlotOuterTopVals","valA","top","valB","output","setState","chartGap","chartTop","length","setTimeout","gap","timelineVals","map","point","index","data","parseDate","from","currY","newArray","obj","closest","reduce","prev","curr","Math","abs","found","find","input","timeOrDate","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","options24","parsedDate","Date","UTC","parseInt","slice","toLocaleString","lowCarbonLabel","item","formatData","dayLabels","middleVal","bar","style","fill","barLabel","xOffset","dayLabel","mobileUser","manageHeight","newHeight","_forgetValue","_rememberValue","componentDidMount","componentDidUpdate","prevProps","prevState","render","scroll","window","scrollY","background","loading","color","fontWeight","borderStyle","borderColor","borderSpacing","justifyContent","width","overflow","bottom","left","right","strokeLinejoin","strokeWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {XYPlot, LineSeries, MarkSeries, HorizontalGridLines, Hint, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries} from 'react-vis';\nimport { Sticky, Header, Table, Dimmer, Loader, TableCell } from 'semantic-ui-react';\nimport { withScroll } from 'react-window-decorators';\n\n// @withScroll\nclass Timeline extends Component {\n\n    state = {\n        rawData: [{y: 0, x: 0, label:'loading | loadidng'}],\n        barPosition: {date: '', offset: 0},\n        labelData: [{lable: 'Testing'}],\n        height: 50,\n        middle: typeof this.props.middle !== 'undefined' ? this.props.mediumLevel : 150,\n        value: null,\n       // scrollCount: 0,\n        initalScrollCounter:0,\n        dataIndex: -1,\n        position: this.props.scrollPositionY,\n        scrollPlots: [],\n        getLevel:0,\n        yOffset:0,\n        currentLevel:{level:0, time:'loading', text:'loading'}\n    }\n\n\n\n    componentDidMount () {\n     // this.getposition()\n    //  this.manageScrollDisplay()\n\n        if (typeof this.props.timelineVals[0] !== 'undefined'){\n          return (\n              this.formatData(),\n              this.manageHeight()\n              ) \n            }\n        }\n\n        \n        \n        componentDidUpdate (prevProps, prevState) {\n            if (this.props.scrollPositionY !== prevProps.scrollPositionY) {\n               return (this.getLevel() ) \n            }\n            if (this.props.timelineVals !== prevProps.timelineVals)\n            return (\n                this.formatData(),\n                this.manageHeight()\n                ) \n            if (this.state.rawData !== prevState.rawData)\n            {\n               return (this.scrollPlots() )\n            }\n\n            }\n\n//       //let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n//       let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n//       let chartTopPos = chartTop.getBoundingClientRect() \n//         console.log('clientHeight '+ chartTop.clientHeight )\n\n\ncalYOffset = () => {\n\n    const stickyTop = document.querySelector('#sticky')\n    let stickyTopVals = stickyTop.getBoundingClientRect()\n    console.log(stickyTopVals)\n\n    \n    const girdPlotTop = document.querySelector('.rv-xy-plot__grid-lines')\n    let girdPlotTopVals = girdPlotTop.getBoundingClientRect()\n    console.log(girdPlotTopVals)    \n\n    const girdPlotOuterTop = document.querySelector('.rv-xy-plot__inner')\n    let girdPlotOuterTopVals = girdPlotOuterTop.getBoundingClientRect()\n    console.log(girdPlotOuterTopVals)\n    \n    let valA = stickyTopVals.top\n    let valB = girdPlotTopVals.top - girdPlotOuterTopVals.top\n    let output = valA+valB-2 //109\n    this.setState({yOffset: output})\n    return output\n}\n\n    chartGap = () => {\n    \n        const chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n       // console.log('clientHeight '+ chartTop.clientHeight )\n       let height = chartTop.getBoundingClientRect()\n       console.log(height)\n        let output = (height.height / this.state.rawData.length)\n        console.log(output)\n        return output\n    }\n    \n\n\n    scrollPlots = () => {\n        setTimeout(() => this.calYOffset(), 700)\n\n    setTimeout(() => {\n        let gap =this.chartGap()\n        console.log(gap)\n        let scrollPlots =  this.props.timelineVals.map((point, index) => {    \n        \n        let data = {time:`${this.parseDate(point.from, 'time')} ${this.parseDate(point.from, 'date')}`,\n        y: (gap * index)+(index/2), level: point.level, text: point.text}\n            return data\n        })\n        this.setState({scrollPlots: scrollPlots})\n    },800)\n    }\n    // scrollPlots = () => {\n    //     this.calYOffset()\n    //     let gap =this.chartGap()\n    //     console.log(gap)\n    //    let scrollPlots =  this.state.rawData.map((point, index) => {    \n        \n    //     let data = {y: (gap * (index)), level: point.x}\n    //         return data\n    //     })\n    //     this.setState({scrollPlots: scrollPlots})\n    // }\n\n    getLevel = () => {\n        \n        if (this.state.scrollPlots.length > 1) {\n\n        let currY = this.props.scrollPositionY - this.state.yOffset \n        let newArray = this.state.scrollPlots.map(obj => {\n            return obj.y\n          })\n           let closest = newArray.reduce((prev, curr) => {\n           return (Math.abs(curr - currY) < Math.abs(prev - currY) ? curr : prev);\n           })\n          let found = this.state.scrollPlots.find(obj => {\n            return obj.y === closest\n          })\n         return this.setState({\n              currentLevel:{level: found.level, time:found.time, text:found.text}\n          })\n        }\n          //return found.level \n        \n        }\n\n\n    parseDate = (input, timeOrDate) => {\n        let output = 0\n        let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n        let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: true};\n        let options24 = { hour: 'numeric',minute: 'numeric', hour12: false};\n\n               let parsedDate = new Date(Date.UTC(\n                   parseInt(input.slice(0, 4), 10),\n                   parseInt(input.slice(5, 7), 10) - 1,\n                   parseInt(input.slice(8, 10), 10),\n                   parseInt(input.slice(11, 13), 10),\n                   parseInt(input.slice(14, 16), 10),\n                 //parseInt(input.slice(13,15), 10)\n               ))\n               if (timeOrDate === 'time'){\n                   output =  parsedDate.toLocaleString(\"en-GB\", optionsTime)\n               }else if (timeOrDate === 'date') {\n               output =  (`${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n               }else if (timeOrDate === '24') {\n               output =  parsedDate.toLocaleString(\"en-GB\", options24)\n              }\n\n\n            return output\n\n            }\n\n        lowCarbonLabel = (item) => {\n            let output = ''\n            console.log(item.text)\n            //if (item.text.split(' ')[0] === 'Low' || item.text.split(' ')[1] === 'Low' ) {\n            if (item.text === 'Low' || item.text === 'Very Low' ) {\n                output = 'â˜…'\n            }\n            return output\n        }\n\n       formatData = () => {\n        let data = []\n        let labelData = []\n        let dayLabels = []\n        let middleVal = this.props.middle\n        //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n        if (this.props.timelineVals !== [] ) {\n\n        this.props.timelineVals.map((item, index) => {\n            let bar = {x: item.level-10, y: -index, label: `${this.lowCarbonLabel(item)}`,style: {fill: '#00cc66'}, yOffset:-25}   \n            data = [...data, bar]\n        })\n\n        this.props.timelineVals.map((item, index) => {\n            let barLabel = {x: 0, y: -index, label: `${this.parseDate(item.from, 'time')}`, xOffset:-60}  \n            labelData = [...labelData, barLabel]\n        })\n        this.props.timelineVals.map((item, index) => {\n            \n           // let middle = this.props.screenWidth / 2\n           // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n            //middle += 100\n            let day = ''\n\n            if (parseInt(`${this.parseDate(item.from, '24')}`) < 1 || index < 1 )\n            {\n                day = `${this.parseDate(item.from, 'date')}`\n                console.log(day)   \n            }\n            let dayLabel = {x: this.state.middle, y: -index, \n                label: day,\n                xOffset: this.props.mobileUser ? 0 : -30,\n                 yOffset:-15}  \n            dayLabels = [...dayLabels, dayLabel]\n        })\n    }\n       \n        //console.log(data)\n        \n        this.setState({\n            rawData: data,\n            labelData: labelData,\n            dayLabels: dayLabels\n        })    \n    \n    }\n    //day.sort((a, b) => (a.level > b.level)\n    manageHeight = () => {\n       let newHeight =  this.props.timelineVals.length += 400\n        this.setState({\n            height: newHeight\n        })\n    }\n\n    _forgetValue = () => {\n        this.setState({\n          value: null\n        });\n      };\n    \n      _rememberValue = value => {\n        this.setState({value});\n      };\n    \n\n\n\n    // <i ref={(ref) => this.scrollIcon = ref} className=\"fa fa-2x fa-chevron-down\"></i>\n\n\n    render() {\n        //const {value} = this.state\n        let scroll = window.scrollY;\n        // console.log(scrolledDown)\n      \n        \n        return (\n\n\n\n            <div\n            style={{\n                height: '800vh',\n                background: '#fff'\n            }}\n            >\n\n\n\n\n\n<Dimmer active={this.props.loading} page>\n        <Loader>Loading</Loader>\n    </Dimmer>\n\n\n\n          <div id=\"sticky\" height={2}> \n         <h2> Carbon Intensity Timeline</h2> <br></br>\n            {/* Vertical scroll position is: { this.props.scrollPositionY - this.state.yOffset } <br></br> */}\n            {/* Carbon Intensity: {this.state.currentLevel.level} */}\n           \n          <Table id=\"sticky-table\" fixed unstackable singleLine celled>\n          {/* <Table id=\"sticky-table\" fixed unstackable singleLine celled> */}\n\n            <Table.Body>\n            <Table.Row textAlign='center'> \n            <Table.Cell><h3>{this.state.currentLevel.time}</h3></Table.Cell>\n            <Table.Cell><h3>{this.state.currentLevel.level}</h3></Table.Cell>\n            <Table.Cell><h3>Share</h3></Table.Cell>\n\n            </Table.Row>\n\n            <Table.Row textAlign='center'>\n            <Table.Cell><h3 className={this.state.currentLevel.text === \"Low\" || this.state.currentLevel.text === \"Very Low\" ? \"highlight, green\" : \"normal\"}>âŸµ  Low</h3></Table.Cell>\n            <Table.Cell><h3 style={this.state.currentLevel.text === \"Moderate\" ? {color: 'orange', fontWeight: 'bold'} : {color: 'black', fontWeight: 'normal'}}>Medium</h3></Table.Cell>\n            <Table.Cell><h3 style={this.state.currentLevel.text === \"High\" || this.state.currentLevel.text === \"Very High\" ? {color: 'red', fontWeight: 'bold', borderStyle: 'solid', borderColor:'red', borderSpacing: '15px;' } : {color: 'black', fontWeight: 'normal'}}>High  âŸ¶</h3></Table.Cell>\n            </Table.Row>\n            </Table.Body>\n          </Table>\n          \n          </div>\n          <div id=\"stickyMeasure\">\n          </div>\n\n                <div id=\"timeline\">\n<div\n        \n      style={{\n          // display: 'flex',\n          justifyContent: 'space-between',\n          position: 'relative',\n          width:  '100%',\n          height: '800vh',\n          //height: `${this.state.height}vh`,\n          overflow: 'auto',\n        }}\n      id=\"bg-fade\"\n\n      \n    >\n\n\n\n<div\n        style={{width: '100%', height: '100%'}}\n        // style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      >\n        <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 1000, left: 80, right: 20, top: 50}}> \n        {/* <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 80, left: 80, right: 20, top: 50}}>  */}\n        {/*50*/}\n        {/* xType=\"time\" \n         yType=\"ordinal\"\n        */}\n        \n\n        <HorizontalGridLines \n        tickTotal={this.state.rawData.length}\n        animation={true}\n        />\n     \n        {/* <YAxis \n        position=\"start\"\n        tickTotal={2}\n        // top={40}\n        top={0}\n        //height={150}\n        //width={1}\n        style={{\n            text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n          }}\n          //tickLabelAngle={-45}\n          /> */}\n        \n        \n        <LineSeries \n        data={this.state.rawData}\n        color={'black'}\n        animation\n        style={{\n            fill: 'none',\n            strokeLinejoin: 'round',\n            strokeWidth: 8\n        }}\n        curve={'curveMonotoneX'}\n        />\n\n        {/* <MarkSeries\n          onValueMouseOver={this._rememberValue}\n          onValueMouseOut={this._forgetValue}\n          data={this.state.rawData}\n          id=\"markSeries\"\n        /> */}\n        {/* {value ? <Hint value={value} /> : null} */}\n\n        <LabelSeries\n        data={this.state.rawData}\n        // labelAnchorX={\"end\"}\n        // labelAnchorY={\"middle\"}\n        />\n        <LabelSeries\n        data={this.state.labelData}\n        labelAnchorX={\"start\"}\n        labelAnchorY={\"middle\"}\n        />\n\n        <LabelSeries\n        data={this.state.dayLabels}\n        labelAnchorX={\"end\"}\n        labelAnchorY={\"middle\"}\n        />\n\n\n\n        {/* <HorizontalBarSeries \n        data={this.state.rawData}\n        color={'url(#CoolGradient)'}\n        animation\n        /> */}\n\n         {/* <YAxis \n         position=\"start\"\n         tickValues={this.state.rawData.map(value => value.y)} \n         tickSize={1}\n         />  */}\n\n{/*\n            //data={this.xlabelData('top')}\n                //return { ...obj, y: this.props.mobileUser ? -3 : -18, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[0]}` }\n            //animation\n            // labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n            // //labelAnchorY=\"text-before-edge\"\n            // labelAnchorY={this.props.mobileUser ? \"text-after-edge\" : \"baseline\"}\n            // labelAnchorX={\"middle\"}\n            // labelAnchorY={\"text-before-edge\"}\n            // style={{\n            //     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n            //   }}\n        {/* \n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n                        return { ...obj, label: obj.y.toString() }\n                    })}\n                    \n                    animation\n                    labelAnchorX=\"middle\"\n                    labelAnchorY=\"text-before-edge\"\n                    \n                    />\n\n\n\n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n\n                        return { ...obj, y: this.props.mobileUser ? -3 :-34, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[1]}` }\n                    })}\n                    animation\n                    labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n                    //labelAnchorY=\"text-before-edge\"\n                    //labelAnchorY=\"baseline\"\n                    labelAnchorY={this.props.mobileUser ? \"text-before-edge\" : \"baseline\"}\n                    style={{\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n                      }}\n                    /> */}\n\n\n\n        </FlexibleXYPlot>\n      </div>\n\n</div>\n     \n\n        </div>\n        \n\n            </div>\n        );\n    }\n}\n\nexport default withScroll (Timeline);\n"]},"metadata":{},"sourceType":"module"}