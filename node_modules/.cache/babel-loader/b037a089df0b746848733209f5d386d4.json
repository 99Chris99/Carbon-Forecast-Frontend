{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js\";\nimport React, { Component } from 'react';\nimport { XYPlot, LineSeries, HorizontalGridLines, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries } from 'react-vis';\nexport class Timeline extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rawData: [{\n        y: 0,\n        x: 0,\n        label: 'loading | loaidng'\n      }],\n      barPosition: {\n        date: '',\n        offset: 0\n      },\n      labelData: [{\n        lable: 'Testing'\n      }],\n      height: 50,\n      middle: 150\n    };\n\n    this.parseDate = (input, timeOrDate) => {\n      let output = 0;\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let options24 = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n\n      if (timeOrDate === 'time') {\n        output = parsedDate.toLocaleString(\"en-GB\", optionsTime);\n      } else if (timeOrDate === 'date') {\n        output = \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n      } else if (timeOrDate === '24') {\n        output = parsedDate.toLocaleString(\"en-GB\", options24);\n      }\n\n      return output;\n    };\n\n    this.formatData = () => {\n      let data = [];\n      let labelData = [];\n      let dayLabels = [];\n      let middle = this.props.middle; //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n      if (this.props.timelineVals !== []) {\n        this.props.timelineVals.map((item, index) => {\n          let bar = {\n            x: item.level,\n            y: -index,\n            label: \"\".concat(item.text)\n          };\n          data = [...data, bar];\n        });\n        this.props.timelineVals.map((item, index) => {\n          let barLabel = {\n            x: 0,\n            y: -index,\n            label: \"\".concat(this.parseDate(item.from, 'time')),\n            xOffset: -60\n          };\n          labelData = [...labelData, barLabel];\n        });\n        this.props.timelineVals.map((item, index) => {\n          // let middle = this.props.screenWidth / 2\n          // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n          //middle += 100\n          let day = '';\n\n          if (parseInt(\"\".concat(this.parseDate(item.from, '24'))) < 1 || index < 1) {\n            day = \"\".concat(this.parseDate(item.from, 'date'));\n            console.log(day);\n          }\n\n          let dayLabel = {\n            x: this.state.middle,\n            y: -index,\n            label: day,\n            yOffset: -15\n          };\n          dayLabels = [...dayLabels, dayLabel];\n        });\n      } //console.log(data)\n\n\n      this.setState({\n        rawData: data,\n        labelData: labelData,\n        dayLabels: dayLabels\n      });\n    };\n\n    this.manageHeight = () => {\n      let newHeight = this.props.timelineVals.length += 400;\n      this.setState({\n        height: newHeight\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (typeof this.props.timelineVals[0] !== 'undefined') {\n      return this.formatData(), this.manageHeight();\n    }\n  }\n\n  componentDidUpdate(prevPros, prevState) {\n    if (this.state.rawData !== prevState.rawData) console.log('hi');\n  } // mapTest = () => {\n  //     let test = this.state.rawData.map(item => {\n  //         return item.text.split('|')[0]})\n  //         console.log(`HiHi${test}`)\n  // }\n  // getMiddle = () => {\n  //     if (this.state.middle < 1) {\n  //     let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n  //     this.setState({middle: middle})\n  //     }\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"timeline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width: '100%',\n        height: '800vh',\n        //height: `${this.state.height}vh`,\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        border: '1px solid #ccc'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(FlexibleXYPlot, {\n      id: \"timeline-chart\",\n      margin: {\n        bottom: 80,\n        left: 80,\n        right: 20,\n        top: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(GradientDefs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"linearGradient\", {\n      id: \"CoolGradient\",\n      y1: \"0\",\n      y2: \"0\",\n      x1: \"0\",\n      x2: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"stop\", {\n      offset: \"0%\",\n      stopColor: \"green\",\n      stopOpacity: 0.4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: \"50%\",\n      stopColor: \"yellow\",\n      stopOpacity: 0.4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: \"100%\",\n      stopColor: \"red\",\n      stopOpacity: 0.4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }))), React.createElement(HorizontalGridLines, {\n      tickTotal: this.state.rawData.length,\n      animation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.rawData,\n      color: 'grey',\n      animation: true,\n      style: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: 4\n      },\n      curve: 'curveMonotoneX',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.labelData,\n      labelAnchorX: \"start\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.dayLabels,\n      labelAnchorX: \"end\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }))))));\n  }\n\n}\nexport default Timeline;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js"],"names":["React","Component","XYPlot","LineSeries","HorizontalGridLines","XAxis","YAxis","Borders","VerticalGridLines","HorizontalBarSeries","GradientDefs","AreaSeries","FlexibleXYPlot","LabelSeries","Timeline","state","rawData","y","x","label","barPosition","date","offset","labelData","lable","height","middle","parseDate","input","timeOrDate","output","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","options24","parsedDate","Date","UTC","parseInt","slice","toLocaleString","formatData","data","dayLabels","props","timelineVals","map","item","index","bar","level","text","barLabel","from","xOffset","console","log","dayLabel","yOffset","setState","manageHeight","newHeight","length","componentDidMount","componentDidUpdate","prevPros","prevState","render","justifyContent","position","width","overflow","border","bottom","left","right","top","fill","strokeLinejoin","strokeWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {XYPlot, LineSeries, HorizontalGridLines, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries} from 'react-vis';\n\nexport class Timeline extends Component {\n\n    state = {\n        rawData: [{y: 0, x: 0, label:'loading | loaidng'}],\n        barPosition: {date: '', offset: 0},\n        labelData: [{lable: 'Testing'}],\n        height: 50,\n        middle: 150\n    }\n\n\n    componentDidMount () {\n        if (typeof this.props.timelineVals[0] !== 'undefined'){\n          return (\n              this.formatData(),\n              this.manageHeight()\n              ) \n            }\n        }\n        \n        componentDidUpdate (prevPros, prevState) {\n            if (this.state.rawData !== prevState.rawData)\n           console.log('hi')\n    }\n\n    \n\n    // mapTest = () => {\n    //     let test = this.state.rawData.map(item => {\n    //         return item.text.split('|')[0]})\n    //         console.log(`HiHi${test}`)\n    // }\n\n    // getMiddle = () => {\n    //     if (this.state.middle < 1) {\n    //     let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n    //     this.setState({middle: middle})\n    //     }\n    // }\n\n    parseDate = (input, timeOrDate) => {\n        let output = 0\n        let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n        let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: true};\n        let options24 = { hour: 'numeric',minute: 'numeric', hour12: false};\n\n               let parsedDate = new Date(Date.UTC(\n                   parseInt(input.slice(0, 4), 10),\n                   parseInt(input.slice(5, 7), 10) - 1,\n                   parseInt(input.slice(8, 10), 10),\n                   parseInt(input.slice(11, 13), 10),\n                   parseInt(input.slice(14, 16), 10),\n                 //parseInt(input.slice(13,15), 10)\n               ))\n               if (timeOrDate === 'time'){\n                   output =  parsedDate.toLocaleString(\"en-GB\", optionsTime)\n               }else if (timeOrDate === 'date') {\n               output =  (`${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n               }else if (timeOrDate === '24') {\n               output =  parsedDate.toLocaleString(\"en-GB\", options24)\n              }\n\n\n            return output\n\n            }\n\n       formatData = () => {\n        let data = []\n        let labelData = []\n        let dayLabels = []\n        let middle = this.props.middle\n        //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n        if (this.props.timelineVals !== [] ) {\n\n        this.props.timelineVals.map((item, index) => {\n            let bar = {x: item.level, y: -index, label: `${item.text}` }   \n            data = [...data, bar]\n        })\n        this.props.timelineVals.map((item, index) => {\n            let barLabel = {x: 0, y: -index, label: `${this.parseDate(item.from, 'time')}`, xOffset:-60}  \n            labelData = [...labelData, barLabel]\n        })\n        this.props.timelineVals.map((item, index) => {\n            \n           // let middle = this.props.screenWidth / 2\n           // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n            //middle += 100\n            let day = ''\n\n            if (parseInt(`${this.parseDate(item.from, '24')}`) < 1 || index < 1 )\n            {\n                day = `${this.parseDate(item.from, 'date')}`\n                console.log(day)   \n            }\n            let dayLabel = {x: this.state.middle, y: -index, \n                label: day,\n                 yOffset:-15}  \n            dayLabels = [...dayLabels, dayLabel]\n        })\n    }\n       \n        //console.log(data)\n        \n        this.setState({\n            rawData: data,\n            labelData: labelData,\n            dayLabels: dayLabels\n        })    \n    \n    }\n    //day.sort((a, b) => (a.level > b.level)\n    manageHeight = () => {\n       let newHeight =  this.props.timelineVals.length += 400\n        this.setState({\n            height: newHeight\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                \n\n                <div id=\"timeline\">\n<div\n      style={{\n       // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width:  '100%',\n        height: '800vh',\n        //height: `${this.state.height}vh`,\n        overflow: 'auto',\n      }}\n    \n    >\n<div\n        style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      >\n        <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 80, left: 80, right: 20, top: 50}}>\n        {/* xType=\"time\" \n         yType=\"ordinal\"\n        */}\n        <GradientDefs>\n          <linearGradient id=\"CoolGradient\" y1=\"0\" y2=\"0\" x1=\"0\" x2=\"1\">\n            <stop offset=\"0%\" stopColor=\"green\" stopOpacity={0.4}/>\n            <stop offset=\"50%\" stopColor=\"yellow\" stopOpacity={0.4}/>\n            <stop offset=\"100%\" stopColor=\"red\" stopOpacity={0.4} />\n          </linearGradient>\n        </GradientDefs>\n\n        <HorizontalGridLines \n        tickTotal={this.state.rawData.length}\n        animation={true}\n        />\n     \n        {/* <YAxis \n        position=\"start\"\n        tickTotal={2}\n        // top={40}\n        top={0}\n        //height={150}\n        //width={1}\n        style={{\n            text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n          }}\n          //tickLabelAngle={-45}\n          /> */}\n        \n        \n        <LineSeries \n        data={this.state.rawData}\n        color={'grey'}\n        animation\n        style={{\n            fill: 'none',\n            strokeLinejoin: 'round',\n            strokeWidth: 4\n        }}\n        curve={'curveMonotoneX'}\n        />\n\n        <LabelSeries\n        data={this.state.labelData}\n        \n        labelAnchorX={\"start\"}\n        labelAnchorY={\"middle\"}\n        />\n\n        <LabelSeries\n        data={this.state.dayLabels}\n        \n        labelAnchorX={\"end\"}\n        labelAnchorY={\"middle\"}\n        />\n        {/* <HorizontalBarSeries \n        data={this.state.rawData}\n        color={'url(#CoolGradient)'}\n        animation\n        /> */}\n\n         {/* <YAxis \n         position=\"start\"\n         tickValues={this.state.rawData.map(value => value.y)} \n         tickSize={1}\n         />  */}\n\n{/*\n            //data={this.xlabelData('top')}\n                //return { ...obj, y: this.props.mobileUser ? -3 : -18, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[0]}` }\n            //animation\n            // labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n            // //labelAnchorY=\"text-before-edge\"\n            // labelAnchorY={this.props.mobileUser ? \"text-after-edge\" : \"baseline\"}\n            // labelAnchorX={\"middle\"}\n            // labelAnchorY={\"text-before-edge\"}\n            // style={{\n            //     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n            //   }}\n        {/* \n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n                        return { ...obj, label: obj.y.toString() }\n                    })}\n                    \n                    animation\n                    labelAnchorX=\"middle\"\n                    labelAnchorY=\"text-before-edge\"\n                    \n                    />\n\n\n\n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n\n                        return { ...obj, y: this.props.mobileUser ? -3 :-34, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[1]}` }\n                    })}\n                    animation\n                    labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n                    //labelAnchorY=\"text-before-edge\"\n                    //labelAnchorY=\"baseline\"\n                    labelAnchorY={this.props.mobileUser ? \"text-before-edge\" : \"baseline\"}\n                    style={{\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n                      }}\n                    /> */}\n\n\n\n        </FlexibleXYPlot>\n      </div>\n\n</div>\n     \n\n        </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Timeline;\n"]},"metadata":{},"sourceType":"module"}