{"ast":null,"code":"var apiEndpoint=\"https://api.carbonintensity.org.uk/\";var nationalURL=\"\".concat(apiEndpoint,\"intensity/\");var allRegionsURL=\"\".concat(apiEndpoint,\"regional/\");var region48Hrs=\"\".concat(allRegionsURL,\"intensity/\");//const id48Hrs = `${allRegionsURL}intensity/{from}/fw48h/regionid/`\nvar handleErrors=function handleErrors(response){if(!response.ok){//if (response !== 200) {\nconsole.log('run for your lives its an error!!!');alert('Error retrieving forecast data, please reload.');// throw Error(response.statusText, reload());\n}//console.log('All good')\nreturn response;};var reload=function reload(){alert('Error retrieving forecast data, please reload.');};var getCurrentNationalData=function getCurrentNationalData(){return fetch(nationalURL,{method:\"GET\"}).then(handleErrors).then(function(response){return response.json();});};var getCurrentRegionalData=function getCurrentRegionalData(){return fetch(allRegionsURL,{method:\"GET\"}).then(handleErrors).then(function(response){return response.json();});};var getRegionId48HrsData=function getRegionId48HrsData(idQuery,start){return fetch(\"\".concat(region48Hrs).concat(start,\"/fw48h/regionid/\").concat(idQuery),{method:\"GET\"}).then(handleErrors).then(function(response){return response.json();});};var getRegionPostCode48HrsData=function getRegionPostCode48HrsData(postCodeQuery,start){return fetch(\"\".concat(region48Hrs).concat(start,\"/fw48h/postcode/\").concat(postCodeQuery),{method:\"GET\"}).then(handleErrors).then(function(response){return response.json();});};export default{getCurrentNationalData:getCurrentNationalData,getCurrentRegionalData:getCurrentRegionalData,getRegionId48HrsData:getRegionId48HrsData,getRegionPostCode48HrsData:getRegionPostCode48HrsData};","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/adapters/API.js"],"names":["apiEndpoint","nationalURL","allRegionsURL","region48Hrs","handleErrors","response","ok","console","log","alert","reload","getCurrentNationalData","fetch","method","then","json","getCurrentRegionalData","getRegionId48HrsData","idQuery","start","getRegionPostCode48HrsData","postCodeQuery"],"mappings":"AAAA,GAAMA,CAAAA,WAAW,sCAAjB,CACA,GAAMC,CAAAA,WAAW,WAAMD,WAAN,cAAjB,CACA,GAAME,CAAAA,aAAa,WAAMF,WAAN,aAAnB,CACA,GAAMG,CAAAA,WAAW,WAAMD,aAAN,cAAjB,CACA;AAEA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,QAAD,CAAc,CAC/B,GAAI,CAACA,QAAQ,CAACC,EAAd,CAAkB,CAClB;AACIC,OAAO,CAACC,GAAR,CAAY,oCAAZ,EACAC,KAAK,CAAC,gDAAD,CAAL,CACA;AACH,CACD;AACA,MAAOJ,CAAAA,QAAP,CACH,CATD,CAWA,GAAMK,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACjBD,KAAK,CAAC,gDAAD,CAAL,CACH,CAFD,CAIA,GAAME,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,SAAMC,CAAAA,KAAK,CAACX,WAAD,CAAa,CAACY,MAAM,CAAE,KAAT,CAAb,CAAL,CAAmCC,IAAnC,CAAwCV,YAAxC,EAAsDU,IAAtD,CAA2D,SAAAT,QAAQ,QAAIA,CAAAA,QAAQ,CAACU,IAAT,EAAJ,EAAnE,CAAN,EAA/B,CACA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,SAAMJ,CAAAA,KAAK,CAACV,aAAD,CAAe,CAACW,MAAM,CAAE,KAAT,CAAf,CAAL,CAAqCC,IAArC,CAA0CV,YAA1C,EAAwDU,IAAxD,CAA6D,SAAAT,QAAQ,QAAIA,CAAAA,QAAQ,CAACU,IAAT,EAAJ,EAArE,CAAN,EAA/B,CACA,GAAME,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,OAAD,CAAUC,KAAV,QAAoBP,CAAAA,KAAK,WAAIT,WAAJ,SAAkBgB,KAAlB,4BAA0CD,OAA1C,EAAoD,CAACL,MAAM,CAAE,KAAT,CAApD,CAAL,CAA0EC,IAA1E,CAA+EV,YAA/E,EAA6FU,IAA7F,CAAkG,SAAAT,QAAQ,QAAIA,CAAAA,QAAQ,CAACU,IAAT,EAAJ,EAA1G,CAApB,EAA7B,CACA,GAAMK,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACC,aAAD,CAAgBF,KAAhB,QAA0BP,CAAAA,KAAK,WAAIT,WAAJ,SAAkBgB,KAAlB,4BAA0CE,aAA1C,EAA0D,CAACR,MAAM,CAAE,KAAT,CAA1D,CAAL,CAAgFC,IAAhF,CAAqFV,YAArF,EAAmGU,IAAnG,CAAwG,SAAAT,QAAQ,QAAIA,CAAAA,QAAQ,CAACU,IAAT,EAAJ,EAAhH,CAA1B,EAAnC,CAIA,cAAe,CACXJ,sBAAsB,CAAtBA,sBADW,CAEXK,sBAAsB,CAAtBA,sBAFW,CAGXC,oBAAoB,CAApBA,oBAHW,CAIXG,0BAA0B,CAA1BA,0BAJW,CAAf","sourcesContent":["const apiEndpoint = `https://api.carbonintensity.org.uk/`\nconst nationalURL = `${apiEndpoint}intensity/`\nconst allRegionsURL = `${apiEndpoint}regional/`\nconst region48Hrs = `${allRegionsURL}intensity/`\n//const id48Hrs = `${allRegionsURL}intensity/{from}/fw48h/regionid/`\n\nconst handleErrors = (response) => {\n    if (!response.ok) {\n    //if (response !== 200) {\n        console.log('run for your lives its an error!!!')\n        alert('Error retrieving forecast data, please reload.')\n        // throw Error(response.statusText, reload());\n    }\n    //console.log('All good')\n    return response;\n}\n\nconst reload = () => {\n    alert('Error retrieving forecast data, please reload.')\n}\n\nconst getCurrentNationalData = () => fetch(nationalURL,{method: \"GET\"}).then(handleErrors).then(response => response.json())\nconst getCurrentRegionalData = () => fetch(allRegionsURL,{method: \"GET\"}).then(handleErrors).then(response => response.json())\nconst getRegionId48HrsData = (idQuery, start) => fetch(`${region48Hrs}${start}/fw48h/regionid/${idQuery}`,{method: \"GET\"}).then(handleErrors).then(response => response.json())\nconst getRegionPostCode48HrsData = (postCodeQuery, start) => fetch(`${region48Hrs}${start}/fw48h/postcode/${postCodeQuery}`,{method: \"GET\"}).then(handleErrors).then(response => response.json())\n\n\n\nexport default {\n    getCurrentNationalData,\n    getCurrentRegionalData,\n    getRegionId48HrsData,\n    getRegionPostCode48HrsData\n}"]},"metadata":{},"sourceType":"module"}