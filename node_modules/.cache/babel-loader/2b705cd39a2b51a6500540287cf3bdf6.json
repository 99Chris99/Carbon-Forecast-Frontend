{"ast":null,"code":"const apiEndpoint = \"https://api.carbonintensity.org.uk/\";\nconst nationalURL = \"\".concat(apiEndpoint, \"/intensity\");\nconst allRegionsURL = \"\".concat(apiEndpoint, \"/regional\");\n\nconst getData = URL => fetch(URL).then(response => response.json());\n\nconst compileRegionIndex = () => {\n  const regionIndex = [{\n    id: 0,\n    name: 'test'\n  }];\n  getData(allRegionsURL).then(info => info.data[0].regions.map(item => {\n    regionIndex = [...regionIndex, {\n      id: item.regionid,\n      name: item.shortname\n    }];\n  }));\n  return regionIndex;\n};\n\nexport default {\n  getData,\n  compileRegionIndex\n};","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/adapters/API.js"],"names":["apiEndpoint","nationalURL","allRegionsURL","getData","URL","fetch","then","response","json","compileRegionIndex","regionIndex","id","name","info","data","regions","map","item","regionid","shortname"],"mappings":"AAAA,MAAMA,WAAW,wCAAjB;AACA,MAAMC,WAAW,aAAMD,WAAN,eAAjB;AACA,MAAME,aAAa,aAAMF,WAAN,cAAnB;;AAIA,MAAMG,OAAO,GAAIC,GAAD,IAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA5B,CAAzB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7B,QAAMC,WAAW,GAAG,CAChB;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd,GADgB,CAApB;AAIAT,EAAAA,OAAO,CAACD,aAAD,CAAP,CAAuBI,IAAvB,CAA4BO,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,OAAb,CAAqBC,GAArB,CAAyBC,IAAI,IAAI;AAC7DP,IAAAA,WAAW,GAAG,CACV,GAAGA,WADO,EAEV;AAACC,MAAAA,EAAE,EAAEM,IAAI,CAACC,QAAV;AACAN,MAAAA,IAAI,EAAEK,IAAI,CAACE;AADX,KAFU,CAAd;AAKP,GANmC,CAApC;AASA,SAAOT,WAAP;AACH,CAhBD;;AAoBA,eAAe;AACXP,EAAAA,OADW;AAEXM,EAAAA;AAFW,CAAf","sourcesContent":["const apiEndpoint = `https://api.carbonintensity.org.uk/`\nconst nationalURL = `${apiEndpoint}/intensity`\nconst allRegionsURL = `${apiEndpoint}/regional`\n\n\n\nconst getData = (URL) => fetch(URL).then(response => response.json())\n\nconst compileRegionIndex = () => {\n\n    const regionIndex = [\n        {id: 0, name: 'test'}\n    ]\n\n    getData(allRegionsURL).then(info => info.data[0].regions.map(item => {\n            regionIndex = [\n                ...regionIndex,\n                {id: item.regionid,\n                name: item.shortname}\n            ]\n    }\n    )\n    )\n    return regionIndex\n}\n\n\n\nexport default {\n    getData,\n    compileRegionIndex,\n}"]},"metadata":{},"sourceType":"module"}