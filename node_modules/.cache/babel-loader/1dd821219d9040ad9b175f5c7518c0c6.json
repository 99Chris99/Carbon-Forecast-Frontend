{"ast":null,"code":"import _classCallCheck from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _ from'lodash';import PostcodeJsLkp from'../content/PostcodeJsLkp';import React,{Component}from'react';import{Search,Button,Grid,Header,Segment}from'semantic-ui-react';var initialState={isLoading:false,results:[{title:''}],value:'',confirmResult:''};var source=PostcodeJsLkp.postcodes;//handleResultSelect = (e, { result }) => this.setState({ value: result.title },this.confrimResult(result.title))\nvar PostCodeSearch=/*#__PURE__*/function(_Component){_inherits(PostCodeSearch,_Component);function PostCodeSearch(){var _getPrototypeOf2;var _this;_classCallCheck(this,PostCodeSearch);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(PostCodeSearch)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state=initialState;_this.handleResultSelect=function(e,_ref){var result=_ref.result;return _this.setState({value:result.title});};_this.handleSearchChange=function(e,_ref2){var value=_ref2.value;_this.setState({isLoading:true,value:value});setTimeout(function(){if(_this.state.value.length<1)return _this.setState(initialState);var re=new RegExp(_.escapeRegExp(_this.state.value),'i');var isMatch=function isMatch(result){return re.test(result.title);};_this.setState({isLoading:false,results:_.filter(source,isMatch)});},300);};_this.confirmResult=function(){var valueCheck=_this.state.value;if(typeof valueCheck!=='undefined'&&valueCheck!==''){console.log('confirming');var result=source.filter(function(postcode){return valueCheck===postcode.title;})[0].title;if(typeof result!=='undefined'){console.log(result);//this.setState({confirmResult: result})\n_this.props.updatePostCode(result);}}};return _this;}_createClass(PostCodeSearch,[{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,isLoading=_this$state.isLoading,value=_this$state.value,results=_this$state.results;return React.createElement(\"div\",null,React.createElement(Search,Object.assign({loading:isLoading,onResultSelect:this.handleResultSelect,onSearchChange:_.debounce(this.handleSearchChange,500,{leading:true}),results:results,value:value},this.props)),React.createElement(Button,{onClick:function onClick(event){return _this2.confirmResult();}},\"Submit\"));}}]);return PostCodeSearch;}(Component);export{PostCodeSearch as default};","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js"],"names":["_","PostcodeJsLkp","React","Component","Search","Button","Grid","Header","Segment","initialState","isLoading","results","title","value","confirmResult","source","postcodes","PostCodeSearch","state","handleResultSelect","e","result","setState","handleSearchChange","setTimeout","length","re","RegExp","escapeRegExp","isMatch","test","filter","valueCheck","console","log","postcode","props","updatePostCode","debounce","leading","event"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport PostcodeJsLkp from '../content/PostcodeJsLkp';\nimport React, { Component } from 'react'\nimport { Search, Button, Grid, Header, Segment } from 'semantic-ui-react'\n\nconst initialState = { isLoading: false, results: [{title:''}], value: '', confirmResult: ''}\n\n\nconst source = (\n    PostcodeJsLkp.postcodes\n)\n\n\n//handleResultSelect = (e, { result }) => this.setState({ value: result.title },this.confrimResult(result.title))\n\nexport default class PostCodeSearch extends Component {\n  state = initialState\n\n\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }\n\n  \n\n  confirmResult = () => {\n    let valueCheck = this.state.value\n    if (typeof valueCheck !== 'undefined' && valueCheck !== '') {\n      console.log('confirming')\n    let result = source.filter(postcode => valueCheck === postcode.title)[0].title\n    if (typeof result !== 'undefined'){\n      console.log(result)\n      //this.setState({confirmResult: result})\n    this.props.updatePostCode(result)\n    }\n    }\n  }\n\n\n\n\n  render() {\n    const { isLoading, value, results } = this.state\n\n    return (\n        <div>\n          <Search\n            loading={isLoading}\n            onResultSelect={this.handleResultSelect}\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\n              leading: true,\n            })}\n            results={results}\n            value={value}\n            {...this.props}\n          />\n\n          <Button onClick={event => this.confirmResult()}>Submit</Button>\n          </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}