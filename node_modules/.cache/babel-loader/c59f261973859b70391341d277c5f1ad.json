{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js\";\nimport React, { Component } from 'react';\nimport { Dropdown, Search, Table, Grid, Card, Button, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nimport PostCodeSearch from './PostCodeSearch';\nexport class Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      period: 48,\n      region: 18,\n      loading: true,\n      sortByLevel: false,\n      bestPeriodDisplayDay: true,\n      bestPeriodLoaded: false,\n      bestPeriodsDay: [{\n        description: \"Loading \\n Loading \\n Loading\"\n      }],\n      bestPeriodsNight: [{\n        description: \"Loading \\n Loading \\n Loading\"\n      }]\n    };\n    this.periodOptions = [{\n      key: 6,\n      text: '+6 hours',\n      value: 12 //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n\n    }, {\n      key: 8,\n      text: '+8 hours',\n      value: 16\n    }, {\n      key: 12,\n      text: '+12 hours',\n      value: 24\n    }, {\n      key: 24,\n      text: '+24 hours',\n      value: 48\n    }, {\n      key: 48,\n      text: '+48 hours',\n      value: 96\n    }, {\n      key: 100,\n      text: 'Max',\n      value: 500\n    }];\n\n    this.isLoading = () => {\n      if (this.props.aggedVals === [] || typeof this.props.aggedVals === 'undefined') {\n        this.setState({\n          loading: true\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n\n    this.parseDate = input => {\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n      return \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsTime), \" \").concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n    };\n\n    this.genRegionOptions = () => {\n      let output = this.props.regionIndex.map(obj => {\n        return {\n          key: obj.id,\n          text: obj.name,\n          value: obj.id\n        };\n      });\n      output.sort((a, b) => a.key < b.key ? 1 : -1);\n      return output;\n    };\n\n    this.setPeriod = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        period: data.value\n      });\n    };\n\n    this.setRegion = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        region: data.value\n      });\n    };\n\n    this.controlSort = () => {\n      let newProps = this.props.aggedVals;\n\n      if (this.state.sortByLevel == !true) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.from) > Date.parse(b.from) ? 1 : -1);\n      } else if (this.state.sortByLevel === true) {\n        newProps = this.props.aggedVals.sort((a, b) => a.level > b.level ? 1 : -1);\n      }\n\n      return newProps;\n    };\n\n    this.handleSortButton = event => {\n      let newVal = this.state.sortByLevel ? false : true;\n      this.setState({\n        sortByLevel: newVal\n      });\n    };\n\n    this.handleDayNightButton = event => {\n      let newVal = this.state.bestPeriodDisplayDay ? false : true;\n      this.setState({\n        bestPeriodDisplayDay: newVal\n      });\n    };\n\n    this.postCodeClick = () => {\n      const newPostCode = this.getPostCodeSearch();\n\n      if (newPostCode !== '' || typeof newPostCode !== 'undefined') {\n        this.props.updatePostCode(this.getPostCodeSearch());\n      }\n    };\n\n    this.getPostCodeSearch = postCode => {\n      console.log('postCode');\n      return postCode;\n    };\n\n    this.renderBestPeriods = () => {\n      //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n      let bestDay = this.props.bestPeriods.day;\n      let bestNight = this.props.bestPeriods.night;\n      let dayOutput = [];\n      let nightOutput = [];\n\n      if (typeof bestDay[0] !== 'undefined' && typeof bestDay[1] !== 'undefined' && typeof bestDay[2] !== 'undefined') {\n        dayOutput = [//header:      `${bestDay.from}`,\n        {\n          description: \"\".concat(this.parseDate(bestDay[0].from), \"\\n\").concat(bestDay[0].level, \"\\n\").concat(bestDay[0].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestDay[1].from), \"\\n\").concat(bestDay[1].level, \"\\n\").concat(bestDay[1].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestDay[2].from), \"\\n\").concat(bestDay[2].level, \"\\n\").concat(bestDay[2].text)\n        }];\n      } else {\n        dayOutput = [{\n          description: \"Please change period to include night-time hours \"\n        }];\n      }\n\n      if (typeof bestNight[0] !== 'undefined' && typeof bestNight[1] !== 'undefined' && typeof bestNight[2] !== 'undefined') {\n        nightOutput = [//header:      `${bestDay.from}`,\n        {\n          description: \"\".concat(this.parseDate(bestNight[0].from), \"\\n\").concat(bestNight[0].level, \"\\n\").concat(bestNight[0].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestNight[1].from), \"\\n\").concat(bestNight[1].level, \"\\n\").concat(bestNight[1].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestNight[2].from), \"\\n\").concat(bestNight[2].level, \"\\n\").concat(bestNight[2].text)\n        }];\n      } else {\n        nightOutput = [{\n          description: \"Please change period to include night-time hours \"\n        }];\n      }\n\n      this.setState({\n        bestPeriodsDay: dayOutput,\n        bestPeriodsNight: nightOutput\n      }); // return output\n    };\n  }\n\n  componentDidMount() {\n    if (typeof this.props.bestPeriods !== 'undefined') {\n      if (typeof this.props.bestPeriods.day !== 'undefined' || typeof this.props.bestPeriods.night !== 'undefined') {\n        if (typeof this.props.bestPeriods.day[0] !== 'undefined' || typeof this.props.bestPeriods.night[0] !== 'undefined') {\n          this.renderBestPeriods();\n        }\n      }\n    }\n\n    this.isLoading();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods) {\n      this.renderBestPeriods();\n    }\n\n    if (this.props.aggedVals !== prevProps.aggedVals) {\n      this.isLoading();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Period\",\n      selection: \"2\",\n      options: this.periodOptions,\n      onChange: (event, data) => this.props.updatePeriod(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(PostCodeSearch, {\n      updatePostCode: this.getPostCodeSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(Button, {\n      loading: this.state.loading,\n      onClick: event => this.postCodeClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Submit\"))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Region\",\n      selection: true,\n      options: this.genRegionOptions(),\n      onChange: (event, data) => this.props.updateRegion(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      onClick: this.handleDayNightButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Top 3 times to use electricity duiring this period:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), this.state.bestPeriodDisplayDay ? React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Show Daytime\") : \"Show Daytime | \", this.state.bestPeriodDisplayDay ? \" | Show Night-time\" : React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Show Night-time\")), React.createElement(Card.Group, {\n      itemsPerRow: 3,\n      items: this.state.bestPeriodDisplayDay ? this.state.bestPeriodsDay : this.state.bestPeriodsNight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"summary-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(SummaryChart, {\n      aggedVals: this.controlSort(),\n      sortTrigger: this.state.sortByLevel,\n      mobileUser: this.props.mobileUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      class: \"ui button\",\n      onClick: this.handleSortButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Sort By \", this.state.sortByLevel ? 'Time' : 'Intensity Level'));\n  }\n\n}\nexport default Forecast;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js"],"names":["React","Component","Dropdown","Search","Table","Grid","Card","Button","Image","Segment","Container","SummaryChart","PostCodeSearch","Forecast","state","period","region","loading","sortByLevel","bestPeriodDisplayDay","bestPeriodLoaded","bestPeriodsDay","description","bestPeriodsNight","periodOptions","key","text","value","isLoading","props","aggedVals","setState","parseDate","input","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","genRegionOptions","output","regionIndex","map","obj","id","name","sort","a","b","setPeriod","event","data","console","log","setRegion","controlSort","newProps","parse","from","level","handleSortButton","newVal","handleDayNightButton","postCodeClick","newPostCode","getPostCodeSearch","updatePostCode","postCode","renderBestPeriods","bestDay","bestPeriods","bestNight","night","dayOutput","nightOutput","componentDidMount","componentDidUpdate","prevProps","prevState","render","updatePeriod","updateRegion","mobileUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Search, Table, Grid, Card, Button, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nimport PostCodeSearch from './PostCodeSearch';\n\nexport class Forecast extends Component {\n\n\nstate = {\n    period: 48,\n    region: 18,\n    loading: true,\n    sortByLevel: false,\n    bestPeriodDisplayDay: true,\n    bestPeriodLoaded: false,\n    bestPeriodsDay: [{description: `Loading \\n Loading \\n Loading`}],\n    bestPeriodsNight: [{description: `Loading \\n Loading \\n Loading`}]\n}\n\ncomponentDidMount () {\n    if (typeof this.props.bestPeriods !== 'undefined'){\n       if (typeof this.props.bestPeriods.day !== 'undefined' || typeof this.props.bestPeriods.night !== 'undefined'){\n            if (typeof this.props.bestPeriods.day[0] !== 'undefined' || typeof this.props.bestPeriods.night[0] !== 'undefined'){\n                this.renderBestPeriods()\n    }\n    }\n}\n\nthis.isLoading()\n\n}\n\ncomponentDidUpdate (prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods){\n        this.renderBestPeriods()\n    }\n\n    if (this.props.aggedVals !== prevProps.aggedVals) {\n        this.isLoading()\n    }\n}\n    periodOptions = [\n            {\n              key: 6,\n              text: '+6 hours',\n              value: 12,\n            //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n            },\n            {\n              key: 8,\n              text: '+8 hours',\n              value: 16,\n            },\n            {\n              key: 12,\n              text: '+12 hours',\n              value: 24,\n            },\n            {\n              key: 24,\n              text: '+24 hours',\n              value: 48,\n            },\n            {\n              key: 48,\n              text: '+48 hours',\n              value: 96,\n            },\n            {\n              key: 100,\n              text: 'Max',\n              value: 500,\n            },\n          ]\n\nisLoading = () => {\n    if (this.props.aggedVals === [] || typeof this.props.aggedVals === 'undefined'){\n        this.setState({loading: true})\n    }else {this.setState({loading: false})}\n}\n\n        \n          parseDate = (input) => {\n            let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n            let optionsTime = { hour: 'numeric', minute: 'numeric', hour12: true};\n                   let parsedDate = new Date(Date.UTC(\n                       parseInt(input.slice(0, 4), 10),\n                       parseInt(input.slice(5, 7), 10) - 1,\n                       parseInt(input.slice(8, 10), 10),\n                       parseInt(input.slice(11, 13), 10),\n                       parseInt(input.slice(14, 16), 10),\n                     //parseInt(input.slice(13,15), 10)\n                   ))\n                   return (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)} ${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n           }\n\n\n          genRegionOptions = () => {\n          let output = this.props.regionIndex.map(obj => {\n                return {key: obj.id, text: obj.name, value: obj.id}\n            })\n            output.sort((a,b) => (a.key < b.key) ? 1 : -1)\n            return output\n        }\n\n        setPeriod = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                period: data.value\n            })\n        }\n        setRegion = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                region: data.value\n            })\n        }\n\n        controlSort = () => {\n            let newProps = this.props.aggedVals\n          if (this.state.sortByLevel ==! true){\n           newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.from) > Date.parse(b.from)? 1 : -1))\n            }\n            else if (this.state.sortByLevel === true){\n                newProps = this.props.aggedVals.sort((a,b) => a.level > b.level? 1 : -1)\n            }\n                 return newProps\n        }\n\n        handleSortButton = (event) => {\n            let newVal = this.state.sortByLevel ? false : true\n            this.setState({sortByLevel: newVal})\n        } \n        handleDayNightButton = (event) => {\n            let newVal = this.state.bestPeriodDisplayDay ? false : true\n            this.setState({bestPeriodDisplayDay: newVal})\n        }\n\n        postCodeClick = () => {\n            const newPostCode = this.getPostCodeSearch()\n\n            if (newPostCode !== '' || typeof newPostCode !== 'undefined'){\n            this.props.updatePostCode(this.getPostCodeSearch())\n            }\n        }\n\n        getPostCodeSearch = (postCode) => {\n            console.log('postCode')\n            return postCode\n        }\n\n    renderBestPeriods = () => {\n                \n        //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n        let bestDay =   this.props.bestPeriods.day\n        let bestNight = this.props.bestPeriods.night\n        \n        let dayOutput = []\n        let nightOutput = []\n\n        if (typeof bestDay[0] !== 'undefined' && typeof bestDay[1] !== 'undefined' && typeof bestDay[2] !== 'undefined') {\n        dayOutput = [\n                        //header:      `${bestDay.from}`,\n                       { description:  `${this.parseDate(bestDay[0].from)}\\n${bestDay[0].level}\\n${bestDay[0].text}`},\n                       { description:  `${this.parseDate(bestDay[1].from)}\\n${bestDay[1].level}\\n${bestDay[1].text}`},\n                       { description:  `${this.parseDate(bestDay[2].from)}\\n${bestDay[2].level}\\n${bestDay[2].text}`},\n                ]}else{\n        dayOutput = [  { description:  `Please change period to include night-time hours `}]\n                }\n\n        if (typeof bestNight[0] !== 'undefined' && typeof bestNight[1] !== 'undefined' && typeof bestNight[2] !== 'undefined'){\n        nightOutput = [\n                        //header:      `${bestDay.from}`,\n                       { description:  `${this.parseDate(bestNight[0].from)}\\n${bestNight[0].level}\\n${bestNight[0].text}`},\n                       { description:  `${this.parseDate(bestNight[1].from)}\\n${bestNight[1].level}\\n${bestNight[1].text}`},\n                       { description:  `${this.parseDate(bestNight[2].from)}\\n${bestNight[2].level}\\n${bestNight[2].text}`},\n                    ]\n                }else {\n                   nightOutput = [  { description:  `Please change period to include night-time hours `}]\n\n            }\n            \n        this.setState({\n            bestPeriodsDay: dayOutput,\n            bestPeriodsNight: nightOutput\n        })\n       // return output\n    } \n\n\n\n    render() {\n        return (\n\n            <div>\n\n            <div>\n                {/* <h1> Hi, it's me forecast! Hows things?</h1> */}\n\n<Grid columns='2' >\n<Grid.Row>\n   \n   <Grid.Column floated='left'>      \n    <Dropdown\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n      \n       </Grid.Column>\n       <Grid.Column floated='left'>\n   <PostCodeSearch updatePostCode={this.getPostCodeSearch}/>\n   <Button loading={this.state.loading} onClick={(event => (this.postCodeClick()))}>Submit</Button>\n   </Grid.Column>\n\n</Grid.Row>\n\n\n<Grid.Row>\n   \n    <Grid.Column floated='left'>      \n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => this.props.updateRegion(data.value)}\n        />\n       \n\n\n\n        </Grid.Column>\n        <Grid.Column floated='left'>\n    <p>Yep thats right I'm some text!</p>\n\n\n\n    </Grid.Column>\n \n </Grid.Row>\n </Grid>\n</div>\n<div>\n    {/* <button class=\"ui button\" onClick={this.handleDayNightButton}>Show {this.state.bestPeriodDisplayDay ? 'Daytime' : 'Night-time'}</button> */}\n    <p onClick={this.handleDayNightButton}>Top 3 times to use electricity duiring this period:\n    <br></br>\n     {this.state.bestPeriodDisplayDay ?  <b>Show Daytime</b> : `Show Daytime | `}   \n     {this.state.bestPeriodDisplayDay ?  ` | Show Night-time` : <b>Show Night-time</b>} \n     </p>\n\n <Card.Group  itemsPerRow={3} items={this.state.bestPeriodDisplayDay ? this.state.bestPeriodsDay : this.state.bestPeriodsNight} />\n</div>\n\n\n\n<div id=\"summary-chart\" >\n\n<SummaryChart aggedVals={this.controlSort()} sortTrigger={this.state.sortByLevel} mobileUser={this.props.mobileUser}/>\n</div>\n<button class=\"ui button\" onClick={this.handleSortButton}>Sort By {this.state.sortByLevel ? 'Time' : 'Intensity Level'}</button>\n</div>\n        );\n    }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}