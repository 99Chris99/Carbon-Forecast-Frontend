{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js\";\nimport React, { Component } from 'react';\nimport { Dropdown, Table, Grid, Card, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nexport class Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      period: 48,\n      region: 18,\n      sortByLevel: false,\n      bestPeriodDisplayDay: true,\n      bestPeriodsDay: [{\n        description: \"Loading \\n Loading \\n Loading\"\n      }],\n      bestPeriodsNight: [{\n        description: \"Loading \\n Loading \\n Loading\"\n      }]\n    };\n    this.periodOptions = [{\n      key: 6,\n      text: '+6 hours',\n      value: 12 //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n\n    }, {\n      key: 8,\n      text: '+8 hours',\n      value: 16\n    }, {\n      key: 12,\n      text: '+12 hours',\n      value: 24\n    }, {\n      key: 24,\n      text: '+24 hours',\n      value: 48\n    }, {\n      key: 48,\n      text: '+48 hours',\n      value: 96\n    }, {\n      key: 100,\n      text: 'Max',\n      value: 500\n    }];\n\n    this.parseDate = input => {\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n      return \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsTime), \" \").concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n    };\n\n    this.genRegionOptions = () => {\n      let output = this.props.regionIndex.map(obj => {\n        return {\n          key: obj.id,\n          text: obj.name,\n          value: obj.id\n        };\n      });\n      output.sort((a, b) => a.key < b.key ? 1 : -1);\n      return output;\n    };\n\n    this.setPeriod = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        period: data.value\n      });\n    };\n\n    this.setRegion = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        region: data.value\n      });\n    };\n\n    this.controlSort = () => {\n      let newProps = this.props.aggedVals;\n\n      if (this.state.sortByLevel === false) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.from) > Date.parse(b.from) ? 1 : -1);\n      } else if (this.state.sortByLevel === true) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.level) > Date.parse(b.level) ? 1 : -1);\n      }\n\n      return newProps;\n    };\n\n    this.handleSortButton = event => {\n      let newVal = this.state.sortByLevel ? false : true;\n      this.setState({\n        sortByLevel: newVal\n      });\n    };\n\n    this.handleDayNightButton = event => {\n      let newVal = this.state.bestPeriodDisplayDay ? false : true;\n      this.setState({\n        bestPeriodDisplayDay: newVal\n      });\n    };\n\n    this.renderBestPeriods = () => {\n      //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n      let bestDay = this.props.bestPeriods.day;\n      let bestNight = this.props.bestPeriods.night;\n      let dayOutput = [//header:      `${bestDay.from}`,\n      {\n        description: \"1. \".concat(this.parseDate(bestDay[0].from), \"\\n\").concat(bestDay[0].level, \"\\n\").concat(bestDay[0].text)\n      }, {\n        description: \"2. \".concat(this.parseDate(bestDay[1].from), \"\\n\").concat(bestDay[1].level, \"\\n\").concat(bestDay[1].text)\n      }, {\n        description: \"3. \".concat(this.parseDate(bestDay[2].from), \"\\n\").concat(bestDay[2].level, \"\\n\").concat(bestDay[2].text)\n      }];\n      let nightOutput = [//header:      `${bestDay.from}`,\n      {\n        description: \"1. \".concat(this.parseDate(bestNight[0].from), \"\\n\").concat(bestNight[0].level, \"\\n\").concat(bestNight[0].text)\n      }, {\n        description: \"2. \".concat(this.parseDate(bestNight[1].from), \"\\n\").concat(bestNight[1].level, \"\\n\").concat(bestNight[1].text)\n      }, {\n        description: \"3. \".concat(this.parseDate(bestNight[2].from), \"\\n\").concat(bestNight[2].level, \"\\n\").concat(bestNight[2].text)\n      }];\n      this.setState({\n        bestPeriodsDay: dayOutput //bestPeriodsNight: nightOutput\n\n      }); // return output\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods) {\n      this.renderBestPeriods();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Period\",\n      selection: \"2\",\n      options: this.periodOptions,\n      onChange: (event, data) => this.props.updatePeriod(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Region\",\n      selection: true,\n      options: this.genRegionOptions(),\n      onChange: (event, data) => this.props.updateRegion(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, this.state.bestPeriodDisplayDay ? 'Daytime' : 'Nighttime', \": Top 3 times to use electricity duiring this period:\"), React.createElement(\"button\", {\n      class: \"ui button\",\n      onClick: this.handleDayNightButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Show \", this.state.bestPeriodDisplayDay ? 'Daytime' : 'Night-time')), React.createElement(\"div\", {\n      id: \"summary-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(SummaryChart, {\n      aggedVals: this.controlSort(),\n      sortTrigger: this.state.sortByLevel,\n      mobileUser: this.props.mobileUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      class: \"ui button\",\n      onClick: this.handleSortButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Sort By \", this.state.sortByLevel ? 'Date' : 'Intensity Level'));\n  }\n\n}\nexport default Forecast;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js"],"names":["React","Component","Dropdown","Table","Grid","Card","Image","Segment","Container","SummaryChart","Forecast","state","period","region","sortByLevel","bestPeriodDisplayDay","bestPeriodsDay","description","bestPeriodsNight","periodOptions","key","text","value","parseDate","input","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","genRegionOptions","output","props","regionIndex","map","obj","id","name","sort","a","b","setPeriod","event","data","console","log","setState","setRegion","controlSort","newProps","aggedVals","parse","from","level","handleSortButton","newVal","handleDayNightButton","renderBestPeriods","bestDay","bestPeriods","bestNight","night","dayOutput","nightOutput","componentDidUpdate","prevProps","prevState","render","updatePeriod","updateRegion","mobileUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Table, Grid, Card, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart'\n\nexport class Forecast extends Component {\n\n\nstate = {\n    period: 48,\n    region: 18,\n    sortByLevel: false,\n    bestPeriodDisplayDay: true,\n    bestPeriodsDay: [{description: `Loading \\n Loading \\n Loading`}],\n    bestPeriodsNight: [{description: `Loading \\n Loading \\n Loading`}]\n}\n\ncomponentDidUpdate (prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods){\n        this.renderBestPeriods()\n    }\n}\n\n        periodOptions = [\n            {\n              key: 6,\n              text: '+6 hours',\n              value: 12,\n            //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n            },\n            {\n              key: 8,\n              text: '+8 hours',\n              value: 16,\n            },\n            {\n              key: 12,\n              text: '+12 hours',\n              value: 24,\n            },\n            {\n              key: 24,\n              text: '+24 hours',\n              value: 48,\n            },\n            {\n              key: 48,\n              text: '+48 hours',\n              value: 96,\n            },\n            {\n              key: 100,\n              text: 'Max',\n              value: 500,\n            },\n          ]\n        \n          parseDate = (input) => {\n            let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n            let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: true};\n                   let parsedDate = new Date(Date.UTC(\n                       parseInt(input.slice(0, 4), 10),\n                       parseInt(input.slice(5, 7), 10) - 1,\n                       parseInt(input.slice(8, 10), 10),\n                       parseInt(input.slice(11, 13), 10),\n                       parseInt(input.slice(14, 16), 10),\n                     //parseInt(input.slice(13,15), 10)\n                   ))\n                   return (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)} ${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n           }\n\n\n          genRegionOptions = () => {\n          let output = this.props.regionIndex.map(obj => {\n                return {key: obj.id, text: obj.name, value: obj.id}\n            })\n            output.sort((a,b) => (a.key < b.key) ? 1 : -1)\n            return output\n        }\n\n        setPeriod = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                period: data.value\n            })\n        }\n        setRegion = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                region: data.value\n            })\n        }\n\n        controlSort = () => {\n            let newProps = this.props.aggedVals\n          if (this.state.sortByLevel === false){\n           newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.from) > Date.parse(b.from)? 1 : -1))\n            }\n            else if (this.state.sortByLevel === true){\n                newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.level) > Date.parse(b.level)? 1 : -1))\n            }\n                 return newProps\n        }\n\n        handleSortButton = (event) => {\n            let newVal = this.state.sortByLevel ? false : true\n            this.setState({sortByLevel: newVal})\n        } \n        handleDayNightButton = (event) => {\n            let newVal = this.state.bestPeriodDisplayDay ? false : true\n            this.setState({bestPeriodDisplayDay: newVal})\n        }\n\n    renderBestPeriods = () => {\n                \n        //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n        let bestDay =   this.props.bestPeriods.day\n        let bestNight = this.props.bestPeriods.night\n        \n        let dayOutput = [\n                        //header:      `${bestDay.from}`,\n                       { description:  `1. ${this.parseDate(bestDay[0].from)}\\n${bestDay[0].level}\\n${bestDay[0].text}`},\n                       { description:  `2. ${this.parseDate(bestDay[1].from)}\\n${bestDay[1].level}\\n${bestDay[1].text}`},\n                       { description:  `3. ${this.parseDate(bestDay[2].from)}\\n${bestDay[2].level}\\n${bestDay[2].text}`},\n                ]\n        let nightOutput = [\n                        //header:      `${bestDay.from}`,\n                       { description:  `1. ${this.parseDate(bestNight[0].from)}\\n${bestNight[0].level}\\n${bestNight[0].text}`},\n                       { description:  `2. ${this.parseDate(bestNight[1].from)}\\n${bestNight[1].level}\\n${bestNight[1].text}`},\n                       { description:  `3. ${this.parseDate(bestNight[2].from)}\\n${bestNight[2].level}\\n${bestNight[2].text}`},\n                ]\n\n            \n        this.setState({\n            bestPeriodsDay: dayOutput,\n            //bestPeriodsNight: nightOutput\n        })\n       // return output\n    } \n\n\n\n    render() {\n        return (\n\n            <div>\n\n            <div>\n                {/* <h1> Hi, it's me forecast! Hows things?</h1> */}\n\n<Grid columns='2' >\n<Grid.Row>\n   \n   <Grid.Column floated='left'>      \n    <Dropdown\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n      \n       </Grid.Column>\n       <Grid.Column floated='left'>\n   <p>Yep thats right I'm some text!</p>\n   </Grid.Column>\n\n</Grid.Row>\n\n\n<Grid.Row>\n   \n    <Grid.Column floated='left'>      \n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => this.props.updateRegion(data.value)}\n        />\n       \n        </Grid.Column>\n        <Grid.Column floated='left'>\n    <p>Yep thats right I'm some text!</p>\n    </Grid.Column>\n \n </Grid.Row>\n </Grid>\n</div>\n<div>\n    <h4>{this.state.bestPeriodDisplayDay ? 'Daytime' : 'Nighttime'}: Top 3 times to use electricity duiring this period:</h4>\n    <button class=\"ui button\" onClick={this.handleDayNightButton}>Show {this.state.bestPeriodDisplayDay ? 'Daytime' : 'Night-time'}</button>\n\n {/* <Card.Group  itemsPerRow={3} items={this.state.bestPeriodDisplayDay ? this.state.bestPeriodsDay : this.state.bestPeriodsNight} /> */}\n</div>\n\n\n\n<div id=\"summary-chart\" >\n\n<SummaryChart aggedVals={this.controlSort()} sortTrigger={this.state.sortByLevel} mobileUser={this.props.mobileUser}/>\n</div>\n<button class=\"ui button\" onClick={this.handleSortButton}>Sort By {this.state.sortByLevel ? 'Date' : 'Intensity Level'}</button>\n</div>\n        );\n    }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}