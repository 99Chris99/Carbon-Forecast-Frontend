{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js\";\nimport React, { Component } from 'react';\nimport { XYPlot, LineSeries, MarkSeries, HorizontalGridLines, Hint, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries } from 'react-vis';\nimport { Sticky, Header, Accordion, Table, Dimmer, Loader, TableCell } from 'semantic-ui-react';\nimport { withScroll } from 'react-window-decorators';\nimport TitleContent from '../content/TitleContent'; // @withScroll\n\nclass Timeline extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rawData: [{\n        y: 0,\n        x: 0,\n        label: 'loading | loadidng'\n      }],\n      barPosition: {\n        date: '',\n        offset: 0\n      },\n      labelData: [{\n        lable: 'Testing'\n      }],\n      height: 50,\n      middle: typeof this.props.middle !== 'undefined' ? this.props.mediumLevel : 150,\n      value: null,\n      // scrollCount: 0,\n      initalScrollCounter: 0,\n      dataIndex: -1,\n      position: this.props.scrollPositionY,\n      scrollPlots: [],\n      getLevel: 0,\n      yOffset: 0,\n      currentLevel: {\n        level: 0,\n        time: 'loading',\n        text: 'loading'\n      }\n    };\n\n    this.disableClickOnPage = e => {\n      e.stopPropagation();\n      e.preventDefault();\n    };\n\n    this.calYOffset = () => {\n      document.addEventListener('click', this.disableClickOnPage, true);\n      const stickyTop = document.querySelector('#sticky');\n      let stickyTopVals = stickyTop.getBoundingClientRect();\n      console.log(stickyTopVals);\n      const girdPlotTop = document.querySelector('.rv-xy-plot__grid-lines');\n      let girdPlotTopVals = girdPlotTop.getBoundingClientRect();\n      console.log(girdPlotTopVals);\n      const girdPlotOuterTop = document.querySelector('.rv-xy-plot__inner');\n      let girdPlotOuterTopVals = girdPlotOuterTop.getBoundingClientRect();\n      console.log(girdPlotOuterTopVals);\n      let valA = stickyTopVals.top;\n      let valB = girdPlotTopVals.top - girdPlotOuterTopVals.top;\n      let output = valA + valB - 2; //109\n\n      this.setState({\n        yOffset: output\n      });\n      document.removeEventListener('click', DisableClickOnPage.handler, true);\n      return output;\n    };\n\n    this.chartGap = () => {\n      const chartTop = document.querySelector('.rv-xy-plot__grid-lines'); // console.log('clientHeight '+ chartTop.clientHeight )\n\n      let height = chartTop.getBoundingClientRect();\n      console.log(height);\n      let output = height.height / this.state.rawData.length;\n      console.log(output);\n      return output;\n    };\n\n    this.scrollPlots = () => {\n      setTimeout(() => this.calYOffset(), 300);\n      setTimeout(() => {\n        let gap = this.chartGap();\n        console.log(gap);\n        let scrollPlots = this.props.timelineVals.map((point, index) => {\n          let data = {\n            time: \"\".concat(this.parseDate(point.from, 'time'), \" \").concat(this.parseDate(point.from, 'date')),\n            y: gap * index + index / 2,\n            level: point.level,\n            text: point.text\n          };\n          return data;\n        });\n        this.setState({\n          scrollPlots: scrollPlots\n        });\n      }, 400);\n    };\n\n    this.getLevel = () => {\n      if (this.state.scrollPlots.length > 1) {\n        let currY = this.props.scrollPositionY - this.state.yOffset;\n        let newArray = this.state.scrollPlots.map(obj => {\n          return obj.y;\n        });\n        let closest = newArray.reduce((prev, curr) => {\n          return Math.abs(curr - currY) < Math.abs(prev - currY) ? curr : prev;\n        });\n        let found = this.state.scrollPlots.find(obj => {\n          return obj.y === closest;\n        });\n        return this.setState({\n          currentLevel: {\n            level: found.level,\n            time: found.time,\n            text: found.text\n          }\n        });\n      } //return found.level \n\n    };\n\n    this.parseDate = (input, timeOrDate) => {\n      let output = 0;\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let options24 = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n\n      if (timeOrDate === 'time') {\n        output = parsedDate.toLocaleString(\"en-GB\", optionsTime);\n      } else if (timeOrDate === 'date') {\n        output = \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n      } else if (timeOrDate === '24') {\n        output = parsedDate.toLocaleString(\"en-GB\", options24);\n      }\n\n      return output;\n    };\n\n    this.lowCarbonLabel = item => {\n      let output = '';\n      console.log(item.text); //if (item.text.split(' ')[0] === 'Low' || item.text.split(' ')[1] === 'Low' ) {\n\n      if (item.text === 'Low' || item.text === 'Very Low') {\n        output = 'â˜…';\n      }\n\n      return output;\n    };\n\n    this.formatData = () => {\n      let data = [];\n      let labelData = [];\n      let dayLabels = [];\n      let middleVal = this.props.middle; //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n      if (this.props.timelineVals !== []) {\n        this.props.timelineVals.map((item, index) => {\n          let bar = {\n            x: item.level - 10,\n            y: -index,\n            label: \"\".concat(this.lowCarbonLabel(item)),\n            style: {\n              fill: '#00cc66'\n            },\n            yOffset: -25\n          };\n          data = [...data, bar];\n        });\n        this.props.timelineVals.map((item, index) => {\n          let barLabel = {\n            x: 0,\n            y: -index,\n            label: \"\".concat(this.parseDate(item.from, 'time')),\n            xOffset: -60\n          };\n          labelData = [...labelData, barLabel];\n        });\n        this.props.timelineVals.map((item, index) => {\n          // let middle = this.props.screenWidth / 2\n          // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n          //middle += 100\n          let day = '';\n\n          if (parseInt(\"\".concat(this.parseDate(item.from, '24'))) < 1 || index < 1) {\n            day = \"\".concat(this.parseDate(item.from, 'date'));\n            console.log(day);\n          }\n\n          let dayLabel = {\n            x: this.state.middle,\n            y: -index,\n            label: day,\n            xOffset: this.props.mobileUser ? 0 : -30,\n            yOffset: -15\n          };\n          dayLabels = [...dayLabels, dayLabel];\n        });\n      } //console.log(data)\n\n\n      this.setState({\n        rawData: data,\n        labelData: labelData,\n        dayLabels: dayLabels\n      });\n    };\n\n    this.manageHeight = () => {\n      let newHeight = this.props.timelineVals.length += 400;\n      this.setState({\n        height: newHeight\n      });\n    };\n\n    this._forgetValue = () => {\n      this.setState({\n        value: null\n      });\n    };\n\n    this._rememberValue = value => {\n      this.setState({\n        value\n      });\n    };\n\n    this.colorChange = (text1, text2, color) => {\n      if (this.state.currentLevel.text === text1 || this.state.currentLevel.text === text2) {\n        return {\n          color: color,\n          fontWeight: 'bold',\n          borderBottom: \"2px solid \".concat(color)\n        };\n      } else return {\n        color: 'black',\n        fontWeight: 'normal',\n        border: 'none'\n      };\n    };\n  }\n\n  componentDidMount() {\n    // this.getposition()\n    //  this.manageScrollDisplay()\n    if (typeof this.props.timelineVals[0] !== 'undefined') {\n      return this.formatData(), this.manageHeight();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.scrollPositionY !== prevProps.scrollPositionY) {\n      return this.getLevel();\n    }\n\n    if (this.props.timelineVals !== prevProps.timelineVals) return this.formatData(), this.manageHeight();\n\n    if (this.state.rawData !== prevState.rawData) {\n      return this.scrollPlots();\n    }\n  } //       //let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n  //       let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n  //       let chartTopPos = chartTop.getBoundingClientRect() \n  //         console.log('clientHeight '+ chartTop.clientHeight )\n\n\n  render() {\n    //const {value} = this.state\n    let scroll = window.scrollY; // console.log(scrolledDown)\n\n    const highlight = \"highlight\";\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Timeline Forecast\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"Use the Forecast Timeline to see the forecast in detail over time.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"The black line is the Carbon Intensity level. The Carbon Intensity increases as it travels to the right.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"As you scroll the info panel will update, with the Time, Carbon Intensity Level and Low, Medium, High, indicators.\")), React.createElement(\"div\", {\n      className: \"bgPanel\",\n      style: {\n        background: '#fff'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        height: '800vh'\n      },\n      id: \"bg-fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Dimmer, {\n      active: this.props.loading,\n      page: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Loading\")), React.createElement(\"div\", {\n      id: \"sticky\",\n      height: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \" Carbon Intensity Timeline\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(Table, {\n      className: \"sticky-table\",\n      fixed: true,\n      unstackable: true,\n      singleLine: true,\n      celled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, this.state.currentLevel.time.slice(8))), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, this.state.currentLevel.time.slice(0, 8))), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"\".concat(this.state.currentLevel.level, \" CO2e\")))), React.createElement(Table.Row, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: this.colorChange(\"Low\", \"Very Low\", \"green\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"\\u27F5  Low\")), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: this.colorChange(\"Moderate\", \"Moderate\", \"orange\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"Medium\")), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: this.colorChange(\"High\", \"Very Hight\", \"red\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, \"High  \\u27F6\")))))), React.createElement(\"div\", {\n      id: \"stickyMeasure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"timeline\",\n      height: 800,\n      style: {\n        marginBottom: '0vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width: '100%',\n        height: '800vh',\n        //   height: '800vh',\n        //height: `${this.state.height}vh`,\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%'\n      } // style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(FlexibleXYPlot, {\n      id: \"timeline-chart\",\n      margin: {\n        bottom: 250,\n        left: 80,\n        right: 20,\n        top: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(HorizontalGridLines, {\n      tickTotal: this.state.rawData.length,\n      animation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.rawData,\n      color: 'black',\n      animation: true,\n      style: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: 8\n      },\n      curve: 'curveMonotoneX',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.rawData // labelAnchorX={\"end\"}\n      // labelAnchorY={\"middle\"}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.labelData,\n      labelAnchorX: \"start\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.dayLabels,\n      labelAnchorX: \"end\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }))))))));\n  }\n\n}\n\nexport default withScroll(Timeline);","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js"],"names":["React","Component","XYPlot","LineSeries","MarkSeries","HorizontalGridLines","Hint","XAxis","YAxis","Borders","VerticalGridLines","HorizontalBarSeries","GradientDefs","AreaSeries","FlexibleXYPlot","LabelSeries","Sticky","Header","Accordion","Table","Dimmer","Loader","TableCell","withScroll","TitleContent","Timeline","state","rawData","y","x","label","barPosition","date","offset","labelData","lable","height","middle","props","mediumLevel","value","initalScrollCounter","dataIndex","position","scrollPositionY","scrollPlots","getLevel","yOffset","currentLevel","level","time","text","disableClickOnPage","e","stopPropagation","preventDefault","calYOffset","document","addEventListener","stickyTop","querySelector","stickyTopVals","getBoundingClientRect","console","log","girdPlotTop","girdPlotTopVals","girdPlotOuterTop","girdPlotOuterTopVals","valA","top","valB","output","setState","removeEventListener","DisableClickOnPage","handler","chartGap","chartTop","length","setTimeout","gap","timelineVals","map","point","index","data","parseDate","from","currY","newArray","obj","closest","reduce","prev","curr","Math","abs","found","find","input","timeOrDate","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","options24","parsedDate","Date","UTC","parseInt","slice","toLocaleString","lowCarbonLabel","item","formatData","dayLabels","middleVal","bar","style","fill","barLabel","xOffset","dayLabel","mobileUser","manageHeight","newHeight","_forgetValue","_rememberValue","colorChange","text1","text2","color","fontWeight","borderBottom","border","componentDidMount","componentDidUpdate","prevProps","prevState","render","scroll","window","scrollY","highlight","background","loading","marginBottom","justifyContent","width","overflow","bottom","left","right","strokeLinejoin","strokeWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {XYPlot, LineSeries, MarkSeries, HorizontalGridLines, Hint, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries} from 'react-vis';\nimport { Sticky, Header, Accordion, Table, Dimmer, Loader, TableCell } from 'semantic-ui-react';\nimport { withScroll } from 'react-window-decorators';\nimport TitleContent from '../content/TitleContent';\n\n// @withScroll\nclass Timeline extends Component {\n\n    state = {\n        rawData: [{y: 0, x: 0, label:'loading | loadidng'}],\n        barPosition: {date: '', offset: 0},\n        labelData: [{lable: 'Testing'}],\n        height: 50,\n        middle: typeof this.props.middle !== 'undefined' ? this.props.mediumLevel : 150,\n        value: null,\n       // scrollCount: 0,\n        initalScrollCounter:0,\n        dataIndex: -1,\n        position: this.props.scrollPositionY,\n        scrollPlots: [],\n        getLevel:0,\n        yOffset:0,\n        currentLevel:{level:0, time:'loading', text:'loading'}\n    }\n\n\n\n    componentDidMount () {\n     // this.getposition()\n     //  this.manageScrollDisplay()\n\n   \n       \n    \n\n         if (typeof this.props.timelineVals[0] !== 'undefined'){\n        return (\n            this.formatData(),\n            this.manageHeight()\n              ) \n            }\n        }\n\n        \n        \n        componentDidUpdate (prevProps, prevState) {\n            if (this.props.scrollPositionY !== prevProps.scrollPositionY) {\n               return (this.getLevel() ) \n            }\n            if (this.props.timelineVals !== prevProps.timelineVals)\n            return (\n                this.formatData(),\n                this.manageHeight()\n                ) \n            if (this.state.rawData !== prevState.rawData)\n            {\n               return (this.scrollPlots() )\n            }\n\n            }\n\n//       //let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n//       let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n//       let chartTopPos = chartTop.getBoundingClientRect() \n//         console.log('clientHeight '+ chartTop.clientHeight )\n\ndisableClickOnPage = (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n}\n\ncalYOffset = () => {\n    document.addEventListener('click', this.disableClickOnPage, true)\n    const stickyTop = document.querySelector('#sticky')\n    let stickyTopVals = stickyTop.getBoundingClientRect()\n    console.log(stickyTopVals)\n\n    \n    const girdPlotTop = document.querySelector('.rv-xy-plot__grid-lines')\n    let girdPlotTopVals = girdPlotTop.getBoundingClientRect()\n    console.log(girdPlotTopVals)    \n\n    const girdPlotOuterTop = document.querySelector('.rv-xy-plot__inner')\n    let girdPlotOuterTopVals = girdPlotOuterTop.getBoundingClientRect()\n    console.log(girdPlotOuterTopVals)\n    \n    let valA = stickyTopVals.top\n    let valB = girdPlotTopVals.top - girdPlotOuterTopVals.top\n    let output = valA+valB-2 //109\n    this.setState({yOffset: output})\n    document.removeEventListener('click', DisableClickOnPage.handler, true)\n    return output\n}\n\n    chartGap = () => {\n    \n        const chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n       // console.log('clientHeight '+ chartTop.clientHeight )\n       let height = chartTop.getBoundingClientRect()\n       console.log(height)\n        let output = (height.height / this.state.rawData.length)\n        console.log(output)\n        return output\n    }\n    \n\n\n    scrollPlots = () => {\n        setTimeout(() => this.calYOffset(), 300)\n        \n        setTimeout(() => {\n            let gap =this.chartGap()\n        console.log(gap)\n        let scrollPlots =  this.props.timelineVals.map((point, index) => {    \n        \n        let data = {time:`${this.parseDate(point.from, 'time')} ${this.parseDate(point.from, 'date')}`,\n        y: (gap * index)+(index/2), level: point.level, text: point.text}\n            return data\n        })\n        this.setState({scrollPlots: scrollPlots})\n    },400)\n    }\n    // scrollPlots = () => {\n    //     this.calYOffset()\n    //     let gap =this.chartGap()\n    //     console.log(gap)\n    //    let scrollPlots =  this.state.rawData.map((point, index) => {    \n        \n    //     let data = {y: (gap * (index)), level: point.x}\n    //         return data\n    //     })\n    //     this.setState({scrollPlots: scrollPlots})\n    // }\n\n    getLevel = () => {\n        \n        if (this.state.scrollPlots.length > 1) {\n\n        let currY = this.props.scrollPositionY - this.state.yOffset \n        let newArray = this.state.scrollPlots.map(obj => {\n            return obj.y\n          })\n           let closest = newArray.reduce((prev, curr) => {\n           return (Math.abs(curr - currY) < Math.abs(prev - currY) ? curr : prev);\n           })\n          let found = this.state.scrollPlots.find(obj => {\n            return obj.y === closest\n          })\n         return this.setState({\n              currentLevel:{level: found.level, time:found.time, text:found.text}\n          })\n        }\n          //return found.level \n        \n        }\n\n\n    parseDate = (input, timeOrDate) => {\n        let output = 0\n        let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n        let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: true};\n        let options24 = { hour: 'numeric',minute: 'numeric', hour12: false};\n\n               let parsedDate = new Date(Date.UTC(\n                   parseInt(input.slice(0, 4), 10),\n                   parseInt(input.slice(5, 7), 10) - 1,\n                   parseInt(input.slice(8, 10), 10),\n                   parseInt(input.slice(11, 13), 10),\n                   parseInt(input.slice(14, 16), 10),\n                 //parseInt(input.slice(13,15), 10)\n               ))\n               if (timeOrDate === 'time'){\n                   output =  parsedDate.toLocaleString(\"en-GB\", optionsTime)\n               }else if (timeOrDate === 'date') {\n               output =  (`${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n               }else if (timeOrDate === '24') {\n               output =  parsedDate.toLocaleString(\"en-GB\", options24)\n              }\n\n\n            return output\n\n            }\n\n        lowCarbonLabel = (item) => {\n            let output = ''\n            console.log(item.text)\n            //if (item.text.split(' ')[0] === 'Low' || item.text.split(' ')[1] === 'Low' ) {\n            if (item.text === 'Low' || item.text === 'Very Low' ) {\n                output = 'â˜…'\n            }\n            return output\n        }\n\n       formatData = () => {\n        let data = []\n        let labelData = []\n        let dayLabels = []\n        let middleVal = this.props.middle\n        //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n        if (this.props.timelineVals !== [] ) {\n\n        this.props.timelineVals.map((item, index) => {\n            let bar = {x: item.level-10, y: -index, label: `${this.lowCarbonLabel(item)}`,style: {fill: '#00cc66'}, yOffset:-25}   \n            data = [...data, bar]\n        })\n\n        this.props.timelineVals.map((item, index) => {\n            let barLabel = {x: 0, y: -index, label: `${this.parseDate(item.from, 'time')}`, xOffset:-60}  \n            labelData = [...labelData, barLabel]\n        })\n        this.props.timelineVals.map((item, index) => {\n            \n           // let middle = this.props.screenWidth / 2\n           // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n            //middle += 100\n            let day = ''\n\n            if (parseInt(`${this.parseDate(item.from, '24')}`) < 1 || index < 1 )\n            {\n                day = `${this.parseDate(item.from, 'date')}`\n                console.log(day)   \n            }\n            let dayLabel = {x: this.state.middle, y: -index, \n                label: day,\n                xOffset: this.props.mobileUser ? 0 : -30,\n                 yOffset:-15}  \n            dayLabels = [...dayLabels, dayLabel]\n        })\n    }\n       \n        //console.log(data)\n        \n        this.setState({\n            rawData: data,\n            labelData: labelData,\n            dayLabels: dayLabels\n        })    \n    \n    }\n    //day.sort((a, b) => (a.level > b.level)\n    manageHeight = () => {\n       let newHeight =  this.props.timelineVals.length += 400\n        this.setState({\n            height: newHeight\n        })\n    }\n\n    _forgetValue = () => {\n        this.setState({\n          value: null\n        });\n      };\n    \n      _rememberValue = value => {\n        this.setState({value});\n      };\n    \n\n\n      \n      \n      colorChange = (text1, text2, color) => {\n        if (this.state.currentLevel.text === text1 || this.state.currentLevel.text === text2) {\n         return {color: color, fontWeight: 'bold', borderBottom: `2px solid ${color}`} \n        }else return {color: 'black', fontWeight: 'normal', border:'none'}\n    }\n      \n    \n\n    \n    render() {\n        //const {value} = this.state\n        let scroll = window.scrollY;\n        // console.log(scrolledDown)\n        const highlight = \"highlight\"\n        \n\n\n        return (\n\n<div>\n\n<div className=\"bgPanel\">\n            <h1>Timeline Forecast</h1>\n        <p>Use the Forecast Timeline to see the forecast in detail over time.</p>\n        <p>The black line is the Carbon Intensity level. The Carbon Intensity increases as it travels to the right.</p>\n        <p>As you scroll the info panel will update, with the Time, Carbon Intensity Level and Low, Medium, High, indicators.</p>\n      {/* <Accordion defaultActiveIndex={[]} panels={TitleContent.fuelMixTitle} exclusive={false}/> */}\n      </div>\n\n<div  className=\"bgPanel\" style={{\n   \n                background: '#fff',\n               \n            }}>\n\n            <div\n            \n            style={{\n                height: '800vh',\n                \n            }}\n            id=\"bg-fade\"\n            >\n\n\n\n\n\n<Dimmer active={this.props.loading} page>\n        <Loader>Loading</Loader>\n    </Dimmer>\n\n\n\n          <div id=\"sticky\" height={2}> \n         <h2> Carbon Intensity Timeline</h2> <br></br>\n            {/* Vertical scroll position is: { this.props.scrollPositionY - this.state.yOffset } <br></br> */}\n            {/* Carbon Intensity: {this.state.currentLevel.level} */}\n           \n\n\n\n\n\n\n          <Table className=\"sticky-table\" fixed unstackable singleLine celled>\n          {/* <Table id=\"sticky-table\" fixed unstackable singleLine celled> */}\n\n            <Table.Body>\n            \n            <Table.Row textAlign='center'> \n            <Table.Cell><h3>{this.state.currentLevel.time.slice(8)}</h3></Table.Cell>\n            <Table.Cell><h3>{this.state.currentLevel.time.slice(0,8)}</h3></Table.Cell>\n            <Table.Cell><h3>{`${this.state.currentLevel.level} CO2e`}</h3></Table.Cell>\n            </Table.Row> \n\n            <Table.Row textAlign='center'>\n            <Table.Cell><h3 style={this.colorChange(\"Low\",\"Very Low\", \"green\")}>âŸµ  Low</h3></Table.Cell>\n            <Table.Cell><h3 style={this.colorChange(\"Moderate\",\"Moderate\", \"orange\")}>Medium</h3></Table.Cell>\n            <Table.Cell><h3 style={this.colorChange(\"High\",\"Very Hight\", \"red\")}>High  âŸ¶</h3></Table.Cell>\n            </Table.Row>\n            </Table.Body>\n          </Table>\n          \n          </div>\n          <div id=\"stickyMeasure\">\n          </div>\n\n                <div id=\"timeline\" height={800} style={{marginBottom: '0vh'}}>\n<div\n        \n      style={{\n          // display: 'flex',\n          justifyContent: 'space-between',\n          position: 'relative',\n          width:  '100%',\n          height: '800vh',\n        //   height: '800vh',\n          //height: `${this.state.height}vh`,\n           overflow: 'auto',\n        }}\n      \n\n      \n    >\n\n\n\n<div\n        style={{width: '100%', height: '100%'}}\n        // style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      >\n        {/* <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 1000, left: 80, right: 20, top: 50}}>  */}\n        <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 250, left: 80, right: 20, top: 50}}> \n        {/* <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 80, left: 80, right: 20, top: 50}}>  */}\n        {/*50*/}\n        {/* xType=\"time\" \n         yType=\"ordinal\"\n        */}\n        \n\n        <HorizontalGridLines \n        tickTotal={this.state.rawData.length}\n        animation={true}\n        />\n     \n        {/* <YAxis \n        position=\"start\"\n        tickTotal={2}\n        // top={40}\n        top={0}\n        //height={150}\n        //width={1}\n        style={{\n            text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n          }}\n          //tickLabelAngle={-45}\n          /> */}\n        \n        \n        <LineSeries \n        data={this.state.rawData}\n        color={'black'}\n        animation\n        style={{\n            fill: 'none',\n            strokeLinejoin: 'round',\n            strokeWidth: 8\n        }}\n        curve={'curveMonotoneX'}\n        />\n\n        {/* <MarkSeries\n          onValueMouseOver={this._rememberValue}\n          onValueMouseOut={this._forgetValue}\n          data={this.state.rawData}\n          id=\"markSeries\"\n        /> */}\n        {/* {value ? <Hint value={value} /> : null} */}\n\n        <LabelSeries\n        data={this.state.rawData}\n        // labelAnchorX={\"end\"}\n        // labelAnchorY={\"middle\"}\n        />\n        <LabelSeries\n        data={this.state.labelData}\n        labelAnchorX={\"start\"}\n        labelAnchorY={\"middle\"}\n        />\n\n        <LabelSeries\n        data={this.state.dayLabels}\n        labelAnchorX={\"end\"}\n        labelAnchorY={\"middle\"}\n        />\n\n\n\n        {/* <HorizontalBarSeries \n        data={this.state.rawData}\n        color={'url(#CoolGradient)'}\n        animation\n        /> */}\n\n         {/* <YAxis \n         position=\"start\"\n         tickValues={this.state.rawData.map(value => value.y)} \n         tickSize={1}\n         />  */}\n\n{/*\n            //data={this.xlabelData('top')}\n                //return { ...obj, y: this.props.mobileUser ? -3 : -18, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[0]}` }\n            //animation\n            // labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n            // //labelAnchorY=\"text-before-edge\"\n            // labelAnchorY={this.props.mobileUser ? \"text-after-edge\" : \"baseline\"}\n            // labelAnchorX={\"middle\"}\n            // labelAnchorY={\"text-before-edge\"}\n            // style={{\n            //     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n            //   }}\n        {/* \n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n                        return { ...obj, label: obj.y.toString() }\n                    })}\n                    \n                    animation\n                    labelAnchorX=\"middle\"\n                    labelAnchorY=\"text-before-edge\"\n                    \n                    />\n\n\n\n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n\n                        return { ...obj, y: this.props.mobileUser ? -3 :-34, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[1]}` }\n                    })}\n                    animation\n                    labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n                    //labelAnchorY=\"text-before-edge\"\n                    //labelAnchorY=\"baseline\"\n                    labelAnchorY={this.props.mobileUser ? \"text-before-edge\" : \"baseline\"}\n                    style={{\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n                      }}\n                    /> */}\n\n\n\n        </FlexibleXYPlot>\n      </div>\n\n</div>\n     \n\n        </div>\n        \n\n            </div></div>\n\n            </div>\n        );\n    }\n}\n\nexport default withScroll (Timeline);\n"]},"metadata":{},"sourceType":"module"}