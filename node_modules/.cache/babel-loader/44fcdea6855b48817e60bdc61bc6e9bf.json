{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js\";\nimport React, { Component } from 'react';\nimport { Dropdown, Accordion, Search, Table, Divider, Dimmer, Loader, Grid, Card, Button, Image, Segment, Container, TableRow } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nimport TitleContent from '../content/TitleContent';\nimport PostCodeSearch from './PostCodeSearch';\nexport class Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      period: 48,\n      region: 18,\n      sortByLevel: false,\n      bestPeriodDisplayDay: true,\n      bestPeriodLoaded: false,\n      bestPeriodsDay: [{\n        description: \"Loading \\n Loading \\n Loading\"\n      }],\n      bestPeriodsNight: [{\n        description: \"Loading \\n Loading \\n Loading\"\n      }]\n    };\n    this.periodOptions = [{\n      key: 6,\n      text: '+6 hours',\n      value: 12 //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n\n    }, {\n      key: 8,\n      text: '+8 hours',\n      value: 16\n    }, {\n      key: 12,\n      text: '+12 hours',\n      value: 24\n    }, {\n      key: 24,\n      text: '+24 hours',\n      value: 48\n    }, {\n      key: 48,\n      text: '+48 hours',\n      value: 96\n    }, {\n      key: 100,\n      text: 'Max',\n      value: 500\n    }];\n\n    this.parseDate = input => {\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n      return \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsTime), \" \").concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n    };\n\n    this.genRegionOptions = () => {\n      let output = this.props.regionIndex.map(obj => {\n        return {\n          key: obj.id,\n          text: obj.name,\n          value: obj.id\n        };\n      });\n      output.sort((a, b) => a.key < b.key ? 1 : -1);\n      return output;\n    };\n\n    this.setPeriod = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        period: data.value\n      });\n    };\n\n    this.setRegion = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        region: data.value\n      });\n    };\n\n    this.controlSort = () => {\n      let newProps = this.props.aggedVals;\n\n      if (this.state.sortByLevel == !true) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.from) > Date.parse(b.from) ? 1 : -1);\n      } else if (this.state.sortByLevel === true) {\n        newProps = this.props.aggedVals.sort((a, b) => a.level > b.level ? 1 : -1);\n      }\n\n      return newProps;\n    };\n\n    this.handleSortButton = event => {\n      let newVal = this.state.sortByLevel ? false : true;\n      this.setState({\n        sortByLevel: newVal\n      });\n    };\n\n    this.handleDayNightButton = event => {\n      let newVal = this.state.bestPeriodDisplayDay ? false : true;\n      this.setState({\n        bestPeriodDisplayDay: newVal\n      });\n    };\n\n    this.renderBestPeriods = () => {\n      //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n      let bestDay = this.props.bestPeriods.day;\n      let bestNight = this.props.bestPeriods.night;\n      let dayOutput = [];\n      let nightOutput = [];\n      let dayOutputBig = [];\n      let nightOutputBig = [];\n\n      if (typeof bestDay[0] !== 'undefined' && typeof bestDay[1] !== 'undefined' && typeof bestDay[2] !== 'undefined') {\n        dayOutput = [{\n          description: \"\".concat(this.parseDate(bestDay[0].from), \"\\n\").concat(bestDay[0].level, \"\\n\").concat(bestDay[0].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestDay[1].from), \"\\n\").concat(bestDay[1].level, \"\\n\").concat(bestDay[1].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestDay[2].from), \"\\n\").concat(bestDay[2].level, \"\\n\").concat(bestDay[2].text)\n        }];\n        dayOutputBig = [{\n          header: \"\".concat(this.parseDate(bestDay[0].from)),\n          description: \"\".concat(bestDay[0].level, \"\\n\").concat(bestDay[0].text)\n        }, {\n          header: \"\".concat(this.parseDate(bestDay[1].from)),\n          description: \"\".concat(bestDay[1].level, \"\\n\").concat(bestDay[1].text)\n        }, {\n          header: \"\".concat(this.parseDate(bestDay[2].from)),\n          description: \"\".concat(bestDay[2].level, \"\\n\").concat(bestDay[2].text)\n        }];\n      } else {\n        dayOutput = [{\n          description: \"Please change period to include night-time hours \"\n        }];\n      }\n\n      if (typeof bestNight[0] !== 'undefined' && typeof bestNight[1] !== 'undefined' && typeof bestNight[2] !== 'undefined') {\n        nightOutput = [{\n          description: \"\".concat(this.parseDate(bestNight[0].from), \"\\n\").concat(bestNight[0].level, \"\\n\").concat(bestNight[0].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestNight[1].from), \"\\n\").concat(bestNight[1].level, \"\\n\").concat(bestNight[1].text)\n        }, {\n          description: \"\".concat(this.parseDate(bestNight[2].from), \"\\n\").concat(bestNight[2].level, \"\\n\").concat(bestNight[2].text)\n        }];\n        nightOutputBig = [{\n          header: \"\".concat(this.parseDate(bestNight[0].from)),\n          description: \"\".concat(bestNight[0].level, \"\\n\").concat(bestNight[0].text)\n        }, {\n          header: \"\".concat(this.parseDate(bestNight[1].from)),\n          description: \"\".concat(bestNight[1].level, \"\\n\").concat(bestNight[1].text)\n        }, {\n          header: \"\".concat(this.parseDate(bestNight[2].from)),\n          description: \"\".concat(bestNight[2].level, \"\\n\").concat(bestNight[2].text)\n        }];\n      } else {\n        nightOutput = [{\n          description: \"Please change period to include night-time hours \"\n        }];\n      }\n\n      this.setState({\n        bestPeriodsDay: this.props.mobileUser ? dayOutput : dayOutputBig,\n        bestPeriodsNight: this.props.mobileUser ? nightOutput : nightOutputBig\n      }); // return output\n    };\n\n    this.handleDropDown = data => {\n      return this.props.updateRegion(data.value);\n    };\n  }\n\n  componentDidMount() {\n    if (typeof this.props.bestPeriods !== 'undefined') {\n      if (typeof this.props.bestPeriods.day !== 'undefined' || typeof this.props.bestPeriods.night !== 'undefined') {\n        if (typeof this.props.bestPeriods.day[0] !== 'undefined' || typeof this.props.bestPeriods.night[0] !== 'undefined') {\n          this.renderBestPeriods();\n        }\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods) {\n      this.renderBestPeriods();\n    }\n\n    if (this.props.aggedVals !== prevProps.aggedVals) {}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Forecast Summary\"), React.createElement(Accordion, {\n      defaultActiveIndex: [],\n      panels: TitleContent.forecastSummaryTitle,\n      exclusive: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Top 3 Periods\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Top 3 times to use electricity duiring this period:\"), React.createElement(Card.Group, {\n      itemsPerRow: 3,\n      items: this.state.bestPeriodDisplayDay ? this.state.bestPeriodsDay : this.state.bestPeriodsNight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      onClick: this.handleDayNightButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.state.bestPeriodDisplayDay ? React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Show Daytime\") : \"Show Daytime | \", this.state.bestPeriodDisplayDay ? \" | Show Night-time\" : React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Show Night-time\"))), React.createElement(\"div\", {\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Options\"), React.createElement(Dimmer, {\n      active: this.props.loading,\n      page: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Loading\")), React.createElement(Table, {\n      columns: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      compact: this.props.mobileUser ? true : false,\n      placeholder: \"Period\",\n      selection: \"2\",\n      options: this.periodOptions,\n      onChange: (event, data) => this.props.updatePeriod(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Period: \", this.props.setPeriod <= 48 ? \"+\".concat(this.props.setPeriod / 2, \" hrs\") : 'Max'), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Region: \", this.props.useId ? this.props.regionName : this.props.setPostCode))), React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Region\",\n      selection: true,\n      options: this.genRegionOptions(),\n      onChange: (event, data) => {\n        this.handleDropDown(data);\n      } //onChange={(event, data) => {this.props.updateRegion(data.value)}}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(PostCodeSearch, {\n      updatePostCode: this.props.updatePostCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      id: \"summary-chart\",\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Summary Chart\"), React.createElement(SummaryChart, {\n      aggedVals: this.controlSort(),\n      sortTrigger: this.state.sortByLevel,\n      mobileUser: this.props.mobileUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      class: \"ui button\",\n      onClick: this.handleSortButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Sort By \", this.state.sortByLevel ? 'Time' : 'Intensity Level')));\n  }\n\n}\nexport default Forecast;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js"],"names":["React","Component","Dropdown","Accordion","Search","Table","Divider","Dimmer","Loader","Grid","Card","Button","Image","Segment","Container","TableRow","SummaryChart","TitleContent","PostCodeSearch","Forecast","state","period","region","sortByLevel","bestPeriodDisplayDay","bestPeriodLoaded","bestPeriodsDay","description","bestPeriodsNight","periodOptions","key","text","value","parseDate","input","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","genRegionOptions","output","props","regionIndex","map","obj","id","name","sort","a","b","setPeriod","event","data","console","log","setState","setRegion","controlSort","newProps","aggedVals","parse","from","level","handleSortButton","newVal","handleDayNightButton","renderBestPeriods","bestDay","bestPeriods","bestNight","night","dayOutput","nightOutput","dayOutputBig","nightOutputBig","header","mobileUser","handleDropDown","updateRegion","componentDidMount","componentDidUpdate","prevProps","prevState","render","forecastSummaryTitle","loading","updatePeriod","useId","regionName","setPostCode","updatePostCode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Accordion, Search, Table, Divider,Dimmer,Loader, Grid, Card, Button, Image, Segment, Container, TableRow } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nimport TitleContent from '../content/TitleContent';\nimport PostCodeSearch from './PostCodeSearch';\n\nexport class Forecast extends Component {\n\n\nstate = {\n    period: 48,\n    region: 18,\n    sortByLevel: false,\n    bestPeriodDisplayDay: true,\n    bestPeriodLoaded: false,\n    bestPeriodsDay: [{description: `Loading \\n Loading \\n Loading`}],\n    bestPeriodsNight: [{description: `Loading \\n Loading \\n Loading`}]\n}\n\ncomponentDidMount () {\n    if (typeof this.props.bestPeriods !== 'undefined'){\n       if (typeof this.props.bestPeriods.day !== 'undefined' || typeof this.props.bestPeriods.night !== 'undefined'){\n            if (typeof this.props.bestPeriods.day[0] !== 'undefined' || typeof this.props.bestPeriods.night[0] !== 'undefined'){\n                this.renderBestPeriods()\n    }\n    }\n}\n\n}\n\ncomponentDidUpdate (prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods){\n        this.renderBestPeriods()\n    }\n\n    if (this.props.aggedVals !== prevProps.aggedVals) {\n    \n    }\n}\n    periodOptions = [\n            {\n              key: 6,\n              text: '+6 hours',\n              value: 12,\n            //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n            },\n            {\n              key: 8,\n              text: '+8 hours',\n              value: 16,\n            },\n            {\n              key: 12,\n              text: '+12 hours',\n              value: 24,\n            },\n            {\n              key: 24,\n              text: '+24 hours',\n              value: 48,\n            },\n            {\n              key: 48,\n              text: '+48 hours',\n              value: 96,\n            },\n            {\n              key: 100,\n              text: 'Max',\n              value: 500,\n            },\n          ]\n\n\n\n        \n          parseDate = (input) => {\n            let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n            let optionsTime = { hour: 'numeric', minute: 'numeric', hour12: true};\n                   let parsedDate = new Date(Date.UTC(\n                       parseInt(input.slice(0, 4), 10),\n                       parseInt(input.slice(5, 7), 10) - 1,\n                       parseInt(input.slice(8, 10), 10),\n                       parseInt(input.slice(11, 13), 10),\n                       parseInt(input.slice(14, 16), 10),\n                     //parseInt(input.slice(13,15), 10)\n                   ))\n                   return (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)} ${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n           }\n\n\n          genRegionOptions = () => {\n          let output = this.props.regionIndex.map(obj => {\n                return {key: obj.id, text: obj.name, value: obj.id}\n            })\n            output.sort((a,b) => (a.key < b.key) ? 1 : -1)\n            return output\n        }\n\n        setPeriod = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                period: data.value\n            })\n        }\n        setRegion = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                region: data.value\n            })\n        }\n\n        controlSort = () => {\n            let newProps = this.props.aggedVals\n          if (this.state.sortByLevel ==! true){\n           newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.from) > Date.parse(b.from)? 1 : -1))\n            }\n            else if (this.state.sortByLevel === true){\n                newProps = this.props.aggedVals.sort((a,b) => a.level > b.level? 1 : -1)\n            }\n                 return newProps\n        }\n\n        handleSortButton = (event) => {\n            let newVal = this.state.sortByLevel ? false : true\n            this.setState({sortByLevel: newVal})\n        } \n        handleDayNightButton = (event) => {\n            let newVal = this.state.bestPeriodDisplayDay ? false : true\n            this.setState({bestPeriodDisplayDay: newVal})\n        }\n\n        \n\n    renderBestPeriods = () => {\n                \n        //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n        let bestDay =   this.props.bestPeriods.day\n        let bestNight = this.props.bestPeriods.night\n        \n        let dayOutput = []\n        let nightOutput = []\n        let dayOutputBig = []\n        let nightOutputBig = []\n\n        if (typeof bestDay[0] !== 'undefined' && typeof bestDay[1] !== 'undefined' && typeof bestDay[2] !== 'undefined') {\n        dayOutput = [\n                       { description:  `${this.parseDate(bestDay[0].from)}\\n${bestDay[0].level}\\n${bestDay[0].text}`},\n                       { description:  `${this.parseDate(bestDay[1].from)}\\n${bestDay[1].level}\\n${bestDay[1].text}`},\n                       { description:  `${this.parseDate(bestDay[2].from)}\\n${bestDay[2].level}\\n${bestDay[2].text}`},\n                ]\n        dayOutputBig = [\n                       { header: `${this.parseDate(bestDay[0].from)}`, description:`${bestDay[0].level}\\n${bestDay[0].text}`},\n                       { header:  `${this.parseDate(bestDay[1].from)}`, description:`${bestDay[1].level}\\n${bestDay[1].text}`},\n                       { header:  `${this.parseDate(bestDay[2].from)}`, description:`${bestDay[2].level}\\n${bestDay[2].text}`},\n                ]\n            \n            }else{\n        dayOutput = [  { description:  `Please change period to include night-time hours `}]\n                }\n\n\n                \n\n        if (typeof bestNight[0] !== 'undefined' && typeof bestNight[1] !== 'undefined' && typeof bestNight[2] !== 'undefined'){\n        nightOutput = [\n                       { description:  `${this.parseDate(bestNight[0].from)}\\n${bestNight[0].level}\\n${bestNight[0].text}`},\n                       { description:  `${this.parseDate(bestNight[1].from)}\\n${bestNight[1].level}\\n${bestNight[1].text}`},\n                       { description:  `${this.parseDate(bestNight[2].from)}\\n${bestNight[2].level}\\n${bestNight[2].text}`},\n                    ]\n                    nightOutputBig = [\n                        { header: `${this.parseDate(bestNight[0].from)}`, description:`${bestNight[0].level}\\n${bestNight[0].text}`},\n                        { header:  `${this.parseDate(bestNight[1].from)}`, description:`${bestNight[1].level}\\n${bestNight[1].text}`},\n                        { header:  `${this.parseDate(bestNight[2].from)}`, description:`${bestNight[2].level}\\n${bestNight[2].text}`},\n                 ]\n\n                }else {\n                   nightOutput = [  { description:  `Please change period to include night-time hours `}]\n\n            }\n            \n        this.setState({\n            bestPeriodsDay: this.props.mobileUser ? dayOutput : dayOutputBig ,\n            bestPeriodsNight: this.props.mobileUser ? nightOutput : nightOutputBig\n        })\n        // return output\n    } \n\n  \n\n    handleDropDown = (data) => {\n        return (\n                this.props.updateRegion(data.value)\n                )\n            }\n\n    \n    render() {\n        return (\n            \n            <div>\n\n\n\n<div className=\"bgPanel\">\n            <h1>Forecast Summary</h1>\n      <Accordion defaultActiveIndex={[]} panels={TitleContent.forecastSummaryTitle} exclusive={false}/>\n      </div>\n\n            <div>\n                {/* <h1> Hi, it's me forecast! Hows things?</h1> */}\n\n            {/* <Divider horizontal>Lowest Levels</Divider> */}\n    {/* <button class=\"ui button\" onClick={this.handleDayNightButton}>Show {this.state.bestPeriodDisplayDay ? 'Daytime' : 'Night-time'}</button> */}\n                <div className=\"bgPanel\">\n    <h3>Top 3 Periods</h3>\n    \n    <p>Top 3 times to use electricity duiring this period:\n    </p>\n <Card.Group  itemsPerRow={3} items={this.state.bestPeriodDisplayDay ? this.state.bestPeriodsDay : this.state.bestPeriodsNight} />\n    \n    <p onClick={this.handleDayNightButton}>\n     {this.state.bestPeriodDisplayDay ?  <b>Show Daytime</b> : `Show Daytime | `}   \n     {this.state.bestPeriodDisplayDay ?  ` | Show Night-time` : <b>Show Night-time</b>} \n     </p>\n\n</div>\n\n\n{/* <Divider horizontal>Options</Divider> */}\n<div className=\"bgPanel\">\n{/* <Dimmer active={this.props.loading}>\n        <Loader>Loading</Loader>\n    </Dimmer> */}\n\n    <h3>Options</h3>\n     <Dimmer active={this.props.loading} page>\n        <Loader>Loading</Loader>\n    </Dimmer> \n\n<Table   columns={2}>\n<Table.Row>\n<Table.Cell>\n    <Dropdown\n         compact={this.props.mobileUser ? true : false}\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n    </Table.Cell>\n\n            <Table.Cell>\n    <p>Period: {this.props.setPeriod <= 48 ? `+${this.props.setPeriod/2} hrs` : 'Max'}</p>\n    <p>Region: {this.props.useId ? this.props.regionName : this.props.setPostCode}</p>\n   </Table.Cell>\n   </Table.Row>\n\n   <Table.Row>\n    <Table.Cell>\n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => {this.handleDropDown(data)}}\n          //onChange={(event, data) => {this.props.updateRegion(data.value)}}\n        />\n    </Table.Cell>\n        <Table.Cell>\n   <PostCodeSearch updatePostCode={this.props.updatePostCode}/>\n    </Table.Cell>\n    </Table.Row>\n </Table>\n\n </div>\n{/* <Grid columns='2' >\n<Grid.Row>\n   <Grid.Column floated='left'>      \n    <Dropdown\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n       </Grid.Column>\n       <Grid.Column floated='left'>\n   <PostCodeSearch updatePostCode={this.props.updatePostCode}/>\n   </Grid.Column>\n</Grid.Row>\n<Grid.Row>\n    <Grid.Column floated='left'>      \n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => this.props.updateRegion(data.value)}\n        />\n        </Grid.Column>\n        <Grid.Column floated='left'>\n    <p>Yep thats right I'm some text!</p>\n    </Grid.Column>\n </Grid.Row>\n </Grid> */}\n\n\n\n</div>\n\n\n{/* <Divider horizontal>Carbon Levels</Divider> */}\n\n<div id=\"summary-chart\" className=\"bgPanel\">\n<h3>Summary Chart</h3>\n<SummaryChart aggedVals={this.controlSort()} sortTrigger={this.state.sortByLevel} mobileUser={this.props.mobileUser}/>\n<button class=\"ui button\" onClick={this.handleSortButton}>Sort By {this.state.sortByLevel ? 'Time' : 'Intensity Level'}</button>\n</div>\n\n\n\n</div>\n        );\n    }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}