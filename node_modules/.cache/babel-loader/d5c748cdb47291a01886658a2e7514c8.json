{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js\";\nimport React, { Component } from 'react';\nimport { Dropdown, Table, Grid, Card, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nexport class Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      period: 48,\n      region: 18,\n      sortByLevel: false,\n      bestPeriods: {\n        day: [{\n          from: 'Loading',\n          level: 'Loading',\n          text: 'Loading'\n        }, {\n          from: 'Loading',\n          level: 'Loading',\n          text: 'Loading'\n        }, {\n          from: 'Loading',\n          level: 'Loading',\n          text: 'Loading'\n        }]\n      }\n    };\n    this.periodOptions = [{\n      key: 6,\n      text: '+6 hours',\n      value: 12 //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n\n    }, {\n      key: 8,\n      text: '+8 hours',\n      value: 16\n    }, {\n      key: 12,\n      text: '+12 hours',\n      value: 24\n    }, {\n      key: 24,\n      text: '+24 hours',\n      value: 48\n    }, {\n      key: 48,\n      text: '+48 hours',\n      value: 96\n    }, {\n      key: 100,\n      text: 'Max',\n      value: 500\n    }];\n\n    this.parseDate = input => {\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n      return \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsTime), \" | \").concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n    };\n\n    this.genRegionOptions = () => {\n      let output = this.props.regionIndex.map(obj => {\n        return {\n          key: obj.id,\n          text: obj.name,\n          value: obj.id\n        };\n      });\n      output.sort((a, b) => a.key < b.key ? 1 : -1);\n      return output;\n    };\n\n    this.setPeriod = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        period: data.value\n      });\n    };\n\n    this.setRegion = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        region: data.value\n      });\n    };\n\n    this.controlSort = () => {\n      let newProps = this.props.aggedVals;\n\n      if (this.state.sortByLevel === false) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.from) > Date.parse(b.from) ? 1 : -1);\n      } else if (this.state.sortByLevel === true) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.level) > Date.parse(b.level) ? 1 : -1);\n      }\n\n      return newProps;\n    };\n\n    this.handleSortButton = event => {\n      let newVal = this.state.sortByLevel ? false : true;\n      this.setState({\n        sortByLevel: newVal\n      });\n    };\n\n    this.renderBestPeriods = () => {\n      let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [{\n        from: 'Loading',\n        level: 'Loading',\n        text: 'Loading'\n      }];\n      let output = {\n        day: [{\n          //header:      `${bestDay.from}`,\n          description: \"1. \".concat(bestDay[0].from, \"\\n\").concat(bestDay[0].level, \"\\n\").concat(bestDay[0].text)\n        }]\n      };\n      this.setState({\n        bestPeriods: output\n      });\n      return output;\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods) {// this.renderBestPeriods()\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Period\",\n      selection: \"2\",\n      options: this.periodOptions,\n      onChange: (event, data) => this.props.updatePeriod(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Region\",\n      selection: true,\n      options: this.genRegionOptions(),\n      onChange: (event, data) => this.props.updateRegion(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      itemsPerRow: 3,\n      items: this.state.bestPeriods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"summary-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(SummaryChart, {\n      aggedVals: this.controlSort(),\n      sortTrigger: this.state.sortByLevel,\n      mobileUser: this.props.mobileUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      class: \"ui button\",\n      onClick: this.handleSortButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Sort By \", this.state.sortByLevel ? 'Date' : 'Intensity Level'));\n  }\n\n}\nexport default Forecast;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js"],"names":["React","Component","Dropdown","Table","Grid","Card","Image","Segment","Container","SummaryChart","Forecast","state","period","region","sortByLevel","bestPeriods","day","from","level","text","periodOptions","key","value","parseDate","input","optionsDate","weekday","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","genRegionOptions","output","props","regionIndex","map","obj","id","name","sort","a","b","setPeriod","event","data","console","log","setState","setRegion","controlSort","newProps","aggedVals","parse","handleSortButton","newVal","renderBestPeriods","bestDay","length","description","componentDidUpdate","prevProps","prevState","render","updatePeriod","updateRegion","mobileUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Table, Grid, Card, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart'\n\nexport class Forecast extends Component {\n\n\nstate = {\n    period: 48,\n    region: 18,\n    sortByLevel: false,\n    bestPeriods: {day:[{from: 'Loading',level:'Loading',text:'Loading'},{from: 'Loading',level:'Loading',text:'Loading'},{from: 'Loading',level:'Loading',text:'Loading'} ]}\n}\n\ncomponentDidUpdate (prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods){\n       // this.renderBestPeriods()\n    }\n}\n\n        periodOptions = [\n            {\n              key: 6,\n              text: '+6 hours',\n              value: 12,\n            //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n            },\n            {\n              key: 8,\n              text: '+8 hours',\n              value: 16,\n            },\n            {\n              key: 12,\n              text: '+12 hours',\n              value: 24,\n            },\n            {\n              key: 24,\n              text: '+24 hours',\n              value: 48,\n            },\n            {\n              key: 48,\n              text: '+48 hours',\n              value: 96,\n            },\n            {\n              key: 100,\n              text: 'Max',\n              value: 500,\n            },\n          ]\n        \n          parseDate = (input) => {\n            let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n            let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: true};\n                   let parsedDate = new Date(Date.UTC(\n                       parseInt(input.slice(0, 4), 10),\n                       parseInt(input.slice(5, 7), 10) - 1,\n                       parseInt(input.slice(8, 10), 10),\n                       parseInt(input.slice(11, 13), 10),\n                       parseInt(input.slice(14, 16), 10),\n                     //parseInt(input.slice(13,15), 10)\n                   ))\n                   return (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)} | ${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n           }\n\n\n          genRegionOptions = () => {\n          let output = this.props.regionIndex.map(obj => {\n                return {key: obj.id, text: obj.name, value: obj.id}\n            })\n            output.sort((a,b) => (a.key < b.key) ? 1 : -1)\n            return output\n        }\n\n        setPeriod = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                period: data.value\n            })\n        }\n        setRegion = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                region: data.value\n            })\n        }\n\n        controlSort = () => {\n            let newProps = this.props.aggedVals\n          if (this.state.sortByLevel === false){\n           newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.from) > Date.parse(b.from)? 1 : -1))\n            }\n            else if (this.state.sortByLevel === true){\n                newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.level) > Date.parse(b.level)? 1 : -1))\n            }\n                 return newProps\n        }\n\n        handleSortButton = (event) => {\n            let newVal = this.state.sortByLevel ? false : true\n            this.setState({sortByLevel: newVal})\n        } \n\n    renderBestPeriods = () => {\n                \n        let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n        let output = {day:[{\n                        //header:      `${bestDay.from}`,\n                        description:  `1. ${bestDay[0].from}\\n${bestDay[0].level}\\n${bestDay[0].text}`\n                    }\n                ]}\n\n            \n        this.setState({bestPeriods: output})\n        return output\n    } \n\n\n\n    render() {\n        return (\n\n            <div>\n\n            <div>\n                {/* <h1> Hi, it's me forecast! Hows things?</h1> */}\n\n<Grid columns='2' >\n<Grid.Row>\n   \n   <Grid.Column floated='left'>      \n    <Dropdown\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n      \n       </Grid.Column>\n       <Grid.Column floated='left'>\n   <p>Yep thats right I'm some text!</p>\n   </Grid.Column>\n\n</Grid.Row>\n\n\n<Grid.Row>\n   \n    <Grid.Column floated='left'>      \n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => this.props.updateRegion(data.value)}\n        />\n       \n        </Grid.Column>\n        <Grid.Column floated='left'>\n    <p>Yep thats right I'm some text!</p>\n    </Grid.Column>\n \n </Grid.Row>\n </Grid>\n</div>\n<div>\n <Card.Group  itemsPerRow={3} items={this.state.bestPeriods} />\n</div>\n\n\n\n<div id=\"summary-chart\" >\n\n<SummaryChart aggedVals={this.controlSort()} sortTrigger={this.state.sortByLevel} mobileUser={this.props.mobileUser}/>\n</div>\n<button class=\"ui button\" onClick={this.handleSortButton}>Sort By {this.state.sortByLevel ? 'Date' : 'Intensity Level'}</button>\n</div>\n        );\n    }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}