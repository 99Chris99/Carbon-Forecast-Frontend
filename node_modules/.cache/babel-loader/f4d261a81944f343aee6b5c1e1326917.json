{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js\";\nimport _ from 'lodash';\nimport PostcodeJsLkp from '../content/PostcodeJsLkp';\nimport React, { Component } from 'react';\nimport { Search, Button, Table, Input, Grid, Header, Segment } from 'semantic-ui-react';\nconst initialState = {\n  isLoading: false,\n  results: [{\n    title: ''\n  }],\n  value: '',\n  confirmResult: ''\n};\nconst source = PostcodeJsLkp.postcodes; //handleResultSelect = (e, { result }) => this.setState({ value: result.title },this.confrimResult(result.title))\n\nexport default class PostCodeSearch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleResultSelect = (e, {\n      result\n    }) => this.setState({\n      value: result.title\n    });\n\n    this.handleSearchChange = (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(source, isMatch)\n        });\n      }, 300);\n    };\n\n    this.confirmResult = () => {\n      let valueCheck = this.state.value.toUpperCase();\n\n      if (typeof valueCheck !== 'undefined' && valueCheck !== '' && !valueCheck.includes(\" \")) {\n        console.log('confirming');\n        let result = source.filter(postcode => valueCheck === postcode.title)[0].title;\n\n        if (typeof result !== 'undefined') {\n          console.log(result); //this.setState({confirmResult: result})\n\n          this.props.updatePostCode(result);\n        }\n      } else {\n        console.log('Search error');\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value,\n          results = _this$state.results;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Post Code\", React.createElement(Segment.Group, {\n      style: {\n        background: 'none',\n        marginTop: '0'\n      },\n      horizontal: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Search // style={{maxwidth: \"2vw\"}}\n    , Object.assign({\n      loading: isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: results,\n      value: value\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(Button, {\n      id: \"searchBtn\",\n      onClick: event => this.confirmResult(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n} //   render() {\n//     const { isLoading, value, results } = this.state\n//     return (\n//         <div>\n//  <Table fixed unstackable singleLine celled compact>\n// {/* <Table fixed unstackable singleLine celled > */}\n// <Table.Row>\n//   <Table.Cell textAlign='left' id=\"searchInputCell\">\n//           <Search \n//             loading={isLoading}\n//             onResultSelect={this.handleResultSelect}\n//             onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//               leading: true,\n//             })}\n//             results={results}\n//             value={value}\n//             {...this.props} \n//           />\n//           </Table.Cell>\n//           <Table.Cell textAlign='left' id=\"searchBtnCell\">\n//           <Button id=\"searchBtn\" onClick={event => this.confirmResult()}>Submit</Button>\n// </Table.Cell>\n//         </Table.Row>\n// </Table>\n//           </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js"],"names":["_","PostcodeJsLkp","React","Component","Search","Button","Table","Input","Grid","Header","Segment","initialState","isLoading","results","title","value","confirmResult","source","postcodes","PostCodeSearch","state","handleResultSelect","e","result","setState","handleSearchChange","setTimeout","length","re","RegExp","escapeRegExp","isMatch","test","filter","valueCheck","toUpperCase","includes","console","log","postcode","props","updatePostCode","render","background","marginTop","debounce","leading","event"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport PostcodeJsLkp from '../content/PostcodeJsLkp';\nimport React, { Component } from 'react'\nimport { Search, Button, Table, Input, Grid, Header, Segment } from 'semantic-ui-react'\n\nconst initialState = { isLoading: false, results: [{title:''}], value: '', confirmResult: ''}\n\n\nconst source = (\n    PostcodeJsLkp.postcodes\n)\n\n\n//handleResultSelect = (e, { result }) => this.setState({ value: result.title },this.confrimResult(result.title))\n\nexport default class PostCodeSearch extends Component {\n  state = initialState\n\n\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }\n\n  \n\n  confirmResult = () => {\n    let valueCheck = this.state.value.toUpperCase()\n     \n    if (typeof valueCheck !== 'undefined' && valueCheck !== '' && !valueCheck.includes(\" \")) {\n      console.log('confirming')\n    let result = source.filter(postcode => valueCheck === postcode.title)[0].title\n    if (typeof result !== 'undefined'){\n      console.log(result)\n      //this.setState({confirmResult: result})\n    this.props.updatePostCode(result)\n    \n    }\n    }else{(console.log('Search error'))}\n  }\n\n\n\n\n  render() {\n    const { isLoading, value, results } = this.state\n\n    return (\n        <div >\n          Post Code\n <Segment.Group style={{background: 'none', marginTop:'0'}} horizontal>\n \n          <Search \n            // style={{maxwidth: \"2vw\"}}\n            loading={isLoading}\n            onResultSelect={this.handleResultSelect}\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\n              leading: true,\n            })}\n            results={results}\n            value={value}\n            {...this.props} \n          />\n  \n          <Button id=\"searchBtn\" onClick={event => this.confirmResult()}>Submit</Button>\n          </Segment.Group>\n          </div>\n    )\n  }\n}\n//   render() {\n//     const { isLoading, value, results } = this.state\n\n//     return (\n//         <div>\n//  <Table fixed unstackable singleLine celled compact>\n// {/* <Table fixed unstackable singleLine celled > */}\n// <Table.Row>\n//   <Table.Cell textAlign='left' id=\"searchInputCell\">\n//           <Search \n//             loading={isLoading}\n//             onResultSelect={this.handleResultSelect}\n//             onSearchChange={_.debounce(this.handleSearchChange, 500, {\n//               leading: true,\n//             })}\n//             results={results}\n//             value={value}\n//             {...this.props} \n//           />\n//           </Table.Cell>\n//           <Table.Cell textAlign='left' id=\"searchBtnCell\">\n//           <Button id=\"searchBtn\" onClick={event => this.confirmResult()}>Submit</Button>\n\n// </Table.Cell>\n//         </Table.Row>\n// </Table>\n//           </div>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}