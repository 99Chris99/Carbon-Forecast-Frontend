{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport API from './adapters/API';\nimport Nav from './components/Nav';\nimport Start from './components/Start';\nimport Forecast from './components/Forecast';\nimport About from './components/About';\nimport Advice from './components/Advice';\nimport { ItemMeta } from 'semantic-ui-react';\nimport { cloneWithoutLoc } from '@babel/types';\nimport { Container } from 'semantic-ui-react';\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewport: {},\n      setRegion: 18,\n      setPostCode: '',\n      useId: true,\n      setPeriod: 8,\n      setGran: 2,\n      regionIndex: [],\n      currentLevel: {\n        region: '',\n        text: '',\n        value: 0\n      },\n      forecastA: {},\n      forecastB: {},\n      forecastC: {},\n      aggedVals: [],\n      bestPeriods: []\n    };\n\n    this.now = () => {\n      let date = new Date();\n      return date.toISOString();\n    };\n\n    this.viewport = () => {\n      let e = window,\n          a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      this.setState({\n        viewport: {\n          width: e[a + 'Width'],\n          height: e[a + 'Height']\n        }\n      });\n    };\n\n    this.plus30Mins = dateTime => {\n      let newTime = dateTime.split(/\\D+/);\n      let output = new Date(Date.UTC(newTime[0], newTime[1] - 1, newTime[2], newTime[3], newTime[4], newTime[5]));\n      output.setMinutes(output.getMinutes() + 30);\n      let newdateTime = output.toISOString();\n      return newdateTime;\n    };\n\n    this.get48hForecast = start => {\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, start).then(info => this.setState({\n          forecastA: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, start).then(info => this.setState({\n          forecastA: info.data.data\n        }, {\n          setRegion: info.data.regionid\n        }));\n      }\n    };\n\n    this.getForecastB = () => {\n      const start = this.state.forecastA[this.state.forecastA.length - 1].to;\n      const startPlus30 = this.plus30Mins(start);\n      console.log(startPlus30);\n\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({\n          forecastB: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({\n          forecastB: info.data.data\n        }));\n      }\n    };\n\n    this.getForecastC = () => {\n      const start = this.state.forecastB[this.state.forecastB.length - 1].to;\n      const startPlus30 = this.plus30Mins(start);\n\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({\n          forecastC: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({\n          forecastC: info.data.data\n        }));\n      }\n    };\n\n    this.compileRegionIndex = () => {\n      API.getCurrentRegionalData().then(info => info.data[0].regions.map(item => {\n        this.setState({\n          regionIndex: [...this.state.regionIndex, {\n            id: item.regionid,\n            name: item.shortname\n          }]\n        });\n\n        if (item.regionid === this.state.setRegion) {\n          this.setState({\n            currentLevel: {\n              region: item.regionid,\n              text: item.intensity.index,\n              value: item.intensity.forecast\n            }\n          });\n        }\n      })).then(datainfo => console.log(datainfo));\n    };\n\n    this.allForecast = () => {\n      const allForecast = [...this.state.forecastA, ...this.state.forecastB, ...this.state.forecastC];\n      return allForecast;\n    };\n\n    this.calTextLevel = value => {\n      if (value > 360) {\n        return 'Very High';\n      } else if (value >= 260 && value <= 359) {\n        return 'High';\n      } else if (value >= 160 && value <= 259) {\n        return 'Moderate';\n      } else if (value >= 60 && value <= 159) {\n        return 'Low';\n      } else if (value >= 59 && value <= 0) {\n        return 'Very Low';\n      } else {\n        return 'Level not known';\n      }\n    };\n\n    this.determinGran = () => {\n      let newGrand = 2;\n\n      if (this.state.setPeriod <= 8) {\n        newGrand = 4;\n      } else if (this.state.setPeriod > 8 && this.state.setPeriod <= 12) {\n        newGrand = 6;\n      } else if (this.state.setPeriod > 12 && this.state.setPeriod <= 24) {\n        newGrand = 8;\n      } else if (this.state.setPeriod > 24 && this.state.setPeriod <= 48) {\n        newGrand = 12;\n      } else if (this.state.setPeriod > 48) {\n        newGrand = 14;\n      }\n\n      this.setState({\n        setGran: newGrand\n      });\n      return newGrand;\n    };\n\n    this.aggForecast = (forecastArray, granularity) => {\n      // const period = 8\n      // const periodUnits = 'h'\n      // const granularity = 4\n      // const forecastArray =[2,3,6,1,5,1,1,1,1,1,1,10]\n      let agged = [];\n\n      for (let index = 0; index < forecastArray.length; index += granularity) {\n        if (index % granularity === 0) {\n          const half = forecastArray[index];\n          let set = forecastArray.slice(index, index + granularity).map(item => item.intensity.forecast); //console.log(set)\n\n          let sum = set.reduce((acc, cur) => acc + cur); //console.log(sum)\n\n          let avg = sum / set.length;\n          agged = [...agged, {\n            from: half.from,\n            level: Math.round(avg),\n            text: this.calTextLevel(avg)\n          }];\n        }\n      }\n\n      let newAgged = agged.slice(0, this.state.setPeriod);\n      let best = this.bestPeriods(newAgged);\n      this.setState({\n        aggedVals: newAgged,\n        bestPeriods: best\n      }); //console.log(agged)\n      //return agged\n    };\n\n    this.bestPeriods = objArray => {\n      return objArray.sort((a, b) => a.level > b.level ? 1 : -1).slice(0, 3);\n    };\n\n    this.updateRegion = newRegion => {\n      this.setState({\n        setRegion: newRegion\n      });\n    };\n\n    this.updatePeriod = newPeriod => {\n      this.setState({\n        setPeriod: newPeriod\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.get48hForecast(this.now());\n    this.compileRegionIndex();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.forecastA !== prevState.forecastA) {\n      return this.getForecastB(this.state.setRegion);\n    } else if (this.state.forecastB !== prevState.forecastB) {\n      return this.getForecastC(this.state.setRegion);\n    } else if (this.state.forecastC !== prevState.forecastC) {\n      return this.aggForecast(this.allForecast(), this.determinGran());\n    } else if (this.state.setPeriod !== prevState.setPeriod) {\n      return this.aggForecast(this.allForecast(), this.determinGran());\n    }\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Start, {\n      intensityData: this.state.currentLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Start, {\n      intensityData: this.state.currentLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/forecast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(Forecast, {\n      regionIndex: this.state.regionIndex,\n      setRegion: this.state.setRegion,\n      setPeriod: this.state.setPeriod,\n      updateRegion: this.updateRegion,\n      updatePeriod: this.updatePeriod,\n      aggedVals: this.state.aggedVals,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/advice\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Advice, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/about\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(About, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }))))));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/App.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","API","Nav","Start","Forecast","About","Advice","ItemMeta","cloneWithoutLoc","Container","App","state","viewport","setRegion","setPostCode","useId","setPeriod","setGran","regionIndex","currentLevel","region","text","value","forecastA","forecastB","forecastC","aggedVals","bestPeriods","now","date","Date","toISOString","e","window","a","document","documentElement","body","setState","width","height","plus30Mins","dateTime","newTime","split","output","UTC","setMinutes","getMinutes","newdateTime","get48hForecast","start","getRegionId48HrsData","then","info","data","getRegionPostCode48HrsData","regionid","getForecastB","length","to","startPlus30","console","log","getForecastC","compileRegionIndex","getCurrentRegionalData","regions","map","item","id","name","shortname","intensity","index","forecast","datainfo","allForecast","calTextLevel","determinGran","newGrand","aggForecast","forecastArray","granularity","agged","half","set","slice","sum","reduce","acc","cur","avg","from","level","Math","round","newAgged","best","objArray","sort","b","updateRegion","newRegion","updatePeriod","newPeriod","componentDidMount","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport API from './adapters/API'\nimport Nav from './components/Nav';\nimport Start from './components/Start';\nimport Forecast from './components/Forecast';\nimport About from './components/About';\nimport Advice from './components/Advice';\nimport { ItemMeta } from 'semantic-ui-react';\nimport { cloneWithoutLoc } from '@babel/types';\n\nimport { Container } from 'semantic-ui-react'\n\n\nexport class App extends Component {\n  \n  \n  state = {\n    viewport: {},\n    setRegion: 18,\n    setPostCode: '',\n    useId: true,\n    setPeriod: 8,\n    setGran: 2,\n    regionIndex: [],\n    currentLevel: {region: '', text: '', value: 0},\n    forecastA: {},\n    forecastB: {},\n    forecastC: {},\n    aggedVals: [],\n    bestPeriods: []\n  }\n  \n  \n//2017-08-25T12:35Z\n//[{id: 0, name: 'test'}]\n\nnow = () => {\n  let date = new Date();\n  return date.toISOString()\n}\n\nviewport = () => {\nlet e = window\n, a = 'inner';\nif ( !( 'innerWidth' in window ) )\n{\na = 'client';\ne = document.documentElement || document.body;\n}\nthis.setState(\n  {viewport:{ width : e[ a+'Width' ] , height : e[ a+'Height' ] }}\n)\n}\n\n\nplus30Mins = (dateTime) => {\n  let newTime = dateTime.split(/\\D+/);\n  let output =  new Date(Date.UTC(newTime[0], newTime[1]-1, newTime[2], newTime[3], newTime[4], newTime[5]));\n  output.setMinutes(output.getMinutes() + 30)\n  let newdateTime = output.toISOString()\n  return newdateTime\n}\n\n\n  componentDidMount () {\n    this.get48hForecast(this.now())\n    this.compileRegionIndex()\n  }\n\n\n  \n\n  componentDidUpdate (prevProps, prevState) {\n    if (this.state.forecastA !== prevState.forecastA)\n    {\n      return this.getForecastB(this.state.setRegion)\n    }\n    else if (this.state.forecastB !== prevState.forecastB)\n    {\n      return this.getForecastC(this.state.setRegion)\n    }\n    else if (this.state.forecastC !== prevState.forecastC)\n    {\n      return (\n        this.aggForecast(this.allForecast(), this.determinGran()))\n    }\n    else if (this.state.setPeriod !== prevState.setPeriod)\n    {\n      return (\n      this.aggForecast(this.allForecast(), this.determinGran()))\n    }\n  }\n  \nget48hForecast = (start) => {\n  if (this.state.useId){\n    API.getRegionId48HrsData(this.state.setRegion, start).then(info => this.setState({forecastA: info.data.data}))\n  }else {\n    API.getRegionPostCode48HrsData(this.state.setPostCode, start).then(info => this.setState({forecastA: info.data.data}, {setRegion: info.data.regionid}))\n  }\n}\ngetForecastB = () => {\n  const start = this.state.forecastA[this.state.forecastA.length - 1].to\n  const startPlus30 = this.plus30Mins(start)\n  console.log(startPlus30)\n  if (this.state.useId) {\n    API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({forecastB: info.data.data}))\n}else{\n    API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({forecastB: info.data.data}))\n  } \n}\ngetForecastC = () => {\n  const start = this.state.forecastB[this.state.forecastB.length - 1].to\n  const startPlus30 = this.plus30Mins(start)\n  if (this.state.useId) {\n    API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({forecastC: info.data.data}))\n}else{\n    API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({forecastC: info.data.data}))\n  } \n}\n\n\n\n  compileRegionIndex = () => {\n    API.getCurrentRegionalData().then(info => info.data[0].regions.map(item => {\n          this.setState({\n              regionIndex: \n                [...this.state.regionIndex,\n                {id: item.regionid,\n                name: item.shortname}],\n                }\n          )\n          if (item.regionid === this.state.setRegion){\n            this.setState({\n              currentLevel: {region: item.regionid, text: item.intensity.index, value: item.intensity.forecast}\n            })\n          }\n       }\n      )\n    ).then(datainfo => console.log(datainfo))\n}\n  \n\nallForecast = () => {\n  const allForecast = [...this.state.forecastA, ...this.state.forecastB, ...this.state.forecastC]\n  return allForecast\n}\n\ncalTextLevel = (value) => {\n  if (value > 360) {\n      return 'Very High'\n  } \n  else if (value >= 260 && value <= 359 ) {\n      return 'High'\n  }\n  else if (value >= 160 && value <= 259 ) {\n      return 'Moderate'\n  } \n  else if (value >= 60 && value <= 159 ) {\n    return 'Low'\n  }\n  else if (value >= 59 && value <= 0 ) {\n    return 'Very Low'\n  }else \n  {\n    return 'Level not known'\n  }\n}\n\ndeterminGran = () => {\n let newGrand = 2\n  if (this.state.setPeriod <= 8) {\n    newGrand = 4\n  }else if (this.state.setPeriod > 8 && this.state.setPeriod <= 12) {\n    newGrand = 6\n  }else if (this.state.setPeriod > 12 && this.state.setPeriod <= 24) {\n    newGrand = 8\n  }else if (this.state.setPeriod > 24 && this.state.setPeriod <= 48) {\n    newGrand = 12\n  }else if (this.state.setPeriod > 48) {\n    newGrand = 14\n  }\n  this.setState({setGran: newGrand})\n  return newGrand\n}\n\naggForecast = (forecastArray, granularity) => {\n \n  // const period = 8\n  // const periodUnits = 'h'\n  // const granularity = 4\n  // const forecastArray =[2,3,6,1,5,1,1,1,1,1,1,10]\n\nlet agged = []\n\nfor (let index = 0; index < forecastArray.length; index+=granularity) {\n \n  if (index%granularity === 0) {\n  const half = forecastArray[index];\n  let set = forecastArray.slice(index, index+granularity).map(item => item.intensity.forecast)\n      //console.log(set)\n  let sum = set.reduce((acc, cur) => acc + cur)\n      //console.log(sum)\n      let avg = sum / set.length\n  agged = [...agged, {from:half.from, level:Math.round(avg), text:this.calTextLevel(avg)}]\n}\n}\n\nlet newAgged = agged.slice(0, this.state.setPeriod)\n\nlet best = this.bestPeriods(newAgged)\n\nthis.setState({\n  aggedVals: newAgged,\n  bestPeriods: best\n})\n//console.log(agged)\n//return agged\n}\n\n\n\n\nbestPeriods = (objArray) => {\n\nreturn objArray.sort((a, b) => (a.level > b.level) ? 1 : -1).slice(0,3)\n\n}\n\nupdateRegion = (newRegion) => {\nthis.setState({setRegion: newRegion})\n}\nupdatePeriod = (newPeriod) => {\nthis.setState({setPeriod: newPeriod})\n}\n\n\n\n  render() {\n    return (\n\n\n<Router>\n\n\n<div>\n     \n<Nav/>\n\n<Container>\n\n<Switch>\n\n    <Route exact path=\"/\">\n          <Start intensityData={this.state.currentLevel}/>\n    </Route>\n    <Route path=\"/start\" >\n          <Start intensityData={this.state.currentLevel}/>\n    </Route>\n    <Route path=\"/forecast\">\n          <Forecast regionIndex={this.state.regionIndex} setRegion={this.state.setRegion} setPeriod={this.state.setPeriod}\n                    updateRegion={this.updateRegion} updatePeriod={this.updatePeriod} aggedVals={this.state.aggedVals}\n          />\n    </Route>\n    <Route path=\"/advice\">\n          <Advice />\n    </Route>\n    <Route path=\"/about\">\n          <About />\n    </Route>\n\n</Switch>\n      \n</Container>\n</div>\n\n</Router>\n\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}