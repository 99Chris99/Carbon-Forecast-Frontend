{"ast":null,"code":"const apiEndpoint = \"https://api.carbonintensity.org.uk/\";\nconst nationalURL = \"\".concat(apiEndpoint, \"intensity/\");\nconst allRegionsURL = \"\".concat(apiEndpoint, \"regional/\");\nconst region48Hrs = \"\".concat(allRegionsURL, \"intensity/\"); //const id48Hrs = `${allRegionsURL}intensity/{from}/fw48h/regionid/`\n\nlet handleErrors = response => {\n  console.log('hihi');\n  console.log(response.status);\n\n  if (response.status < 200 || response.status > 299) {\n    //if (!response.ok) {\n    //if (response !== 200) {\n    console.log('run for your lives its an error!!!');\n    return alert('Error retrieving forecast data, please reload.'); // throw Error(response.statusText, reload());\n  } //console.log('All good')\n\n\n  return response;\n};\n\nconst reload = () => {\n  alert('Error retrieving forecast data, please reload.');\n};\n\nconst getCurrentNationalData = () => fetch(nationalURL, {\n  method: \"GET\"\n}).then(handleErrors).then(response => response.json()).catch(err => {// In here we will get the higher-level error.\n});\n\nconst getCurrentRegionalData = () => fetch(allRegionsURL, {\n  method: \"GET\"\n}).then(handleErrors).then(response => response.json());\n\nconst getRegionId48HrsData = (idQuery, start) => fetch(\"\".concat(region48Hrs).concat(start, \"/fw48h/regionid/\").concat(idQuery), {\n  method: \"GET\"\n}).then(handleErrors).then(response => response.json());\n\nconst getRegionPostCode48HrsData = (postCodeQuery, start) => fetch(\"\".concat(region48Hrs).concat(start, \"/fw48h/postcode/\").concat(postCodeQuery), {\n  method: \"GET\"\n}).then(handleErrors).then(response => response.json());\n\nexport default {\n  getCurrentNationalData,\n  getCurrentRegionalData,\n  getRegionId48HrsData,\n  getRegionPostCode48HrsData\n};","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/adapters/API.js"],"names":["apiEndpoint","nationalURL","allRegionsURL","region48Hrs","handleErrors","response","console","log","status","alert","reload","getCurrentNationalData","fetch","method","then","json","catch","err","getCurrentRegionalData","getRegionId48HrsData","idQuery","start","getRegionPostCode48HrsData","postCodeQuery"],"mappings":"AAAA,MAAMA,WAAW,wCAAjB;AACA,MAAMC,WAAW,aAAMD,WAAN,eAAjB;AACA,MAAME,aAAa,aAAMF,WAAN,cAAnB;AACA,MAAMG,WAAW,aAAMD,aAAN,eAAjB,C,CACA;;AAEA,IAAIE,YAAY,GAAIC,QAAD,IAAc;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAArB;;AACA,MAAIH,QAAQ,CAACG,MAAT,GAAkB,GAAlB,IAAyBH,QAAQ,CAACG,MAAT,GAAkB,GAA/C,EAAoD;AACpD;AACA;AACIF,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,WAAOE,KAAK,CAAC,gDAAD,CAAZ,CAJiD,CAKhD;AACH,GAT4B,CAU7B;;;AACA,SAAOJ,QAAP;AACH,CAZD;;AAcA,MAAMK,MAAM,GAAG,MAAM;AACjBD,EAAAA,KAAK,CAAC,gDAAD,CAAL;AACH,CAFD;;AAIA,MAAME,sBAAsB,GAAG,MAAMC,KAAK,CAACX,WAAD,EAAa;AAACY,EAAAA,MAAM,EAAE;AAAT,CAAb,CAAL,CAAmCC,IAAnC,CAAwCV,YAAxC,EAAsDU,IAAtD,CAA2DT,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EAAvE,EAAwFC,KAAxF,CAA+FC,GAAD,IAAS,CACxI;AACD,CAFkC,CAArC;;AAGA,MAAMC,sBAAsB,GAAG,MAAMN,KAAK,CAACV,aAAD,EAAe;AAACW,EAAAA,MAAM,EAAE;AAAT,CAAf,CAAL,CAAqCC,IAArC,CAA0CV,YAA1C,EAAwDU,IAAxD,CAA6DT,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EAAzE,CAArC;;AACA,MAAMI,oBAAoB,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoBT,KAAK,WAAIT,WAAJ,SAAkBkB,KAAlB,6BAA0CD,OAA1C,GAAoD;AAACP,EAAAA,MAAM,EAAE;AAAT,CAApD,CAAL,CAA0EC,IAA1E,CAA+EV,YAA/E,EAA6FU,IAA7F,CAAkGT,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EAA9G,CAAjD;;AACA,MAAMO,0BAA0B,GAAG,CAACC,aAAD,EAAgBF,KAAhB,KAA0BT,KAAK,WAAIT,WAAJ,SAAkBkB,KAAlB,6BAA0CE,aAA1C,GAA0D;AAACV,EAAAA,MAAM,EAAE;AAAT,CAA1D,CAAL,CAAgFC,IAAhF,CAAqFV,YAArF,EAAmGU,IAAnG,CAAwGT,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EAApH,CAA7D;;AAIA,eAAe;AACXJ,EAAAA,sBADW;AAEXO,EAAAA,sBAFW;AAGXC,EAAAA,oBAHW;AAIXG,EAAAA;AAJW,CAAf","sourcesContent":["const apiEndpoint = `https://api.carbonintensity.org.uk/`\nconst nationalURL = `${apiEndpoint}intensity/`\nconst allRegionsURL = `${apiEndpoint}regional/`\nconst region48Hrs = `${allRegionsURL}intensity/`\n//const id48Hrs = `${allRegionsURL}intensity/{from}/fw48h/regionid/`\n\nlet handleErrors = (response) => {\n    console.log('hihi')\n    console.log(response.status)\n    if (response.status < 200 || response.status > 299) {\n    //if (!response.ok) {\n    //if (response !== 200) {\n        console.log('run for your lives its an error!!!')\n       return alert('Error retrieving forecast data, please reload.')\n        // throw Error(response.statusText, reload());\n    }\n    //console.log('All good')\n    return response;\n}\n\nconst reload = () => {\n    alert('Error retrieving forecast data, please reload.')\n}\n\nconst getCurrentNationalData = () => fetch(nationalURL,{method: \"GET\"}).then(handleErrors).then(response => response.json()).catch((err) => {\n    // In here we will get the higher-level error.\n  })\nconst getCurrentRegionalData = () => fetch(allRegionsURL,{method: \"GET\"}).then(handleErrors).then(response => response.json())\nconst getRegionId48HrsData = (idQuery, start) => fetch(`${region48Hrs}${start}/fw48h/regionid/${idQuery}`,{method: \"GET\"}).then(handleErrors).then(response => response.json())\nconst getRegionPostCode48HrsData = (postCodeQuery, start) => fetch(`${region48Hrs}${start}/fw48h/postcode/${postCodeQuery}`,{method: \"GET\"}).then(handleErrors).then(response => response.json())\n\n\n\nexport default {\n    getCurrentNationalData,\n    getCurrentRegionalData,\n    getRegionId48HrsData,\n    getRegionPostCode48HrsData\n}"]},"metadata":{},"sourceType":"module"}