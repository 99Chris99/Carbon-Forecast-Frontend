{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js\";\nimport React, { Component } from 'react';\nimport { XYPlot, LineSeries, HorizontalGridLines, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries } from 'react-vis';\nexport class Timeline extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rawData: [{\n        y: 0,\n        x: 0\n      }],\n      barPosition: {\n        date: '',\n        offset: 0\n      }\n    };\n\n    this.parseDate = (input, timeOrDate) => {\n      let output = 0;\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n\n      if (timeOrDate === 'time') {\n        output = parsedDate.toLocaleString(\"en-GB\", optionsTime);\n      } else if (timeOrDate === 'date') {\n        output = \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsTime), \"|\").concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n      }\n\n      return output;\n    };\n\n    this.formatData = () => {\n      let data = [];\n\n      if (this.props.timelineVals !== []) {\n        this.props.timelineVals.map((item, index) => {\n          //let bar = {y: this.parseDate(item.from, 'time'), x:item.level} \n          //let order = (this.props.timelineVals.length -= index)\n          let bar = {\n            x: item.level,\n            y: index,\n            time: this.parseDate(item.from, 'time')\n          };\n          return data = [...data, bar];\n        });\n        let output = data.sort((a, b) => a.y > b.y);\n        console.log(data);\n        this.setState({\n          rawData: output\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (typeof this.props.timelineVals[0] !== 'undefined') {\n      return this.formatData();\n    }\n  }\n\n  //day.sort((a, b) => (a.level > b.level)\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"timeline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width: '100%',\n        //height: '50vh',\n        height: '550vh',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        border: '1px solid #ccc'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(FlexibleXYPlot, {\n      id: \"timeline-chart\",\n      yType: \"ordinal\",\n      yDomain: [9, 0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(GradientDefs, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"linearGradient\", {\n      id: \"CoolGradient\",\n      y1: \"0\",\n      y2: \"0\",\n      x1: \"0\",\n      x2: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"stop\", {\n      offset: \"0%\",\n      stopColor: \"green\",\n      stopOpacity: 0.4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: \"50%\",\n      stopColor: \"yellow\",\n      stopOpacity: 0.4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: \"100%\",\n      stopColor: \"red\",\n      stopOpacity: 0.4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), React.createElement(HorizontalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.rawData,\n      color: 'black',\n      animation: true,\n      style: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: 4\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      position: \"start\",\n      tickValues: this.state.rawData.map(value => value.y),\n      tickSize: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))))));\n  }\n\n}\nexport default Timeline;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js"],"names":["React","Component","XYPlot","LineSeries","HorizontalGridLines","XAxis","YAxis","Borders","VerticalGridLines","HorizontalBarSeries","GradientDefs","AreaSeries","FlexibleXYPlot","LabelSeries","Timeline","state","rawData","y","x","barPosition","date","offset","parseDate","input","timeOrDate","output","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","formatData","data","props","timelineVals","map","item","index","bar","level","time","from","sort","a","b","console","log","setState","componentDidMount","render","justifyContent","position","width","height","overflow","border","fill","strokeLinejoin","strokeWidth","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {XYPlot, LineSeries, HorizontalGridLines, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries} from 'react-vis';\n\nexport class Timeline extends Component {\n\n    state = {\n        rawData: [{y: 0, x: 0},\n        ],\n        barPosition: {date: '', offset: 0}\n    }\n\n\n    componentDidMount () {\n        if (typeof this.props.timelineVals[0] !== 'undefined'){\n          return this.formatData()\n        }\n    }\n\n    parseDate = (input, timeOrDate) => {\n        let output = 0\n        let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n        let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: false};\n               let parsedDate = new Date(Date.UTC(\n                   parseInt(input.slice(0, 4), 10),\n                   parseInt(input.slice(5, 7), 10) - 1,\n                   parseInt(input.slice(8, 10), 10),\n                   parseInt(input.slice(11, 13), 10),\n                   parseInt(input.slice(14, 16), 10),\n                 //parseInt(input.slice(13,15), 10)\n               ))\n               if (timeOrDate === 'time'){\n                   output =  parsedDate.toLocaleString(\"en-GB\", optionsTime)\n               }else if (timeOrDate === 'date') {\n               output =  (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)}|${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n            }\n            return output\n\n            }\n\n       formatData = () => {\n        let data = []\n        \n        if (this.props.timelineVals !== [] ) {\n        this.props.timelineVals.map((item, index) => {\n            //let bar = {y: this.parseDate(item.from, 'time'), x:item.level} \n            //let order = (this.props.timelineVals.length -= index)\n            let bar = {x:item.level, y: index, time: this.parseDate(item.from, 'time')}  \n            return data = [...data, bar]\n        })\n        let output = data.sort((a, b) => (a.y > b.y))\n        console.log(data)\n        this.setState({rawData: output})    \n    }\n    }\n    //day.sort((a, b) => (a.level > b.level)\n\n\n    render() {\n        return (\n            <div>\n                \n\n                <div id=\"timeline\">\n<div\n      style={{\n       // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width:  '100%',\n        //height: '50vh',\n        height: '550vh',\n        overflow: 'auto',\n      }}\n    \n    >\n<div\n        style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      >\n        <FlexibleXYPlot  id=\"timeline-chart\" yType=\"ordinal\" yDomain={[9, 0]}>\n        {/* xType=\"time\" \n        yType=\"ordinal\"\n        */}\n        <GradientDefs>\n          <linearGradient id=\"CoolGradient\" y1=\"0\" y2=\"0\" x1=\"0\" x2=\"1\">\n            <stop offset=\"0%\" stopColor=\"green\" stopOpacity={0.4}/>\n            <stop offset=\"50%\" stopColor=\"yellow\" stopOpacity={0.4}/>\n            <stop offset=\"100%\" stopColor=\"red\" stopOpacity={0.4} />\n          </linearGradient>\n        </GradientDefs>\n\n        <HorizontalGridLines />\n     \n        {/* <YAxis \n        position=\"start\"\n        tickTotal={2}\n        // top={40}\n        top={0}\n        //height={150}\n        //width={1}\n        style={{\n            text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n          }}\n          //tickLabelAngle={-45}\n          /> */}\n        \n        \n        <LineSeries \n        data={this.state.rawData}\n        color={'black'}\n        animation\n        style={{\n            fill: 'none',\n            strokeLinejoin: 'round',\n            strokeWidth: 4\n          }}\n        />\n        {/* <HorizontalBarSeries \n        data={this.state.rawData}\n        color={'url(#CoolGradient)'}\n        animation\n        /> */}\n\n         <YAxis \n         position=\"start\"\n         tickValues={this.state.rawData.map(value => value.y)} \n         tickSize={1}\n         /> \n        {/* \n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n                        return { ...obj, label: obj.y.toString() }\n                    })}\n                    \n                    animation\n                    labelAnchorX=\"middle\"\n                    labelAnchorY=\"text-before-edge\"\n                    \n                    />\n\n\n\n        <LabelSeries\n        \n                    //data={this.xlabelData('top')}\n                    data={this.state.rawData.map(obj => {\n                        \n                        return { ...obj, y: this.props.mobileUser ? -3 : -18, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[0]}` }\n                    })}\n                    animation\n                    labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n                    //labelAnchorY=\"text-before-edge\"\n                    labelAnchorY={this.props.mobileUser ? \"text-after-edge\" : \"baseline\"}\n                    style={{\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n                      }}\n                    />\n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n\n                        return { ...obj, y: this.props.mobileUser ? -3 :-34, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[1]}` }\n                    })}\n                    animation\n                    labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n                    //labelAnchorY=\"text-before-edge\"\n                    //labelAnchorY=\"baseline\"\n                    labelAnchorY={this.props.mobileUser ? \"text-before-edge\" : \"baseline\"}\n                    style={{\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n                      }}\n                    /> */}\n\n\n\n        </FlexibleXYPlot>\n      </div>\n\n</div>\n     \n\n        </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Timeline;\n"]},"metadata":{},"sourceType":"module"}