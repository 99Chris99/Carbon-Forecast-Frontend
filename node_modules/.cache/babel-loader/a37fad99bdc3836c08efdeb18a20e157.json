{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _isTouchDevice = require('is-touch-device');\n\nvar _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar EVENT_NAME = 'window-resize';\nvar instance = null;\nvar instancesCount = 0;\nvar orientations = {\n  LANDSCAPE: '(orientation: landscape)',\n  PORTRAIT: '(orientation: portrait)'\n};\nvar IS_TOUCH_DEVICE = (0, _isTouchDevice2.default)();\nvar isWindowDefined = typeof window !== 'undefined'; // ------------------------------------------------\n// Custom Event detection\n// ------------------------------------------------\n\nvar supportsCustomEvents = isWindowDefined && typeof window.CustomEvent === 'function'; // ------------------------------------------------\n// Window Manager\n// ------------------------------------------------\n\nvar WindowManager = function () {\n  function WindowManager(breakpoints) {\n    var debounceTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;\n\n    _classCallCheck(this, WindowManager);\n\n    if (!isWindowDefined) {\n      // Silently return null if it is used on server\n      return null;\n    } // Increase reference count\n\n\n    instancesCount++; // Save or update options\n\n    this.breakpoints = breakpoints;\n    this.debounceTime = debounceTime; // If singleton instance exists, return it rather than creating a new one\n\n    if (instance) {\n      return instance;\n    } // Save singleton instance\n\n\n    instance = this; // Bind handlers\n\n    this.handleResize = this.handleResize.bind(this); // Add resize listener\n\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  _createClass(WindowManager, [{\n    key: 'removeListener',\n    value: function removeListener() {\n      instancesCount--;\n\n      if (instancesCount === 0) {\n        // Clear singleton instance\n        instance = null; // Remove listeners\n\n        window.removeEventListener('resize', this.handleResize);\n      }\n    }\n  }, {\n    key: 'getDimensions',\n    value: function getDimensions() {\n      return {\n        width: window.innerWidth,\n        height: window.innerHeight\n      };\n    }\n  }, {\n    key: 'getOrientation',\n    value: function getOrientation() {\n      return window.matchMedia(orientations.LANDSCAPE).matches ? 'landscape' : 'portrait';\n    }\n  }, {\n    key: 'getBreakpoint',\n    value: function getBreakpoint() {\n      var breakpoint = null;\n\n      if (this.breakpoints) {\n        for (var i = 0; i < this.breakpoints.length; i++) {\n          if (window.matchMedia(this.breakpoints[i].media).matches) {\n            breakpoint = this.breakpoints[i].name;\n          }\n        }\n      }\n\n      return breakpoint;\n    }\n  }, {\n    key: 'isTouchDevice',\n    value: function isTouchDevice() {\n      return IS_TOUCH_DEVICE;\n    }\n  }, {\n    key: 'handleResize',\n    value: function handleResize() {\n      var _this = this;\n\n      clearTimeout(this.timeoutID);\n      this.timeoutID = setTimeout(function () {\n        var event = void 0;\n        var detail = {\n          breakpoint: _this.getBreakpoint(),\n          dimensions: _this.getDimensions(),\n          orientation: _this.getOrientation()\n        };\n\n        if (supportsCustomEvents) {\n          event = new CustomEvent(EVENT_NAME, {\n            detail: detail\n          });\n        } else {\n          event = document.createEvent('CustomEvent');\n          event.initCustomEvent(EVENT_NAME, false, false, detail);\n        } // Dispatch the event.\n\n\n        window.dispatchEvent(event);\n      }, this.debounceTime);\n    }\n  }]);\n\n  return WindowManager;\n}();\n\nexports.default = WindowManager;","map":null,"metadata":{},"sourceType":"script"}