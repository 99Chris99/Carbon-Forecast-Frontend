{"ast":null,"code":"import _defineProperty from \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst apiEndpoint = \"https://api.carbonintensity.org.uk/\";\nconst nationalURL = \"\".concat(apiEndpoint, \"/intensity\");\nconst allRegionsURL = \"\".concat(apiEndpoint, \"/regional\");\nconst regionIndex = [{\n  key: 0,\n  name: 'test'\n}];\n\nconst getData = URL => fetch(URL).then(response => response.json());\n\nconst compileRegionIndex = () => {\n  getData(allRegionsURL).then(info => info.data[0].regions.map(item => {\n    regionIndex = _objectSpread({}, regionIndex);\n  }));\n};\n\nexport default {\n  getData\n};","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/adapters/API.js"],"names":["apiEndpoint","nationalURL","allRegionsURL","regionIndex","key","name","getData","URL","fetch","then","response","json","compileRegionIndex","info","data","regions","map","item"],"mappings":";;;;;;AAAA,MAAMA,WAAW,wCAAjB;AACA,MAAMC,WAAW,aAAMD,WAAN,eAAjB;AACA,MAAME,aAAa,aAAMF,WAAN,cAAnB;AAEA,MAAMG,WAAW,GAAG,CAEhB;AAACC,EAAAA,GAAG,EAAE,CAAN;AAASC,EAAAA,IAAI,EAAE;AAAf,CAFgB,CAApB;;AAWA,MAAMC,OAAO,GAAIC,GAAD,IAASC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA5B,CAAzB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAE7BN,EAAAA,OAAO,CAACJ,aAAD,CAAP,CAAuBO,IAAvB,CAA4BI,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,OAAb,CAAqBC,GAArB,CAAyBC,IAAI,IAAI;AAC7Dd,IAAAA,WAAW,qBACJA,WADI,CAAX;AAKP,GANmC,CAApC;AAUH,CAZD;;AAgBA,eAAe;AACXG,EAAAA;AADW,CAAf","sourcesContent":["const apiEndpoint = `https://api.carbonintensity.org.uk/`\nconst nationalURL = `${apiEndpoint}/intensity`\nconst allRegionsURL = `${apiEndpoint}/regional`\n\nconst regionIndex = [\n\n    {key: 0, name: 'test'}\n\n]\n\n\n\n\n\n\nconst getData = (URL) => fetch(URL).then(response => response.json())\n\nconst compileRegionIndex = () => {\n\n    getData(allRegionsURL).then(info => info.data[0].regions.map(item => {\n            regionIndex = {\n                ...regionIndex,\n                \n\n            }\n    }\n    )\n    )\n\n}\n\n\n\nexport default {\n    getData\n}"]},"metadata":{},"sourceType":"module"}