{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Start.js\";\nimport React, { Component } from 'react';\nimport { Container, Grid, Header } from 'semantic-ui-react';\nexport class Start extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      countDown: ' '\n    };\n\n    this.startMeterValueMaths = () => {\n      const maxVal = 500;\n      let intensityValue = this.props.intensityData.value / maxVal; //  console.log(intensityValue)\n      //  console.log(intensityValue * 180)\n\n      return intensityValue * 180;\n    };\n\n    this.parseDate = input => {\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n      return \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsTime), \" \").concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n    };\n\n    this.countDownToDoom = () => {\n      let output = '';\n      let deadline = new Date(\"Dec 1, 2034 00:00:00:00\").getTime(); //let x = setInterval(function() { \n\n      let now = new Date().getTime();\n      let t = deadline - now; //console.log(t)\n      //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n\n      let years = Math.floor(t / (1000 * 60 * 60 * 24 * 30.5 * 12));\n      let months = Math.floor(t % (1000 * 60 * 60 * 24 * 30.5 * 12) / (1000 * 60 * 60 * 24 * 30.5));\n      let days = Math.floor(t % (1000 * 60 * 60 * 24 * 30.5) / (1000 * 60 * 60 * 24));\n      let hours = Math.floor(t % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      let minutes = Math.floor(t % (1000 * 60 * 60) / (1000 * 60));\n      let seconds = Math.floor(t % (1000 * 60) / 1000);\n      output = \"\".concat(years, \"y \").concat(months, \"m \").concat(days, \"d \").concat(hours, \"h \").concat(minutes, \"m \").concat(seconds, \"s\");\n\n      if (t < 0) {\n        //clearInterval(x); \n        output = \"TIMES UP\";\n      }\n\n      this.setState({\n        countDown: output\n      });\n    };\n  }\n\n  componentDidMount() {\n    {\n      setInterval(() => {\n        this.countDownToDoom();\n      }, 1000);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"startmeter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gauge-a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gauge-b\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gauge-c\",\n      style: {\n        transform: \"rotate(\".concat(this.props.intensityData.value > 0 ? this.startMeterValueMaths() : 0, \"deg)\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gauge-data\",\n      id: this.props.intensityData.value > 0 ? 'loadedData' : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"percent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.intensityData.value), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), \"Hover On Me\")), React.createElement(\"div\", {\n      style: {\n        paddingLeft: '10%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"justified\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Low High\")), React.createElement(Header, {\n      as: \"h2\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Current level of carbon emmsions for GB electricity supply\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"bgPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      centered: true,\n      stackable: true,\n      columns: 2,\n      padded: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.countDown), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \" Until global warming reaches 1.5 \\xB0c\")), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \" \", this.props.emissions, \" C02-e \"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Total emissions in tonnes produced since you opened this app (C02-e)\"))))));\n  }\n\n}\nexport default Start;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Start.js"],"names":["React","Component","Container","Grid","Header","Start","state","countDown","startMeterValueMaths","maxVal","intensityValue","props","intensityData","value","parseDate","input","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","countDownToDoom","output","deadline","getTime","now","t","years","Math","floor","months","days","hours","minutes","seconds","setState","componentDidMount","setInterval","render","transform","undefined","paddingLeft","emissions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Grid, Header } from 'semantic-ui-react';\n\nexport class Start extends Component {\n    state = {\n        countDown: ' '\n    }\n\n\n    componentDidMount () {\n        {setInterval(() => {this.countDownToDoom()},1000)}\n    }\n\nstartMeterValueMaths = () => {\n            const maxVal = 500;\n            let intensityValue = this.props.intensityData.value / maxVal\n            //  console.log(intensityValue)\n            //  console.log(intensityValue * 180)\n            return intensityValue * 180\n}\n\nparseDate = (input) => {\n    let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n    let optionsTime = { hour: 'numeric', minute: 'numeric', hour12: true};\n           let parsedDate = new Date(Date.UTC(\n               parseInt(input.slice(0, 4), 10),\n               parseInt(input.slice(5, 7), 10) - 1,\n               parseInt(input.slice(8, 10), 10),\n               parseInt(input.slice(11, 13), 10),\n               parseInt(input.slice(14, 16), 10),\n             //parseInt(input.slice(13,15), 10)\n           ))\n           return (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)} ${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n   }\n\ncountDownToDoom = () => {\n\n        let output = ''\n\n        let deadline = new Date(\"Dec 1, 2034 00:00:00:00\").getTime(); \n        //let x = setInterval(function() { \n        let now = new Date().getTime(); \n        let t = deadline - now; \n        //console.log(t)\n                //let days = Math.floor(t / (1000 * 60 * 60 * 24));\n                \n                let years = Math.floor(t / (1000 * 60 * 60 * 24 * 30.5 * 12));\n                let months = Math.floor((t % (1000 * 60 * 60 * 24 * 30.5 * 12)) /(1000 * 60 * 60 * 24 * 30.5));        \n                let days = Math.floor((t % (1000 * 60 * 60 * 24 * 30.5)) /(1000 * 60 * 60 * 24));\n                let hours = Math.floor((t % (1000 * 60 * 60 * 24))/(1000 * 60 * 60)); \n                let minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60)); \n                let seconds = Math.floor((t % (1000 * 60)) / 1000);\n\n\n        output = `${years}y ${months}m ${days}d ${hours}h ${minutes}m ${seconds}s`\n\n            \n        if (t < 0) { \n                //clearInterval(x); \n                output = \"TIMES UP\" \n            } \n\n\n\n        this.setState({\n            countDown: output\n        })\n\n        }\n\n    render() {\n        return (\n            <div>\n       \n\n            <Container>\n          <div className=\"bgPanel\">\n        <br></br>\n    <div className=\"startmeter\">\n\t\t<div className=\"gauge-a\"></div>\n\t\t<div className=\"gauge-b\"></div>\n\t\t<div className=\"gauge-c\" style={{transform:`rotate(${this.props.intensityData.value > 0 ? this.startMeterValueMaths() : 0}deg)`}}></div>\n\t\t<div className=\"gauge-data\" id={this.props.intensityData.value > 0 ? 'loadedData' : undefined}><h1 id=\"percent\">{this.props.intensityData.value}</h1><br></br>Hover On Me</div>\n    </div>\n    <div style={{paddingLeft: '10%', }}>\n    <Header as='h3' textAlign='justified' >\n      Low High\n    </Header>\n    </div>\n        \n        <Header as='h2' textAlign='center'>\n        Current level of carbon emmsions for GB electricity supply\n        </Header>\n        <br></br>\n        <br></br>\n\n          </div>\n            \n\n    <div className=\"bgPanel\">\n    {/* <h4>HiHi{setInterval(() => this.countDownToDoom(), 1000)}</h4> */}\n    {/* <h4>{setInterval(() => `${this.countDownToDoom()}`,1000)}</h4> */}\n   <br></br>\n {/* columns={2} */}\n    <Grid centered stackable columns={2} padded>\n      <Grid.Column width={6}>\n      <h2>{this.state.countDown}</h2>\n   <h4> Until global warming reaches 1.5 °c</h4>      \n   </Grid.Column>\n   {/* <Grid.Column width={3}> </Grid.Column> */}\n      <Grid.Column width={6}>\n      <h2> {this.props.emissions} C02-e </h2>\n   <h4>Total emissions in tonnes produced since you opened this app (C02-e)</h4>       \n    </Grid.Column>\n    </Grid>\n\n\n    </div>\n\n\n\n\n\n    </Container>\n   \n    </div>\n            \n        );\n    }\n}\n\nexport default Start;"]},"metadata":{},"sourceType":"module"}