{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport API from './adapters/API';\nimport Nav from './components/Nav';\nimport Start from './components/Start';\nimport Forecast from './components/Forecast';\nimport Timeline from './components/Timeline';\nimport About from './components/About';\nimport Advice from './components/Advice';\nimport { ItemMeta } from 'semantic-ui-react';\nimport { cloneWithoutLoc } from '@babel/types';\nimport { Container } from 'semantic-ui-react';\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mobileUser: false,\n      screenWidth: 400,\n      setRegion: 18,\n      setPostCode: '',\n      useId: true,\n      setPeriod: 12,\n      setGran: 2,\n      mediumVal: 150,\n      middle: 150,\n      emissions: 0,\n      regionIndex: [],\n      currentLevel: {\n        region: '',\n        text: '',\n        value: 0\n      },\n      forecastA: {},\n      forecastB: {},\n      forecastC: {},\n      aggedVals: [],\n      bestPeriods: {},\n      timelineVals: []\n    };\n\n    this.now = () => {\n      let date = new Date();\n      return date.toISOString();\n    };\n\n    this.viewport = () => {\n      let e = window;\n      let a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      let dimentions = {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n      this.setState({\n        screenWidth: dimentions.width\n      });\n\n      if (dimentions.width < 600) {\n        this.setState({\n          mobileUser: true\n        });\n      }\n    };\n\n    this.calMediumLevel = () => {\n      let set = this.state.timelineVals.map(item => item.level);\n      let sum = set.reduce((acc, cur) => acc + cur); //console.log(sum)\n\n      let avg = sum / set.length;\n      this.setState({\n        mediumVal: Math.round(avg)\n      });\n    };\n\n    this.calMiddle = () => {\n      let set = this.state.timelineVals.map(item => item.level);\n      let big = set.reduce((acc, cur) => {\n        if (cur > acc) {\n          acc = cur;\n        }\n      }); //console.log(sum)\n\n      let avg = big / 2;\n      this.setState({\n        middle: Math.round(avg)\n      });\n    };\n\n    this.plus30Mins = dateTime => {\n      let newTime = dateTime.split(/\\D+/);\n      let output = new Date(Date.UTC(newTime[0], newTime[1] - 1, newTime[2], newTime[3], newTime[4], newTime[5]));\n      output.setMinutes(output.getMinutes() + 30);\n      let newdateTime = output.toISOString();\n      return newdateTime;\n    };\n\n    this.countEmmissions = () => {\n      let count = this.state.emissions += 0.0142;\n      this.setState({\n        emissions: count\n      });\n    };\n\n    this.get48hForecast = (start, useID) => {\n      if (this.state.useId && useID) {\n        API.getRegionId48HrsData(this.state.setRegion, start).then(info => this.setState({\n          forecastA: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, start).then(info => this.setState({\n          forecastA: info.data.data\n        }, {\n          setRegion: info.data.regionid\n        }));\n      }\n    };\n\n    this.getForecastB = () => {\n      const start = this.state.forecastA[this.state.forecastA.length - 1].to;\n      const startPlus30 = this.plus30Mins(start);\n      console.log(startPlus30);\n\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({\n          forecastB: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({\n          forecastB: info.data.data\n        }));\n      }\n    };\n\n    this.getForecastC = () => {\n      const start = this.state.forecastB[this.state.forecastB.length - 1].to;\n      const startPlus30 = this.plus30Mins(start);\n\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({\n          forecastC: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({\n          forecastC: info.data.data\n        }));\n      }\n    };\n\n    this.compileRegionIndex = () => {\n      this.setState({\n        regionIndex: []\n      });\n      API.getCurrentRegionalData().then(info => info.data[0].regions.map(item => {\n        this.setState({\n          regionIndex: [...this.state.regionIndex, {\n            id: item.regionid,\n            name: item.shortname\n          }]\n        });\n\n        if (item.regionid === this.state.setRegion) {\n          this.setState({\n            currentLevel: {\n              region: item.regionid,\n              text: item.intensity.index,\n              value: item.intensity.forecast\n            }\n          });\n        }\n      })).then(datainfo => console.log(datainfo));\n    };\n\n    this.allForecast = () => {\n      const allForecast = [...this.state.forecastA, ...this.state.forecastB, ...this.state.forecastC];\n      return allForecast;\n    };\n\n    this.calTextLevel = value => {\n      if (value > 360) {\n        return 'Very High';\n      } else if (value >= 260 && value <= 359) {\n        return 'High';\n      } else if (value >= 160 && value <= 259) {\n        return 'Moderate';\n      } else if (value >= 60 && value <= 159) {\n        return 'Low';\n      } else if (value >= 59 && value <= 0) {\n        return 'Very Low';\n      } else {\n        return 'Level not known';\n      }\n    };\n\n    this.determinGran = () => {\n      let newGrand = 2;\n\n      if (this.state.setPeriod <= 8) {\n        newGrand = 2;\n      } else if (this.state.setPeriod > 8 && this.state.setPeriod <= 12) {\n        newGrand = 2;\n      } else if (this.state.setPeriod > 12 && this.state.setPeriod <= 24) {\n        newGrand = 2;\n      } else if (this.state.setPeriod > 24 && this.state.setPeriod <= 48) {\n        newGrand = 2;\n      } else if (this.state.setPeriod > 48 && this.state.setPeriod <= 96) {\n        newGrand = 4;\n      } else if (this.state.setPeriod > 200) {\n        newGrand = 6;\n      }\n\n      this.setState({\n        setGran: newGrand\n      });\n      return newGrand;\n    };\n\n    this.aggForecast = (inputArray, granularity, timeline) => {\n      // const period = 8\n      // const periodUnits = 'h'\n      // const granularity = 4\n      // const forecastArray =[2,3,6,1,5,1,1,1,1,1,1,10]\n      let forecastArray = [];\n\n      if (timeline) {\n        forecastArray = [...inputArray];\n      } else {\n        forecastArray = inputArray.slice(0, this.state.setPeriod);\n      }\n\n      let agged = [];\n\n      for (let index = 0; index < forecastArray.length; index += granularity) {\n        if (index % granularity === 0) {\n          const half = forecastArray[index];\n          let set = forecastArray.slice(index, index + granularity).map(item => item.intensity.forecast); //console.log(set)\n\n          let sum = set.reduce((acc, cur) => acc + cur); //console.log(sum)\n\n          let avg = sum / set.length;\n          agged = [...agged, {\n            from: half.from,\n            level: Math.round(avg),\n            text: this.calTextLevel(avg)\n          }];\n        }\n      } //let newAgged = agged.slice(0, this.state.setPeriod)\n\n\n      if (timeline) {\n        this.setState({\n          timelineVals: agged\n        });\n      } else {\n        let best = this.bestPeriods(agged);\n        this.setState({\n          aggedVals: agged,\n          bestPeriods: best\n        });\n      } //console.log(agged)\n      //return agged\n\n    };\n\n    this.bestPeriods = objArray => {\n      let day = objArray.map(item => {\n        if (parseInt(item.from.split('T')[1]) >= 6 && parseInt(item.from.split('T')[1]) <= 23) {\n          return item;\n        }\n      });\n      let night = objArray.map(item => {\n        if (parseInt(item.from.split('T')[1]) < 6 || parseInt(item.from.split('T')[1]) === 24) {\n          return item;\n        }\n      });\n      let bestDay = day.sort((a, b) => a.level > b.level ? 1 : -1).slice(0, 3);\n      let bestNight = night.sort((a, b) => a.level > b.level ? 1 : -1).slice(0, 3);\n      return {\n        day: bestDay,\n        night: bestNight\n      };\n    };\n\n    this.updateRegion = newRegion => {\n      this.setState({\n        setRegion: newRegion\n      });\n    };\n\n    this.updatePostCode = newPostCode => {\n      this.setState({\n        setPostCode: newPostCode\n      });\n    };\n\n    this.updatePeriod = newPeriod => {\n      this.setState({\n        setPeriod: newPeriod\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.viewport();\n    this.get48hForecast(this.now(), true);\n    this.compileRegionIndex();\n    {\n      setInterval(() => {\n        this.countEmmissions();\n      }, 500);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.setRegion !== prevState.setRegion) {\n      this.get48hForecast(this.now());\n      this.compileRegionIndex();\n    } else if (this.state.setPostCode !== prevState.setPostCode) {\n      this.get48hForecast(this.now());\n    } else if (this.state.forecastA !== prevState.forecastA) {\n      return this.getForecastB(this.state.setRegion);\n    } else if (this.state.forecastB !== prevState.forecastB) {\n      return this.getForecastC(this.state.setRegion);\n    } else if (this.state.forecastC !== prevState.forecastC) {\n      return this.aggForecast(this.allForecast(), this.determinGran(), false), this.aggForecast(this.allForecast(), 2, true);\n    } else if (this.state.setPeriod !== prevState.setPeriod) {\n      return this.aggForecast(this.allForecast(), this.determinGran());\n    } else if (this.state.timelineVals !== prevState.timelineVals) {\n      return this.calMediumLevel(), this.calMiddle();\n    }\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(Start, {\n      intensityData: this.state.currentLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(Start, {\n      intensityData: this.state.currentLevel,\n      emissions: this.state.emissions.toFixed(4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/forecast-summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(Forecast, {\n      regionIndex: this.state.regionIndex,\n      setRegion: this.state.setRegion,\n      updatePostCode: this.updatePostCode,\n      setPeriod: this.state.setPeriod,\n      updateRegion: this.updateRegion,\n      updatePeriod: this.updatePeriod,\n      aggedVals: this.state.aggedVals,\n      mobileUser: this.state.mobileUser,\n      bestPeriods: this.state.bestPeriods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/forecast-timeline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(Timeline, {\n      timelineVals: this.state.timelineVals,\n      screenWidth: this.state.screenWidth,\n      middleLevel: this.state.middle,\n      mobileUser: this.state.mobileUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/advice\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(Advice, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/about\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(About, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }))))));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/App.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","API","Nav","Start","Forecast","Timeline","About","Advice","ItemMeta","cloneWithoutLoc","Container","App","state","mobileUser","screenWidth","setRegion","setPostCode","useId","setPeriod","setGran","mediumVal","middle","emissions","regionIndex","currentLevel","region","text","value","forecastA","forecastB","forecastC","aggedVals","bestPeriods","timelineVals","now","date","Date","toISOString","viewport","e","window","a","document","documentElement","body","dimentions","width","height","setState","calMediumLevel","set","map","item","level","sum","reduce","acc","cur","avg","length","Math","round","calMiddle","big","plus30Mins","dateTime","newTime","split","output","UTC","setMinutes","getMinutes","newdateTime","countEmmissions","count","get48hForecast","start","useID","getRegionId48HrsData","then","info","data","getRegionPostCode48HrsData","regionid","getForecastB","to","startPlus30","console","log","getForecastC","compileRegionIndex","getCurrentRegionalData","regions","id","name","shortname","intensity","index","forecast","datainfo","allForecast","calTextLevel","determinGran","newGrand","aggForecast","inputArray","granularity","timeline","forecastArray","slice","agged","half","from","best","objArray","day","parseInt","night","bestDay","sort","b","bestNight","updateRegion","newRegion","updatePostCode","newPostCode","updatePeriod","newPeriod","componentDidMount","setInterval","componentDidUpdate","prevProps","prevState","render","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport API from './adapters/API'\nimport Nav from './components/Nav';\nimport Start from './components/Start';\nimport Forecast from './components/Forecast';\nimport Timeline from './components/Timeline';\nimport About from './components/About';\nimport Advice from './components/Advice';\nimport { ItemMeta } from 'semantic-ui-react';\nimport { cloneWithoutLoc } from '@babel/types';\n\nimport { Container } from 'semantic-ui-react'\n\n\nexport class App extends Component {\n  \n  \n  state = {\n    mobileUser: false,\n    screenWidth:  400,\n    setRegion: 18,\n    setPostCode: '',\n    useId: true,\n    setPeriod: 12,\n    setGran: 2,\n    mediumVal: 150,\n    middle: 150,\n    emissions: 0,\n    regionIndex: [],\n    currentLevel: {region: '', text: '', value: 0},\n    forecastA: {},\n    forecastB: {},\n    forecastC: {},\n    aggedVals: [],\n    bestPeriods: {},\n    timelineVals: []\n  }\n  \n  \n//2017-08-25T12:35Z\n//[{id: 0, name: 'test'}]\n\nnow = () => {\n  let date = new Date();\n  return date.toISOString()\n}\n\nviewport = () => {\nlet e = window\nlet a = 'inner';\nif ( !( 'innerWidth' in window ) )\n{\na = 'client';\ne = document.documentElement || document.body;\n}\nlet dimentions = { width : e[ a+'Width' ] , height : e[ a+'Height' ] }\n\nthis.setState({\n  screenWidth: dimentions.width\n})\nif (dimentions.width < 600) {\n  this.setState({mobileUser: true,\n  })\n}\n}\n\ncalMediumLevel = () => {\n\n  let set = this.state.timelineVals.map(item => item.level)\n  let sum = set.reduce((acc, cur) => acc + cur)\n  //console.log(sum)\n  let avg = sum / set.length\n  \n  this.setState({\n  mediumVal: Math.round(avg)\n  })\n}\n\ncalMiddle = () => {\n  let set = this.state.timelineVals.map(item => item.level)\n  let big = set.reduce((acc, cur) => {\n    if (cur > acc){  \n    acc = cur}\n  })\n  //console.log(sum)\n  let avg = big / 2\n  this.setState({\n  middle: Math.round(avg)\n  })\n}\n\n\nplus30Mins = (dateTime) => {\n  let newTime = dateTime.split(/\\D+/);\n  let output =  new Date(Date.UTC(newTime[0], newTime[1]-1, newTime[2], newTime[3], newTime[4], newTime[5]));\n  output.setMinutes(output.getMinutes() + 30)\n  let newdateTime = output.toISOString()\n  return newdateTime\n}\n\n\n  componentDidMount () {\n    this.viewport()\n    this.get48hForecast(this.now(),true)\n    this.compileRegionIndex()\n    {setInterval(() => {this.countEmmissions()},500)}\n    \n  }\n\n\n  \n\n  componentDidUpdate (prevProps, prevState) {\n    if (this.state.setRegion !== prevState.setRegion){\n      this.get48hForecast(this.now())\n      this.compileRegionIndex()\n    }\n    else if (this.state.setPostCode !== prevState.setPostCode){\n      this.get48hForecast(this.now())\n    }\n    else if (this.state.forecastA !== prevState.forecastA)\n    {\n      return this.getForecastB(this.state.setRegion)\n    }\n    else if (this.state.forecastB !== prevState.forecastB)\n    {\n      return this.getForecastC(this.state.setRegion)\n    }\n    else if (this.state.forecastC !== prevState.forecastC)\n    {\n      return (\n        this.aggForecast(this.allForecast(), this.determinGran(), false),\n        this.aggForecast(this.allForecast(), 2, true)\n        )\n    }\n    else if (this.state.setPeriod !== prevState.setPeriod)\n    {\n      return (\n      this.aggForecast(this.allForecast(), this.determinGran()))\n    }\n    else if (this.state.timelineVals !== prevState.timelineVals) {\n      return (\n        this.calMediumLevel(),\n        this.calMiddle()\n      )\n    }\n  }\n\n  countEmmissions = () => {\n    let count = this.state.emissions += 0.0142\n    this.setState({emissions: count})\n  }\n  \nget48hForecast = (start, useID) => {\n  if (this.state.useId && useID){\n    API.getRegionId48HrsData(this.state.setRegion, start).then(info => this.setState({forecastA: info.data.data}))\n  }else {\n    API.getRegionPostCode48HrsData(this.state.setPostCode, start).then(info => this.setState({forecastA: info.data.data}, {setRegion: info.data.regionid}))\n  }\n}\ngetForecastB = () => {\n  const start = this.state.forecastA[this.state.forecastA.length - 1].to\n  const startPlus30 = this.plus30Mins(start)\n  console.log(startPlus30)\n  if (this.state.useId) {\n    API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({forecastB: info.data.data}))\n}else{\n    API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({forecastB: info.data.data}))\n  } \n}\ngetForecastC = () => {\n  const start = this.state.forecastB[this.state.forecastB.length - 1].to\n  const startPlus30 = this.plus30Mins(start)\n  if (this.state.useId) {\n    API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({forecastC: info.data.data}))\n}else{\n    API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({forecastC: info.data.data}))\n  } \n}\n\n\n\n  compileRegionIndex = () => {\n  \n    this.setState({regionIndex: []})\n    API.getCurrentRegionalData().then(info => info.data[0].regions.map(item => {\n          this.setState({\n              regionIndex: \n                [...this.state.regionIndex,\n                {id: item.regionid,\n                name: item.shortname}],\n                }\n          )\n          if (item.regionid === this.state.setRegion){\n            this.setState({\n              currentLevel: {region: item.regionid, text: item.intensity.index, value: item.intensity.forecast}\n            })\n          }\n       }\n      )\n    ).then(datainfo => console.log(datainfo))\n}\n  \n\nallForecast = () => {\n  const allForecast = [...this.state.forecastA, ...this.state.forecastB, ...this.state.forecastC]\n  return allForecast\n}\n\ncalTextLevel = (value) => {\n  if (value > 360) {\n      return 'Very High'\n  } \n  else if (value >= 260 && value <= 359 ) {\n      return 'High'\n  }\n  else if (value >= 160 && value <= 259 ) {\n      return 'Moderate'\n  } \n  else if (value >= 60 && value <= 159 ) {\n    return 'Low'\n  }\n  else if (value >= 59 && value <= 0 ) {\n    return 'Very Low'\n  }else \n  {\n    return 'Level not known'\n  }\n}\n\ndeterminGran = () => {\n let newGrand = 2\n  if (this.state.setPeriod <= 8) {\n    newGrand = 2\n  }else if (this.state.setPeriod > 8 && this.state.setPeriod <= 12) {\n    newGrand = 2\n  }else if (this.state.setPeriod > 12 && this.state.setPeriod <= 24) {\n    newGrand = 2\n  }else if (this.state.setPeriod > 24 && this.state.setPeriod <= 48) {\n    newGrand = 2\n  }else if (this.state.setPeriod > 48 && this.state.setPeriod <= 96) {\n    newGrand = 4\n  }else if (this.state.setPeriod > 200) {\n    newGrand = 6\n  }\n  this.setState({setGran: newGrand})\n  return newGrand\n}\n\naggForecast = (inputArray, granularity, timeline) => {\n \n  // const period = 8\n  // const periodUnits = 'h'\n  // const granularity = 4\n  // const forecastArray =[2,3,6,1,5,1,1,1,1,1,1,10]\n\n  let forecastArray = []\n\n  if (timeline) {\n  forecastArray = [...inputArray]\n  }else{\n  forecastArray = inputArray.slice(0, this.state.setPeriod)\n  }\n\n\nlet agged = []\n\nfor (let index = 0; index < forecastArray.length; index+=granularity) {\n \n  if (index%granularity === 0) {\n  const half = forecastArray[index];\n  let set = forecastArray.slice(index, index+granularity).map(item => item.intensity.forecast)\n      //console.log(set)\n  let sum = set.reduce((acc, cur) => acc + cur)\n      //console.log(sum)\n      let avg = sum / set.length\n  agged = [...agged, {from:half.from, level:Math.round(avg), text:this.calTextLevel(avg)}]\n}\n}\n\n//let newAgged = agged.slice(0, this.state.setPeriod)\n\n\nif (timeline){\n  this.setState({\n    timelineVals: agged,\n  })\n}else {\n  \nlet best = this.bestPeriods(agged)\n\nthis.setState({\n  aggedVals: agged,\n  bestPeriods: best\n})\n}\n//console.log(agged)\n//return agged\n}\n\n\n\n\nbestPeriods = (objArray) => {\n\nlet day = objArray.map(item => {\n  if (parseInt(item.from.split('T')[1]) >= 6 && parseInt(item.from.split('T')[1]) <= 23){\n    return item\n  } \n})\n\nlet night = objArray.map(item => {\n  if (parseInt(item.from.split('T')[1]) < 6 || parseInt(item.from.split('T')[1]) === 24){\n    return item\n  } \n})\n\nlet bestDay = day.sort((a, b) => (a.level > b.level) ? 1 : -1).slice(0,3)\nlet bestNight = night.sort((a, b) => (a.level > b.level) ? 1 : -1).slice(0,3)\n\nreturn {day:bestDay, night:bestNight}\n\n}\n\nupdateRegion = (newRegion) => {\nthis.setState({setRegion: newRegion})\n}\n\nupdatePostCode = (newPostCode => {\n  this.setState({setPostCode: newPostCode})\n})\nupdatePeriod = (newPeriod) => {\nthis.setState({setPeriod: newPeriod})\n}\n\n\n\n  render() {\n    return (\n\n\n<Router>\n\n\n<div>\n     \n<Nav/>\n\n<Container>\n\n<Switch>\n\n    <Route exact path=\"/\">\n          <Start intensityData={this.state.currentLevel}/>\n    </Route>\n    <Route path=\"/start\" >\n          <Start intensityData={this.state.currentLevel} emissions={this.state.emissions.toFixed(4)}/>\n    </Route>\n    <Route path=\"/forecast-summary\">\n          <Forecast regionIndex={this.state.regionIndex} setRegion={this.state.setRegion} updatePostCode={this.updatePostCode} setPeriod={this.state.setPeriod}\n                    updateRegion={this.updateRegion} updatePeriod={this.updatePeriod} aggedVals={this.state.aggedVals}\n                    mobileUser={this.state.mobileUser} bestPeriods={this.state.bestPeriods}\n          />\n    </Route>\n    <Route path=\"/forecast-timeline\">\n          <Timeline timelineVals={this.state.timelineVals} screenWidth={this.state.screenWidth} middleLevel={this.state.middle} mobileUser={this.state.mobileUser}/>\n    </Route>\n    <Route path=\"/advice\">\n          <Advice />\n    </Route>\n    <Route path=\"/about\">\n          <About />\n    </Route>\n\n</Switch>\n      \n</Container>\n</div>\n\n</Router>\n\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}