{"ast":null,"code":"import _classCallCheck from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Dropdown,Search,Table,Grid,Card,Button,Image,Segment,Container}from'semantic-ui-react';import SummaryChart from'./SummaryChart';import PostCodeSearch from'./PostCodeSearch';export var Forecast=/*#__PURE__*/function(_Component){_inherits(Forecast,_Component);function Forecast(){var _getPrototypeOf2;var _this;_classCallCheck(this,Forecast);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Forecast)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={period:48,region:18,loading:true,sortByLevel:false,bestPeriodDisplayDay:true,bestPeriodLoaded:false,bestPeriodsDay:[{description:\"Loading \\n Loading \\n Loading\"}],bestPeriodsNight:[{description:\"Loading \\n Loading \\n Loading\"}]};_this.periodOptions=[{key:6,text:'+6 hours',value:12//   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n},{key:8,text:'+8 hours',value:16},{key:12,text:'+12 hours',value:24},{key:24,text:'+24 hours',value:48},{key:48,text:'+48 hours',value:96},{key:100,text:'Max',value:500}];_this.isLoading=function(){if(_this.props.aggedVals===[]||typeof _this.props.aggedVals==='undefined'){_this.setState({loading:true});}else{_this.setState({loading:false});}};_this.parseDate=function(input){var optionsDate={weekday:'short',day:'numeric',month:'numeric'};var optionsTime={hour:'numeric',minute:'numeric',hour12:true};var parsedDate=new Date(Date.UTC(parseInt(input.slice(0,4),10),parseInt(input.slice(5,7),10)-1,parseInt(input.slice(8,10),10),parseInt(input.slice(11,13),10),parseInt(input.slice(14,16),10)//parseInt(input.slice(13,15), 10)\n));return\"\".concat(parsedDate.toLocaleString(\"en-GB\",optionsTime),\" \").concat(parsedDate.toLocaleString(\"en-GB\",optionsDate));};_this.genRegionOptions=function(){var output=_this.props.regionIndex.map(function(obj){return{key:obj.id,text:obj.name,value:obj.id};});output.sort(function(a,b){return a.key<b.key?1:-1;});return output;};_this.setPeriod=function(event,data){console.log(data.value);_this.setState({period:data.value});};_this.setRegion=function(event,data){console.log(data.value);_this.setState({region:data.value});};_this.controlSort=function(){var newProps=_this.props.aggedVals;if(_this.state.sortByLevel==!true){newProps=_this.props.aggedVals.sort(function(a,b){return Date.parse(a.from)>Date.parse(b.from)?1:-1;});}else if(_this.state.sortByLevel===true){newProps=_this.props.aggedVals.sort(function(a,b){return a.level>b.level?1:-1;});}return newProps;};_this.handleSortButton=function(event){var newVal=_this.state.sortByLevel?false:true;_this.setState({sortByLevel:newVal});};_this.handleDayNightButton=function(event){var newVal=_this.state.bestPeriodDisplayDay?false:true;_this.setState({bestPeriodDisplayDay:newVal});};_this.renderBestPeriods=function(){//let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\nvar bestDay=_this.props.bestPeriods.day;var bestNight=_this.props.bestPeriods.night;var dayOutput=[];var nightOutput=[];if(typeof bestDay[0]!=='undefined'&&typeof bestDay[1]!=='undefined'&&typeof bestDay[2]!=='undefined'){dayOutput=[//header:      `${bestDay.from}`,\n{description:\"\".concat(_this.parseDate(bestDay[0].from),\"\\n\").concat(bestDay[0].level,\"\\n\").concat(bestDay[0].text)},{description:\"\".concat(_this.parseDate(bestDay[1].from),\"\\n\").concat(bestDay[1].level,\"\\n\").concat(bestDay[1].text)},{description:\"\".concat(_this.parseDate(bestDay[2].from),\"\\n\").concat(bestDay[2].level,\"\\n\").concat(bestDay[2].text)}];}else{dayOutput=[{description:\"Please change period to include night-time hours \"}];}if(typeof bestNight[0]!=='undefined'&&typeof bestNight[1]!=='undefined'&&typeof bestNight[2]!=='undefined'){nightOutput=[//header:      `${bestDay.from}`,\n{description:\"\".concat(_this.parseDate(bestNight[0].from),\"\\n\").concat(bestNight[0].level,\"\\n\").concat(bestNight[0].text)},{description:\"\".concat(_this.parseDate(bestNight[1].from),\"\\n\").concat(bestNight[1].level,\"\\n\").concat(bestNight[1].text)},{description:\"\".concat(_this.parseDate(bestNight[2].from),\"\\n\").concat(bestNight[2].level,\"\\n\").concat(bestNight[2].text)}];}else{nightOutput=[{description:\"Please change period to include night-time hours \"}];}_this.setState({bestPeriodsDay:dayOutput,bestPeriodsNight:nightOutput});// return output\n};return _this;}_createClass(Forecast,[{key:\"componentDidMount\",value:function componentDidMount(){if(typeof this.props.bestPeriods!=='undefined'){if(typeof this.props.bestPeriods.day!=='undefined'||typeof this.props.bestPeriods.night!=='undefined'){if(typeof this.props.bestPeriods.day[0]!=='undefined'||typeof this.props.bestPeriods.night[0]!=='undefined'){this.renderBestPeriods();}}}this.isLoading();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){if(this.props.bestPeriods!==prevProps.bestPeriods){this.renderBestPeriods();}if(this.props.aggedVals!==prevProps.aggedVals){this.isLoading();}}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",null,React.createElement(\"div\",null,React.createElement(Grid,{columns:\"2\"},React.createElement(Grid.Row,null,React.createElement(Grid.Column,{floated:\"left\"},React.createElement(Dropdown,{placeholder:\"Period\",selection:\"2\",options:this.periodOptions,onChange:function onChange(event,data){return _this2.props.updatePeriod(data.value);}})),React.createElement(Grid.Column,{floated:\"left\"},React.createElement(PostCodeSearch,{updatePostCode:this.props.updatePostCode}))),React.createElement(Grid.Row,null,React.createElement(Grid.Column,{floated:\"left\"},React.createElement(Dropdown,{placeholder:\"Region\",selection:true,options:this.genRegionOptions(),onChange:function onChange(event,data){return _this2.props.updateRegion(data.value);}})),React.createElement(Grid.Column,{floated:\"left\"},React.createElement(\"p\",null,\"Yep thats right I'm some text!\"))))),React.createElement(\"div\",null,React.createElement(\"p\",{onClick:this.handleDayNightButton},\"Top 3 times to use electricity duiring this period:\",React.createElement(\"br\",null),this.state.bestPeriodDisplayDay?React.createElement(\"b\",null,\"Show Daytime\"):\"Show Daytime | \",this.state.bestPeriodDisplayDay?\" | Show Night-time\":React.createElement(\"b\",null,\"Show Night-time\")),React.createElement(Card.Group,{itemsPerRow:3,items:this.state.bestPeriodDisplayDay?this.state.bestPeriodsDay:this.state.bestPeriodsNight})),React.createElement(\"div\",{id:\"summary-chart\"},React.createElement(SummaryChart,{aggedVals:this.controlSort(),sortTrigger:this.state.sortByLevel,mobileUser:this.props.mobileUser})),React.createElement(\"button\",{class:\"ui button\",onClick:this.handleSortButton},\"Sort By \",this.state.sortByLevel?'Time':'Intensity Level'));}}]);return Forecast;}(Component);export default Forecast;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js"],"names":["React","Component","Dropdown","Search","Table","Grid","Card","Button","Image","Segment","Container","SummaryChart","PostCodeSearch","Forecast","state","period","region","loading","sortByLevel","bestPeriodDisplayDay","bestPeriodLoaded","bestPeriodsDay","description","bestPeriodsNight","periodOptions","key","text","value","isLoading","props","aggedVals","setState","parseDate","input","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","parsedDate","Date","UTC","parseInt","slice","toLocaleString","genRegionOptions","output","regionIndex","map","obj","id","name","sort","a","b","setPeriod","event","data","console","log","setRegion","controlSort","newProps","parse","from","level","handleSortButton","newVal","handleDayNightButton","renderBestPeriods","bestDay","bestPeriods","bestNight","night","dayOutput","nightOutput","prevProps","prevState","updatePeriod","updatePostCode","updateRegion","mobileUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Search, Table, Grid, Card, Button, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nimport PostCodeSearch from './PostCodeSearch';\n\nexport class Forecast extends Component {\n\n\nstate = {\n    period: 48,\n    region: 18,\n    loading: true,\n    sortByLevel: false,\n    bestPeriodDisplayDay: true,\n    bestPeriodLoaded: false,\n    bestPeriodsDay: [{description: `Loading \\n Loading \\n Loading`}],\n    bestPeriodsNight: [{description: `Loading \\n Loading \\n Loading`}]\n}\n\ncomponentDidMount () {\n    if (typeof this.props.bestPeriods !== 'undefined'){\n       if (typeof this.props.bestPeriods.day !== 'undefined' || typeof this.props.bestPeriods.night !== 'undefined'){\n            if (typeof this.props.bestPeriods.day[0] !== 'undefined' || typeof this.props.bestPeriods.night[0] !== 'undefined'){\n                this.renderBestPeriods()\n    }\n    }\n}\n\nthis.isLoading()\n\n}\n\ncomponentDidUpdate (prevProps, prevState) {\n    if (this.props.bestPeriods !== prevProps.bestPeriods){\n        this.renderBestPeriods()\n    }\n\n    if (this.props.aggedVals !== prevProps.aggedVals) {\n        this.isLoading()\n    }\n}\n    periodOptions = [\n            {\n              key: 6,\n              text: '+6 hours',\n              value: 12,\n            //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n            },\n            {\n              key: 8,\n              text: '+8 hours',\n              value: 16,\n            },\n            {\n              key: 12,\n              text: '+12 hours',\n              value: 24,\n            },\n            {\n              key: 24,\n              text: '+24 hours',\n              value: 48,\n            },\n            {\n              key: 48,\n              text: '+48 hours',\n              value: 96,\n            },\n            {\n              key: 100,\n              text: 'Max',\n              value: 500,\n            },\n          ]\n\nisLoading = () => {\n    if (this.props.aggedVals === [] || typeof this.props.aggedVals === 'undefined'){\n        this.setState({loading: true})\n    }else {this.setState({loading: false})}\n}\n\n        \n          parseDate = (input) => {\n            let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n            let optionsTime = { hour: 'numeric', minute: 'numeric', hour12: true};\n                   let parsedDate = new Date(Date.UTC(\n                       parseInt(input.slice(0, 4), 10),\n                       parseInt(input.slice(5, 7), 10) - 1,\n                       parseInt(input.slice(8, 10), 10),\n                       parseInt(input.slice(11, 13), 10),\n                       parseInt(input.slice(14, 16), 10),\n                     //parseInt(input.slice(13,15), 10)\n                   ))\n                   return (`${parsedDate.toLocaleString(\"en-GB\", optionsTime)} ${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n           }\n\n\n          genRegionOptions = () => {\n          let output = this.props.regionIndex.map(obj => {\n                return {key: obj.id, text: obj.name, value: obj.id}\n            })\n            output.sort((a,b) => (a.key < b.key) ? 1 : -1)\n            return output\n        }\n\n        setPeriod = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                period: data.value\n            })\n        }\n        setRegion = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                region: data.value\n            })\n        }\n\n        controlSort = () => {\n            let newProps = this.props.aggedVals\n          if (this.state.sortByLevel ==! true){\n           newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.from) > Date.parse(b.from)? 1 : -1))\n            }\n            else if (this.state.sortByLevel === true){\n                newProps = this.props.aggedVals.sort((a,b) => a.level > b.level? 1 : -1)\n            }\n                 return newProps\n        }\n\n        handleSortButton = (event) => {\n            let newVal = this.state.sortByLevel ? false : true\n            this.setState({sortByLevel: newVal})\n        } \n        handleDayNightButton = (event) => {\n            let newVal = this.state.bestPeriodDisplayDay ? false : true\n            this.setState({bestPeriodDisplayDay: newVal})\n        }\n\n        \n\n    renderBestPeriods = () => {\n                \n        //let bestDay = this.props.bestPeriods.length > 0 ? this.props.bestPeriods.day : [ {from: 'Loading',level:'Loading',text:'Loading'} ]\n        let bestDay =   this.props.bestPeriods.day\n        let bestNight = this.props.bestPeriods.night\n        \n        let dayOutput = []\n        let nightOutput = []\n\n        if (typeof bestDay[0] !== 'undefined' && typeof bestDay[1] !== 'undefined' && typeof bestDay[2] !== 'undefined') {\n        dayOutput = [\n                        //header:      `${bestDay.from}`,\n                       { description:  `${this.parseDate(bestDay[0].from)}\\n${bestDay[0].level}\\n${bestDay[0].text}`},\n                       { description:  `${this.parseDate(bestDay[1].from)}\\n${bestDay[1].level}\\n${bestDay[1].text}`},\n                       { description:  `${this.parseDate(bestDay[2].from)}\\n${bestDay[2].level}\\n${bestDay[2].text}`},\n                ]}else{\n        dayOutput = [  { description:  `Please change period to include night-time hours `}]\n                }\n\n        if (typeof bestNight[0] !== 'undefined' && typeof bestNight[1] !== 'undefined' && typeof bestNight[2] !== 'undefined'){\n        nightOutput = [\n                        //header:      `${bestDay.from}`,\n                       { description:  `${this.parseDate(bestNight[0].from)}\\n${bestNight[0].level}\\n${bestNight[0].text}`},\n                       { description:  `${this.parseDate(bestNight[1].from)}\\n${bestNight[1].level}\\n${bestNight[1].text}`},\n                       { description:  `${this.parseDate(bestNight[2].from)}\\n${bestNight[2].level}\\n${bestNight[2].text}`},\n                    ]\n                }else {\n                   nightOutput = [  { description:  `Please change period to include night-time hours `}]\n\n            }\n            \n        this.setState({\n            bestPeriodsDay: dayOutput,\n            bestPeriodsNight: nightOutput\n        })\n       // return output\n    } \n\n\n\n    render() {\n        return (\n\n            <div>\n\n            <div>\n                {/* <h1> Hi, it's me forecast! Hows things?</h1> */}\n\n<Grid columns='2' >\n<Grid.Row>\n   \n   <Grid.Column floated='left'>      \n    <Dropdown\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n      \n       </Grid.Column>\n       <Grid.Column floated='left'>\n   <PostCodeSearch updatePostCode={this.props.updatePostCode}/>\n   \n   </Grid.Column>\n\n</Grid.Row>\n\n\n<Grid.Row>\n   \n    <Grid.Column floated='left'>      \n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => this.props.updateRegion(data.value)}\n        />\n       \n\n\n\n        </Grid.Column>\n        <Grid.Column floated='left'>\n    <p>Yep thats right I'm some text!</p>\n\n\n\n    </Grid.Column>\n \n </Grid.Row>\n </Grid>\n</div>\n<div>\n    {/* <button class=\"ui button\" onClick={this.handleDayNightButton}>Show {this.state.bestPeriodDisplayDay ? 'Daytime' : 'Night-time'}</button> */}\n    <p onClick={this.handleDayNightButton}>Top 3 times to use electricity duiring this period:\n    <br></br>\n     {this.state.bestPeriodDisplayDay ?  <b>Show Daytime</b> : `Show Daytime | `}   \n     {this.state.bestPeriodDisplayDay ?  ` | Show Night-time` : <b>Show Night-time</b>} \n     </p>\n\n <Card.Group  itemsPerRow={3} items={this.state.bestPeriodDisplayDay ? this.state.bestPeriodsDay : this.state.bestPeriodsNight} />\n</div>\n\n\n\n<div id=\"summary-chart\" >\n\n<SummaryChart aggedVals={this.controlSort()} sortTrigger={this.state.sortByLevel} mobileUser={this.props.mobileUser}/>\n</div>\n<button class=\"ui button\" onClick={this.handleSortButton}>Sort By {this.state.sortByLevel ? 'Time' : 'Intensity Level'}</button>\n</div>\n        );\n    }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}