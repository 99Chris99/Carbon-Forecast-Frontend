{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js\";\nimport _ from 'lodash';\nimport PostcodeJsLkp from '../content/PostcodeJsLkp';\nimport React, { Component } from 'react';\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react';\nconst initialState = {\n  isLoading: false,\n  results: [{\n    title: ''\n  }],\n  value: '',\n  oneResult: false\n}; // const source = ([{\n//   title: `faker.company.companyName()`,\n//   description: 'faker.company.catchPhrase()',\n//   //image: 'faker.internet.avatar()',\n//   price: 100},\n//   {title: `A`,\n//   description: 'AAaaaa',\n// //   image: 'faker.internet.avatar()',\n//   price: 234,\n// }]\n\nconst source = PostcodeJsLkp.postcodes;\nexport default class PostCodeSearch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleResultSelect = (e, {\n      result\n    }) => this.setState({\n      value: result.title\n    });\n\n    this.handleSearchChange = (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(source, isMatch)\n        });\n      }, 300);\n    };\n\n    this.oneResultCheck = () => {\n      if (this.state.results.length === 1) {\n        this.setState({\n          oneResult: true\n        });\n        return this.props.updatePostCode(this.state.value);\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (typeof this.state) if (this.state.results[0].title !== prevState.results[0].title) {\n      this.oneResultCheck();\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value,\n          results = _this$state.results;\n    return React.createElement(Search, Object.assign({\n      loading: isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: results,\n      value: value\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js"],"names":["_","PostcodeJsLkp","React","Component","Search","Grid","Header","Segment","initialState","isLoading","results","title","value","oneResult","source","postcodes","PostCodeSearch","state","handleResultSelect","e","result","setState","handleSearchChange","setTimeout","length","re","RegExp","escapeRegExp","isMatch","test","filter","oneResultCheck","props","updatePostCode","componentDidUpdate","prevProps","prevState","render","debounce","leading"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport PostcodeJsLkp from '../content/PostcodeJsLkp';\nimport React, { Component } from 'react'\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\n\nconst initialState = { isLoading: false, results: [{title:''}], value: '', oneResult: false }\n\n\n\n\n// const source = ([{\n//   title: `faker.company.companyName()`,\n//   description: 'faker.company.catchPhrase()',\n//   //image: 'faker.internet.avatar()',\n//   price: 100},\n//   {title: `A`,\n//   description: 'AAaaaa',\n// //   image: 'faker.internet.avatar()',\n//   price: 234,\n// }]\n\nconst source = (\n    PostcodeJsLkp.postcodes\n)\n\n\n\nexport default class PostCodeSearch extends Component {\n  state = initialState\n\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n\n    }, 300)\n\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    if (typeof this.state)\n    if (this.state.results[0].title !== prevState.results[0].title){\n       this.oneResultCheck() \n    }\n  }\n\n  oneResultCheck = () => {\n      if (this.state.results.length === 1) {\n          this.setState({oneResult: true})\n        return  this.props.updatePostCode(this.state.value)\n      }\n      }\n  \n\n  render() {\n    const { isLoading, value, results } = this.state\n\n    return (\n      \n          <Search\n            loading={isLoading}\n            onResultSelect={this.handleResultSelect}\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\n              leading: true,\n            })}\n            results={results}\n            value={value}\n            {...this.props}\n          />\n        \n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}