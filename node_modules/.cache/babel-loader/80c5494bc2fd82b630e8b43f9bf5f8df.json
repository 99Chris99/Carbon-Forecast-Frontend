{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport API from './adapters/API';\nimport Nav from './components/Nav';\nimport Start from './components/Start';\nimport Forecast from './components/Forecast';\nimport About from './components/About';\nimport Advice from './components/Advice';\nimport { ItemMeta } from 'semantic-ui-react';\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      setRegion: 18,\n      setPostCode: '',\n      useId: true,\n      regionIndex: [{\n        id: 0,\n        name: 'test'\n      }],\n      currentLevel: {\n        region: '',\n        text: '',\n        value: 0\n      },\n      forecastA: {},\n      forecastB: {},\n      forecastC: {}\n    };\n\n    this.now = () => {\n      let date = new Date();\n      return date.toISOString();\n    };\n\n    this.plus30Mins = dateTime => {\n      let newTime = dateTime.split(/\\D+/);\n      let output = new Date(Date.UTC(newTime[0], newTime[1] - 1, newTime[2], newTime[3], newTime[4], newTime[5]));\n      output.setMinutes(output.getMinutes() + 30);\n      let newdateTime = output.toISOString();\n      return newdateTime;\n    };\n\n    this.get48hForecast = start => {\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, start).then(info => this.setState({\n          forecastA: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, start).then(info => this.setState({\n          forecastA: info.data.data\n        }, {\n          setRegion: info.data.regionid\n        }));\n      }\n    };\n\n    this.getForecastB = () => {\n      const start = this.state.forecastA[this.state.forecastA.length - 1].to;\n      const startPlus30 = this.plus30Mins(start);\n      console.log(startPlus30);\n\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({\n          forecastB: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({\n          forecastB: info.data.data\n        }));\n      }\n    };\n\n    this.getForecastC = () => {\n      const start = this.state.forecastB[this.state.forecastB.length - 1].to;\n      const startPlus30 = this.plus30Mins(start);\n\n      if (this.state.useId) {\n        API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({\n          forecastC: info.data.data\n        }));\n      } else {\n        API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({\n          forecastC: info.data.data\n        }));\n      }\n    };\n\n    this.compileRegionIndex = () => {\n      API.getCurrentRegionalData().then(info => info.data[0].regions.map(item => {\n        this.setState({\n          regionIndex: [...this.state.regionIndex, {\n            id: item.regionid,\n            name: item.shortname\n          }]\n        });\n\n        if (item.regionid === this.state.setRegion) {\n          this.setState({\n            currentLevel: {\n              region: item.regionid,\n              text: item.intensity.index,\n              value: item.intensity.forecast\n            }\n          });\n        }\n      })).then(datainfo => console.log(datainfo));\n    };\n\n    this.allForecast = () => {\n      const allForecast = [...this.state.forecastA, ...this.state.forecastB, ...this.state.forecastC];\n      return allForecast;\n    };\n\n    this.calBestPeriods = (forecastArray, granularity) => {\n      // const period = 8\n      // const periodUnits = 'h'\n      // const granularity = 4\n      // const forecastArray =[2,3,6,1,5,1,1,1,1,1,1,10]\n      let agged = [];\n\n      for (let index = 0; index < forecastArray.length; index += granularity) {\n        const half = forecastArray[index];\n        let set = forecastArray.slice(index, index + granularity);\n        console.log(set);\n        let sum = set.reduce((acc, cur) => acc + cur.intensity.fore);\n        console.log(sum);\n        let avg = sum / set.length;\n        agged = [...agged, avg];\n      }\n\n      console.log(agged);\n      return agged;\n    };\n  }\n\n  componentDidMount() {\n    this.get48hForecast(this.now());\n    this.compileRegionIndex();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.forecastA !== prevState.forecastA) {\n      return this.getForecastB(this.state.setRegion);\n    } else if (this.state.forecastB !== prevState.forecastB) {\n      return this.getForecastC(this.state.setRegion);\n    } else if (this.state.forecastB !== prevState.forecastB) {\n      return this.calBestPeriods(this.allForecast(), 4);\n    }\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Start, {\n      intensityData: this.state.currentLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Start, {\n      intensityData: this.state.currentLevel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/forecast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Forecast, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/advice\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(Advice, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })), React.createElement(Route, {\n      path: \"/about\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(About, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })))));\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/App.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","API","Nav","Start","Forecast","About","Advice","ItemMeta","App","state","setRegion","setPostCode","useId","regionIndex","id","name","currentLevel","region","text","value","forecastA","forecastB","forecastC","now","date","Date","toISOString","plus30Mins","dateTime","newTime","split","output","UTC","setMinutes","getMinutes","newdateTime","get48hForecast","start","getRegionId48HrsData","then","info","setState","data","getRegionPostCode48HrsData","regionid","getForecastB","length","to","startPlus30","console","log","getForecastC","compileRegionIndex","getCurrentRegionalData","regions","map","item","shortname","intensity","index","forecast","datainfo","allForecast","calBestPeriods","forecastArray","granularity","agged","half","set","slice","sum","reduce","acc","cur","fore","avg","componentDidMount","componentDidUpdate","prevProps","prevState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport API from './adapters/API'\nimport Nav from './components/Nav';\nimport Start from './components/Start';\nimport Forecast from './components/Forecast';\nimport About from './components/About';\nimport Advice from './components/Advice';\nimport { ItemMeta } from 'semantic-ui-react';\n\n\nexport class App extends Component {\n  \n  \n  state = {\n    setRegion: 18,\n    setPostCode: '',\n    useId: true,\n    regionIndex: [{id: 0, name: 'test'}],\n    currentLevel: {region: '', text: '', value: 0},\n    forecastA: {},\n    forecastB: {},\n    forecastC: {}\n  }\n  \n  \n//2017-08-25T12:35Z\n\n\nnow = () => {\n  let date = new Date();\n  return date.toISOString()\n}\n\nplus30Mins = (dateTime) => {\n  let newTime = dateTime.split(/\\D+/);\n  let output =  new Date(Date.UTC(newTime[0], newTime[1]-1, newTime[2], newTime[3], newTime[4], newTime[5]));\n  output.setMinutes(output.getMinutes() + 30)\n  let newdateTime = output.toISOString()\n  return newdateTime\n}\n\n\n\n\n  componentDidMount () {\n    this.get48hForecast(this.now())\n    this.compileRegionIndex()\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    if (this.state.forecastA !== prevState.forecastA)\n    {\n      return this.getForecastB(this.state.setRegion)\n    }\n    else if (this.state.forecastB !== prevState.forecastB)\n    {\n      return this.getForecastC(this.state.setRegion)\n    }\n    else if (this.state.forecastB !== prevState.forecastB)\n    {\n      return this.calBestPeriods(this.allForecast(), 4)\n    }\n  }\n  \nget48hForecast = (start) => {\n  if (this.state.useId){\n    API.getRegionId48HrsData(this.state.setRegion, start).then(info => this.setState({forecastA: info.data.data}))\n  }else {\n    API.getRegionPostCode48HrsData(this.state.setPostCode, start).then(info => this.setState({forecastA: info.data.data}, {setRegion: info.data.regionid}))\n  }\n}\ngetForecastB = () => {\n  const start = this.state.forecastA[this.state.forecastA.length - 1].to\n  const startPlus30 = this.plus30Mins(start)\n  console.log(startPlus30)\n  if (this.state.useId) {\n    API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({forecastB: info.data.data}))\n}else{\n    API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({forecastB: info.data.data}))\n  } \n}\ngetForecastC = () => {\n  const start = this.state.forecastB[this.state.forecastB.length - 1].to\n  const startPlus30 = this.plus30Mins(start)\n  if (this.state.useId) {\n    API.getRegionId48HrsData(this.state.setRegion, startPlus30).then(info => this.setState({forecastC: info.data.data}))\n}else{\n    API.getRegionPostCode48HrsData(this.state.setPostCode, startPlus30).then(info => this.setState({forecastC: info.data.data}))\n  } \n}\n\n\n\n  compileRegionIndex = () => {\n    API.getCurrentRegionalData().then(info => info.data[0].regions.map(item => {\n          this.setState({\n              regionIndex: \n                [...this.state.regionIndex,\n                {id: item.regionid,\n                name: item.shortname}],\n                }\n          )\n          if (item.regionid === this.state.setRegion){\n            this.setState({\n              currentLevel: {region: item.regionid, text: item.intensity.index, value: item.intensity.forecast}\n            })\n          }\n       }\n      )\n    ).then(datainfo => console.log(datainfo))\n}\n  \n\nallForecast = () => {\n  const allForecast = [...this.state.forecastA, ...this.state.forecastB, ...this.state.forecastC]\n  return allForecast\n\n}\n\n\ncalBestPeriods = (forecastArray, granularity) => {\n  \n  // const period = 8\n  // const periodUnits = 'h'\n  // const granularity = 4\n  // const forecastArray =[2,3,6,1,5,1,1,1,1,1,1,10]\n\nlet agged = []\n\nfor (let index = 0; index < forecastArray.length; index+=granularity) {\n  const half = forecastArray[index];\n  let set = forecastArray.slice(index, index+granularity)\n      console.log(set)\n  let sum = set.reduce((acc, cur) => acc + cur.intensity.fore)\n      console.log(sum)\n      let avg = sum / set.length\n  agged = [...agged, avg]\n}\n\n\nconsole.log(agged)\nreturn agged\n}\n\n\n\n\n\n\n\n  \n  render() {\n    return (\n\n\n<Router>\n\n\n<div>\n     \n<Nav />\n\n<Switch>\n\n\n    <Route exact path=\"/\">\n          <Start intensityData={this.state.currentLevel}/>\n    </Route>\n    <Route path=\"/start\" >\n          <Start intensityData={this.state.currentLevel}/>\n    </Route>\n    <Route path=\"/forecast\">\n          <Forecast />\n    </Route>\n    <Route path=\"/advice\">\n          <Advice />\n    </Route>\n    <Route path=\"/about\">\n          <About />\n    </Route>\n\n</Switch>\n      \n</div>\n\n</Router>\n\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}