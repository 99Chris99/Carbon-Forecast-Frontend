{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js\";\nimport React, { Component } from 'react';\nimport { XYPlot, LineSeries, MarkSeries, HorizontalGridLines, Hint, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries } from 'react-vis';\nimport { Sticky, Header, Table } from 'semantic-ui-react';\nimport { withScroll } from 'react-window-decorators'; // @withScroll\n\nclass Timeline extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rawData: [{\n        y: 0,\n        x: 0,\n        label: 'loading | loadidng'\n      }],\n      barPosition: {\n        date: '',\n        offset: 0\n      },\n      labelData: [{\n        lable: 'Testing'\n      }],\n      height: 50,\n      middle: typeof this.props.middle !== 'undefined' ? this.props.mediumLevel : 150,\n      value: null,\n      // position:1000,\n      stickyTop: 0,\n      plotTop: 0,\n      gapVal: 1000,\n      scrollCount: 0,\n      initalScrollCounter: 0,\n      dataIndex: -1,\n      position: this.props.scrollPositionY,\n      scrollPlots: [],\n      getLevel: 0\n    };\n\n    this.chartGap = () => {\n      const chartTop = document.querySelector('.rv-xy-plot__grid-lines'); // console.log('clientHeight '+ chartTop.clientHeight )\n\n      let height = chartTop.getBoundingClientRect();\n      return height.height / this.state.rawData.length;\n    };\n\n    this.scrollPlots = () => {\n      let gap = this.chartGap();\n      console.log(gap);\n      let scrollPlots = this.state.rawData.map((point, index) => {\n        let data = {\n          y: gap * (index + 1),\n          level: point.x\n        };\n        return data;\n      });\n      this.setState({\n        scrollPlots: scrollPlots\n      });\n    };\n\n    this.getLevel = () => {\n      if (this.state.scrollPlots.length > 1) {\n        let currY = this.props.scrollPositionY;\n        let newArray = this.state.scrollPlots.map(obj => {\n          return obj.y;\n        });\n        let closest = newArray.reduce((prev, curr) => {\n          return Math.abs(curr - currY) < Math.abs(prev - currY) ? curr : prev;\n        });\n        let found = this.state.scrollPlots.find(obj => {\n          return obj.y === closest;\n        });\n        return this.setState({\n          currentLevel: found.level\n        });\n      } //return found.level \n\n    };\n\n    this.manageScrollDisplay = () => {\n      let initalScrollCounter = this.state.initalScrollCounter < 1 ? this.state.gapVal + this.state.stickyTop : this.state.initalScrollCounter; //let dataIndex = 0\n\n      if (this.props.scrollPositionY >= initalScrollCounter) {\n        console.log('I love you chris!'); //this.setState({scrollCount: initalScrollCounter})\n\n        if (this.props.scrollPositionY >= initalScrollCounter + Math.abs(this.state.scrollCount)) {\n          //let newVal = this.state.scrollCount + this.state.gapVal\n          const step = this.state.chartTop - this.state.plotTop;\n          console.log(\"Youve got this\" + this.state.scrollCount);\n          console.log(this.state.scrollCount);\n          const scroll = this.state.scrollCount + step;\n          let newIndex = this.state.dataIndex + 1;\n          this.setState({\n            scrollCount: scroll,\n            dataIndex: newIndex\n          });\n        }\n      }\n    };\n\n    this.parseDate = (input, timeOrDate) => {\n      let output = 0;\n      let optionsDate = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'numeric'\n      };\n      let optionsTime = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      };\n      let options24 = {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: false\n      };\n      let parsedDate = new Date(Date.UTC(parseInt(input.slice(0, 4), 10), parseInt(input.slice(5, 7), 10) - 1, parseInt(input.slice(8, 10), 10), parseInt(input.slice(11, 13), 10), parseInt(input.slice(14, 16), 10) //parseInt(input.slice(13,15), 10)\n      ));\n\n      if (timeOrDate === 'time') {\n        output = parsedDate.toLocaleString(\"en-GB\", optionsTime);\n      } else if (timeOrDate === 'date') {\n        output = \"\".concat(parsedDate.toLocaleString(\"en-GB\", optionsDate));\n      } else if (timeOrDate === '24') {\n        output = parsedDate.toLocaleString(\"en-GB\", options24);\n      }\n\n      return output;\n    };\n\n    this.lowCarbonLabel = item => {\n      let output = '';\n\n      if (item.text.split(' ')[0] === 'Low' || item.text.split(' ')[1] === 'Low') {\n        output = 'This is a good time to use electricity!';\n      }\n\n      return output;\n    };\n\n    this.formatData = () => {\n      let data = [];\n      let labelData = [];\n      let dayLabels = [];\n      let middleVal = this.props.middle; //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n      if (this.props.timelineVals !== []) {\n        this.props.timelineVals.map((item, index) => {\n          let bar = {\n            x: item.level - 10,\n            y: -index,\n            label: \"\".concat(this.lowCarbonLabel(item)),\n            yOffset: -25\n          };\n          data = [...data, bar];\n        });\n        this.props.timelineVals.map((item, index) => {\n          let barLabel = {\n            x: 0,\n            y: -index,\n            label: \"\".concat(this.parseDate(item.from, 'time')),\n            xOffset: -60\n          };\n          labelData = [...labelData, barLabel];\n        });\n        this.props.timelineVals.map((item, index) => {\n          // let middle = this.props.screenWidth / 2\n          // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n          //middle += 100\n          let day = '';\n\n          if (parseInt(\"\".concat(this.parseDate(item.from, '24'))) < 1 || index < 1) {\n            day = \"\".concat(this.parseDate(item.from, 'date'));\n            console.log(day);\n          }\n\n          let dayLabel = {\n            x: this.state.middle,\n            y: -index,\n            label: day,\n            xOffset: this.props.mobileUser ? 0 : -30,\n            yOffset: -15\n          };\n          dayLabels = [...dayLabels, dayLabel];\n        });\n      } //console.log(data)\n\n\n      this.setState({\n        rawData: data,\n        labelData: labelData,\n        dayLabels: dayLabels\n      });\n    };\n\n    this.manageHeight = () => {\n      let newHeight = this.props.timelineVals.length += 400;\n      this.setState({\n        height: newHeight\n      });\n    };\n\n    this._forgetValue = () => {\n      this.setState({\n        value: null\n      });\n    };\n\n    this._rememberValue = value => {\n      this.setState({\n        value\n      });\n    };\n\n    this.getposition = () => {\n      let elem = document.querySelector('#sticky-check');\n      let bounding = elem.getBoundingClientRect();\n      console.log(bounding);\n      let sticky = document.querySelector('#sticky');\n      let stickyTop = sticky.getBoundingClientRect();\n      console.log(stickyTop);\n      const plot = document.querySelector('.rv-xy-plot');\n      const plotA = plot.getBoundingClientRect();\n      const plotB = plot.getBoundingClientRect();\n      let plotTop = plotA.top;\n      let plotX = plotB.x; //   let plotTopNew = plotTop =- plotTop.x   \n\n      console.log(plotTop + ' ' + plotX); //   console.log(plotTopNew)\n      //let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n\n      let chartTop = document.querySelector('.rv-xy-plot__grid-lines');\n      let chartTopPos = chartTop.getBoundingClientRect();\n      console.log('clientHeight ' + chartTop.clientHeight);\n      console.log(chartTopPos);\n      let stickPos = bounding.top + bounding.height;\n      let gap = plotA.height - (plotTop - plotX); //this.setState({plotGap: Math.abs(gap)})\n\n      this.setState({\n        plotGap: 50\n      });\n      return this.setState({\n        gapVal: chartTopPos.bottom - stickPos,\n        stickyTop: stickyTop.top,\n        chartTop: chartTopPos.bottom - chartTopPos.top,\n        plotTop: plotTop - plotX\n      }); //if (scroll === bounding) {console.log('yey!'+ this.state.position)}\n    };\n  }\n\n  componentDidMount() {\n    this.getposition();\n    this.manageScrollDisplay();\n\n    if (typeof this.props.timelineVals[0] !== 'undefined') {\n      return this.formatData(), this.manageHeight();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.scrollPositionY !== prevProps.scrollPositionY) {\n      return this.getLevel();\n    }\n\n    if (this.props.timelineVals !== prevProps.timelineVals) return this.formatData(), this.manageHeight();\n\n    if (this.state.rawData !== prevState.rawData) {\n      return this.scrollPlots();\n    }\n  }\n\n  // <i ref={(ref) => this.scrollIcon = ref} className=\"fa fa-2x fa-chevron-down\"></i>\n  render() {\n    //const {value} = this.state\n    let scroll = window.scrollY; // console.log(scrolledDown)\n\n    return React.createElement(\"div\", {\n      style: {\n        height: '800vh'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"sticky\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Carbon Intensity Level Vertical scroll position is: \", this.props.scrollPositionY, \"Carbon Intensity: \", this.state.currentLevel, React.createElement(Table, {\n      id: \"sticky-table\",\n      unstackable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      id: \"sticky-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \"\\u27F5  Low\"), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Medium\"), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"High  \\u27F6\"))))), React.createElement(\"div\", {\n      id: \"stickyMeasure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"timeline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        // display: 'flex',\n        justifyContent: 'space-between',\n        position: 'relative',\n        width: '100%',\n        height: '800vh',\n        //height: `${this.state.height}vh`,\n        overflow: 'auto'\n      },\n      id: \"bg-fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        border: '1px solid #ccc'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(FlexibleXYPlot, {\n      id: \"timeline-chart\",\n      margin: {\n        bottom: 80,\n        left: 80,\n        right: 20,\n        top: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(HorizontalGridLines, {\n      tickTotal: this.state.rawData.length,\n      animation: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(LineSeries, {\n      data: this.state.rawData,\n      color: 'black',\n      animation: true,\n      style: {\n        fill: 'none',\n        strokeLinejoin: 'round',\n        strokeWidth: 8\n      },\n      curve: 'curveMonotoneX',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(MarkSeries, {\n      onValueMouseOver: this._rememberValue,\n      onValueMouseOut: this._forgetValue,\n      data: this.state.rawData,\n      id: \"markSeries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.rawData // labelAnchorX={\"end\"}\n      // labelAnchorY={\"middle\"}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.labelData,\n      labelAnchorX: \"start\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }), React.createElement(LabelSeries, {\n      data: this.state.dayLabels,\n      labelAnchorX: \"end\",\n      labelAnchorY: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default withScroll(Timeline);","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Timeline.js"],"names":["React","Component","XYPlot","LineSeries","MarkSeries","HorizontalGridLines","Hint","XAxis","YAxis","Borders","VerticalGridLines","HorizontalBarSeries","GradientDefs","AreaSeries","FlexibleXYPlot","LabelSeries","Sticky","Header","Table","withScroll","Timeline","state","rawData","y","x","label","barPosition","date","offset","labelData","lable","height","middle","props","mediumLevel","value","stickyTop","plotTop","gapVal","scrollCount","initalScrollCounter","dataIndex","position","scrollPositionY","scrollPlots","getLevel","chartGap","chartTop","document","querySelector","getBoundingClientRect","length","gap","console","log","map","point","index","data","level","setState","currY","newArray","obj","closest","reduce","prev","curr","Math","abs","found","find","currentLevel","manageScrollDisplay","step","scroll","newIndex","parseDate","input","timeOrDate","output","optionsDate","weekday","day","month","optionsTime","hour","minute","hour12","options24","parsedDate","Date","UTC","parseInt","slice","toLocaleString","lowCarbonLabel","item","text","split","formatData","dayLabels","middleVal","timelineVals","bar","yOffset","barLabel","from","xOffset","dayLabel","mobileUser","manageHeight","newHeight","_forgetValue","_rememberValue","getposition","elem","bounding","sticky","plot","plotA","plotB","top","plotX","chartTopPos","clientHeight","stickPos","plotGap","bottom","componentDidMount","componentDidUpdate","prevProps","prevState","render","window","scrollY","justifyContent","width","overflow","border","left","right","fill","strokeLinejoin","strokeWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {XYPlot, LineSeries, MarkSeries, HorizontalGridLines, Hint, XAxis, YAxis, Borders, VerticalGridLines, HorizontalBarSeries, GradientDefs, AreaSeries, FlexibleXYPlot, LabelSeries} from 'react-vis';\nimport { Sticky, Header, Table } from 'semantic-ui-react';\nimport { withScroll } from 'react-window-decorators';\n\n// @withScroll\nclass Timeline extends Component {\n\n    state = {\n        rawData: [{y: 0, x: 0, label:'loading | loadidng'}],\n        barPosition: {date: '', offset: 0},\n        labelData: [{lable: 'Testing'}],\n        height: 50,\n        middle: typeof this.props.middle !== 'undefined' ? this.props.mediumLevel : 150,\n        value: null,\n       // position:1000,\n        stickyTop:0,\n        plotTop:0,\n        gapVal: 1000,\n        scrollCount: 0,\n        initalScrollCounter:0,\n        dataIndex: -1,\n        position: this.props.scrollPositionY,\n        scrollPlots: [],\n        getLevel:0\n    }\n\n\n    componentDidMount () {\n      this.getposition()\n      this.manageScrollDisplay()\n\n        if (typeof this.props.timelineVals[0] !== 'undefined'){\n          return (\n              this.formatData(),\n              this.manageHeight()\n              ) \n            }\n        }\n\n        \n        \n        componentDidUpdate (prevProps, prevState) {\n            if (this.props.scrollPositionY !== prevProps.scrollPositionY) {\n               return (this.getLevel() ) \n            }\n            if (this.props.timelineVals !== prevProps.timelineVals)\n            return (\n                this.formatData(),\n                this.manageHeight()\n                ) \n            if (this.state.rawData !== prevState.rawData)\n            {\n               return this.scrollPlots()\n            }\n\n            }\n\n    chartGap = () => {\n        const chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n       // console.log('clientHeight '+ chartTop.clientHeight )\n       let height = chartTop.getBoundingClientRect()\n        return height.height / this.state.rawData.length\n    }\n\n\n    scrollPlots = () => {\n        let gap =this.chartGap()\n        console.log(gap)\n       let scrollPlots =  this.state.rawData.map((point, index) => {    \n        let data = {y: gap * (index+1), level: point.x}\n            return data\n        })\n\n        this.setState({scrollPlots: scrollPlots})\n    }\n\n    getLevel = () => {\n        \n        if (this.state.scrollPlots.length > 1) {\n\n            \n\n        let currY = this.props.scrollPositionY\n        let newArray = this.state.scrollPlots.map(obj => {\n            return obj.y\n          })\n           let closest = newArray.reduce((prev, curr) => {\n           return (Math.abs(curr - currY) < Math.abs(prev - currY) ? curr : prev);\n           })\n          let found = this.state.scrollPlots.find(obj => {\n            return obj.y === closest\n          })\n         return this.setState({\n              currentLevel:found.level\n          })\n        }\n          //return found.level \n        \n        }\n\n\n  //var closest = counts.reduce(function(prev, curr) {\n  //return (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);\n\n\n    \n    \n    manageScrollDisplay = () => {\n        \n        let initalScrollCounter = this.state.initalScrollCounter < 1 ? this.state.gapVal + this.state.stickyTop : this.state.initalScrollCounter\n        //let dataIndex = 0\n        if (this.props.scrollPositionY >= initalScrollCounter) {\n            console.log('I love you chris!')\n        //this.setState({scrollCount: initalScrollCounter})\n            if (this.props.scrollPositionY >= initalScrollCounter + Math.abs(this.state.scrollCount)) {\n                //let newVal = this.state.scrollCount + this.state.gapVal\n                const step = this.state.chartTop - this.state.plotTop\n                console.log(\"Youve got this\" + this.state.scrollCount)\n                console.log(this.state.scrollCount)\n                const scroll = this.state.scrollCount + step\n                let newIndex = this.state.dataIndex + 1\n                 this.setState({scrollCount: scroll, dataIndex:newIndex})\n            }\n        }\n\n    }\n\n    \n\n    // mapTest = () => {\n    //     let test = this.state.rawData.map(item => {\n    //         return item.text.split('|')[0]})\n    //         console.log(`HiHi${test}`)\n    // }\n\n    // getMiddle = () => {\n    //     if (this.state.middle < 1) {\n    //     let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n    //     this.setState({middle: middle})\n    //     }\n    // }\n\n    parseDate = (input, timeOrDate) => {\n        let output = 0\n        let optionsDate = { weekday: 'short', day: 'numeric', month: 'numeric' };\n        let optionsTime = { hour: 'numeric',minute: 'numeric', hour12: true};\n        let options24 = { hour: 'numeric',minute: 'numeric', hour12: false};\n\n               let parsedDate = new Date(Date.UTC(\n                   parseInt(input.slice(0, 4), 10),\n                   parseInt(input.slice(5, 7), 10) - 1,\n                   parseInt(input.slice(8, 10), 10),\n                   parseInt(input.slice(11, 13), 10),\n                   parseInt(input.slice(14, 16), 10),\n                 //parseInt(input.slice(13,15), 10)\n               ))\n               if (timeOrDate === 'time'){\n                   output =  parsedDate.toLocaleString(\"en-GB\", optionsTime)\n               }else if (timeOrDate === 'date') {\n               output =  (`${parsedDate.toLocaleString(\"en-GB\", optionsDate)}`)\n               }else if (timeOrDate === '24') {\n               output =  parsedDate.toLocaleString(\"en-GB\", options24)\n              }\n\n\n            return output\n\n            }\n\n        lowCarbonLabel = (item) => {\n            let output = ''\n            if (item.text.split(' ')[0] === 'Low' || item.text.split(' ')[1] === 'Low' ) {\n                output = 'This is a good time to use electricity!'\n            }\n            return output\n        }\n\n       formatData = () => {\n        let data = []\n        let labelData = []\n        let dayLabels = []\n        let middleVal = this.props.middle\n        //let middle = this.props.timelineVals[this.props.timelineVals.length-1].level / 2 \n\n        if (this.props.timelineVals !== [] ) {\n\n        this.props.timelineVals.map((item, index) => {\n            let bar = {x: item.level-10, y: -index, label: `${this.lowCarbonLabel(item)}` , yOffset:-25}   \n            data = [...data, bar]\n        })\n        this.props.timelineVals.map((item, index) => {\n            let barLabel = {x: 0, y: -index, label: `${this.parseDate(item.from, 'time')}`, xOffset:-60}  \n            labelData = [...labelData, barLabel]\n        })\n        this.props.timelineVals.map((item, index) => {\n            \n           // let middle = this.props.screenWidth / 2\n           // let middle = this.state.rawData[this.state.rawData-1].x / 2 \n            //middle += 100\n            let day = ''\n\n            if (parseInt(`${this.parseDate(item.from, '24')}`) < 1 || index < 1 )\n            {\n                day = `${this.parseDate(item.from, 'date')}`\n                console.log(day)   \n            }\n            let dayLabel = {x: this.state.middle, y: -index, \n                label: day,\n                xOffset: this.props.mobileUser ? 0 : -30,\n                 yOffset:-15}  \n            dayLabels = [...dayLabels, dayLabel]\n        })\n    }\n       \n        //console.log(data)\n        \n        this.setState({\n            rawData: data,\n            labelData: labelData,\n            dayLabels: dayLabels\n        })    \n    \n    }\n    //day.sort((a, b) => (a.level > b.level)\n    manageHeight = () => {\n       let newHeight =  this.props.timelineVals.length += 400\n        this.setState({\n            height: newHeight\n        })\n    }\n\n    _forgetValue = () => {\n        this.setState({\n          value: null\n        });\n      };\n    \n      _rememberValue = value => {\n        this.setState({value});\n      };\n    \ngetposition = () => {\n      let elem = document.querySelector('#sticky-check');\n      let bounding = elem.getBoundingClientRect()      \n      console.log(bounding)\n\n      let sticky = document.querySelector('#sticky');\n      let stickyTop = sticky.getBoundingClientRect()      \n      console.log(stickyTop)\n\n      const plot = document.querySelector('.rv-xy-plot')\n      const plotA = plot.getBoundingClientRect()\n      const plotB = plot.getBoundingClientRect()\n\n      let plotTop = plotA.top\n      let plotX = plotB.x\n    //   let plotTopNew = plotTop =- plotTop.x   \n       console.log(plotTop + ' ' + plotX)\n    //   console.log(plotTopNew)\n\n      //let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n      let chartTop = document.querySelector('.rv-xy-plot__grid-lines')\n      let chartTopPos = chartTop.getBoundingClientRect() \n        console.log('clientHeight '+ chartTop.clientHeight )\n\n\n      console.log(chartTopPos)\n      let stickPos = bounding.top + bounding.height\n      let gap = plotA.height - (plotTop - plotX)\n      //this.setState({plotGap: Math.abs(gap)})\n      this.setState({plotGap: 50})\n      return this.setState({gapVal:chartTopPos.bottom - stickPos, stickyTop: stickyTop.top, chartTop:chartTopPos.bottom - chartTopPos.top, plotTop:(plotTop - plotX)})\n      \n      //if (scroll === bounding) {console.log('yey!'+ this.state.position)}\n    }\n\n\n    // <i ref={(ref) => this.scrollIcon = ref} className=\"fa fa-2x fa-chevron-down\"></i>\n\n\n    render() {\n        //const {value} = this.state\n        let scroll = window.scrollY;\n        // console.log(scrolledDown)\n      \n        \n        return (\n            <div\n            style={{\n                height: '800vh'\n            }}\n            >\n          <div id=\"sticky\"> \n          Carbon Intensity Level \n            Vertical scroll position is: { this.props.scrollPositionY } \n            Carbon Intensity: {this.state.currentLevel}\n           \n          <Table id=\"sticky-table\" unstackable >\n\n            <Table.Body>\n            <Table.Row>\n            <Table.Cell>    \n           \n            </Table.Cell>\n            </Table.Row>\n\n            <Table.Row>\n            <Table.Cell id=\"sticky-check\">⟵  Low</Table.Cell>\n            <Table.Cell>Medium</Table.Cell>\n            <Table.Cell>High  ⟶</Table.Cell>\n            </Table.Row>\n            </Table.Body>\n          </Table>\n          \n          </div>\n          <div id=\"stickyMeasure\">\n          </div>\n\n                <div id=\"timeline\">\n<div\n        \n      style={{\n          // display: 'flex',\n          justifyContent: 'space-between',\n          position: 'relative',\n          width:  '100%',\n          height: '800vh',\n          //height: `${this.state.height}vh`,\n          overflow: 'auto',\n        }}\n      id=\"bg-fade\"\n\n      \n    >\n\n\n\n<div\n        style={{width: '100%', height: '100%', border: '1px solid #ccc'}}\n      >\n        <FlexibleXYPlot  id=\"timeline-chart\" margin={{bottom: 80, left: 80, right: 20, top: 50}}>\n        {/* xType=\"time\" \n         yType=\"ordinal\"\n        */}\n        \n\n        <HorizontalGridLines \n        tickTotal={this.state.rawData.length}\n        animation={true}\n        />\n     \n        {/* <YAxis \n        position=\"start\"\n        tickTotal={2}\n        // top={40}\n        top={0}\n        //height={150}\n        //width={1}\n        style={{\n            text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n          }}\n          //tickLabelAngle={-45}\n          /> */}\n        \n        \n        <LineSeries \n        data={this.state.rawData}\n        color={'black'}\n        animation\n        style={{\n            fill: 'none',\n            strokeLinejoin: 'round',\n            strokeWidth: 8\n        }}\n        curve={'curveMonotoneX'}\n        />\n\n        <MarkSeries\n          onValueMouseOver={this._rememberValue}\n          onValueMouseOut={this._forgetValue}\n          data={this.state.rawData}\n          id=\"markSeries\"\n        />\n        {/* {value ? <Hint value={value} /> : null} */}\n\n        <LabelSeries\n        data={this.state.rawData}\n        // labelAnchorX={\"end\"}\n        // labelAnchorY={\"middle\"}\n        />\n        <LabelSeries\n        data={this.state.labelData}\n        labelAnchorX={\"start\"}\n        labelAnchorY={\"middle\"}\n        />\n\n        <LabelSeries\n        data={this.state.dayLabels}\n        \n        labelAnchorX={\"end\"}\n        labelAnchorY={\"middle\"}\n        />\n\n\n\n        {/* <HorizontalBarSeries \n        data={this.state.rawData}\n        color={'url(#CoolGradient)'}\n        animation\n        /> */}\n\n         {/* <YAxis \n         position=\"start\"\n         tickValues={this.state.rawData.map(value => value.y)} \n         tickSize={1}\n         />  */}\n\n{/*\n            //data={this.xlabelData('top')}\n                //return { ...obj, y: this.props.mobileUser ? -3 : -18, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[0]}` }\n            //animation\n            // labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n            // //labelAnchorY=\"text-before-edge\"\n            // labelAnchorY={this.props.mobileUser ? \"text-after-edge\" : \"baseline\"}\n            // labelAnchorX={\"middle\"}\n            // labelAnchorY={\"text-before-edge\"}\n            // style={{\n            //     text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n            //   }}\n        {/* \n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n                        return { ...obj, label: obj.y.toString() }\n                    })}\n                    \n                    animation\n                    labelAnchorX=\"middle\"\n                    labelAnchorY=\"text-before-edge\"\n                    \n                    />\n\n\n\n        <LabelSeries\n                    data={this.state.rawData.map(obj => {\n\n                        return { ...obj, y: this.props.mobileUser ? -3 :-34, rotation: this.props.mobileUser ? 90 : 0, label: `${obj.y.split('|')[1]}` }\n                    })}\n                    animation\n                    labelAnchorX={this.props.mobileUser ? \"start\" : \"middle\"}\n                    //labelAnchorY=\"text-before-edge\"\n                    //labelAnchorY=\"baseline\"\n                    labelAnchorY={this.props.mobileUser ? \"text-before-edge\" : \"baseline\"}\n                    style={{\n                        text: {stroke: 'none', fill: '#6b6b76', fontWeight: 800, fontSize: 10}\n                      }}\n                    /> */}\n\n\n\n        </FlexibleXYPlot>\n      </div>\n\n</div>\n     \n\n        </div>\n        \n\n            </div>\n        );\n    }\n}\n\nexport default withScroll (Timeline);\n"]},"metadata":{},"sourceType":"module"}