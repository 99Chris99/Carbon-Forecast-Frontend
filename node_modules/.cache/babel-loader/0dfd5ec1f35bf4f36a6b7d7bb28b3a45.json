{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Start.js\";\nimport React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react';\nexport class Start extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.startMeterValueMaths = () => {\n      const maxVal = 500;\n      let intensityValue = this.props.intensityData.value / maxVal; //  console.log(intensityValue)\n      //  console.log(intensityValue * 180)\n\n      return intensityValue * 180;\n    };\n\n    this.countDownToDoom = () => {\n      let output = '';\n      let deadline = new Date(\"Jan 5, 2020 15:37:25\").getTime();\n      let x = setInterval(function () {\n        let now = new Date().getTime();\n        let t = deadline - now;\n        let days = Math.floor(t / (1000 * 60 * 60 * 24));\n        let hours = Math.floor(t % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n        let minutes = Math.floor(t % (1000 * 60 * 60) / (1000 * 60));\n        let seconds = Math.floor(t % (1000 * 60) / 1000);\n        output = \"\".concat(days, \"d \").concat(hours, \"h \").concat(minutes, \"m \").concat(seconds, \"s\");\n        document.getElementById(\"demo\").innerHTML = days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s \";\n\n        if (t < 0) {\n          clearInterval(x);\n          output = \"TIMES UP\";\n        }\n      }, 1000);\n      return output;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Hi there, I'm the start page, hope you are well!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"startmeter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gauge-a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gauge-b\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gauge-c\",\n      style: {\n        transform: \"rotate(\".concat(this.props.intensityData.value > 0 ? this.startMeterValueMaths() : 0, \"deg)\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gauge-data\",\n      id: this.props.intensityData.value > 0 ? 'loadedData' : undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"percent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.props.intensityData.value), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), \"Hover On Me\")))));\n  }\n\n}\nexport default Start;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Start.js"],"names":["React","Component","Container","Start","startMeterValueMaths","maxVal","intensityValue","props","intensityData","value","countDownToDoom","output","deadline","Date","getTime","x","setInterval","now","t","days","Math","floor","hours","minutes","seconds","document","getElementById","innerHTML","clearInterval","render","transform","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react';\n\nexport class Start extends Component {\n\n\n\nstartMeterValueMaths = () => {\n            const maxVal = 500;\n            let intensityValue = this.props.intensityData.value / maxVal\n            //  console.log(intensityValue)\n            //  console.log(intensityValue * 180)\n            return intensityValue * 180           \n}\n\ncountDownToDoom = () => {\n\nlet output = ''\n\nlet deadline = new Date(\"Jan 5, 2020 15:37:25\").getTime(); \nlet x = setInterval(function() { \nlet now = new Date().getTime(); \nlet t = deadline - now; \nlet days = Math.floor(t / (1000 * 60 * 60 * 24)); \nlet hours = Math.floor((t%(1000 * 60 * 60 * 24))/(1000 * 60 * 60)); \nlet minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60)); \nlet seconds = Math.floor((t % (1000 * 60)) / 1000);\n\noutput = `${days}d ${hours}h ${minutes}m ${seconds}s`\n\ndocument.getElementById(\"demo\").innerHTML = days + \"d \"  \n+ hours + \"h \" + minutes + \"m \" + seconds + \"s \"; \n    \nif (t < 0) { \n        clearInterval(x); \n        output = \"TIMES UP\" \n    } \n}, 1000); \n\nreturn output\n\n}\n\n    render() {\n        return (\n            <div>\n            <div>\n            <h1>Hi there, I'm the start page, hope you are well!</h1>   \n            <br></br>\n            </div>\n            <div>\n            <Container>\n        \n    <div className=\"startmeter\">\n\t\t<div className=\"gauge-a\"></div>\n\t\t<div className=\"gauge-b\"></div>\n\t\t<div className=\"gauge-c\" style={{transform:`rotate(${this.props.intensityData.value > 0 ? this.startMeterValueMaths() : 0}deg)`}}></div>\n\t\t<div className=\"gauge-data\" id={this.props.intensityData.value > 0 ? 'loadedData' : undefined}><h1 id=\"percent\">{this.props.intensityData.value}</h1><br></br>Hover On Me</div>\n\t</div>\n\n\n    \n    </Container>\n    </div>\n    </div>\n            \n        );\n    }\n}\n\nexport default Start;"]},"metadata":{},"sourceType":"module"}