{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js\";\nimport React, { Component } from 'react';\nimport { Dropdown, Table, Grid, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart';\nexport class Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      period: 48,\n      region: 18,\n      sortByLevel: false\n    };\n    this.periodOptions = [{\n      key: 6,\n      text: '+6 hours',\n      value: 12 //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n\n    }, {\n      key: 8,\n      text: '+8 hours',\n      value: 16\n    }, {\n      key: 12,\n      text: '+12 hours',\n      value: 24\n    }, {\n      key: 24,\n      text: '+24 hours',\n      value: 48\n    }, {\n      key: 48,\n      text: '+48 hours',\n      value: 96\n    }, {\n      key: 100,\n      text: 'Max',\n      value: 500\n    }];\n\n    this.genRegionOptions = () => {\n      let output = this.props.regionIndex.map(obj => {\n        return {\n          key: obj.id,\n          text: obj.name,\n          value: obj.id\n        };\n      });\n      output.sort((a, b) => a.key < b.key ? 1 : -1);\n      return output;\n    };\n\n    this.setPeriod = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        period: data.value\n      });\n    };\n\n    this.setRegion = (event, data) => {\n      console.log(data.value);\n      this.setState({\n        region: data.value\n      });\n    };\n\n    this.controlSort = () => {\n      let newProps = this.props.aggedVals;\n\n      if (this.state.sortByLevel === false) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.from) > Date.parse(b.from) ? 1 : -1);\n      } else if (this.state.sortByLevel === true) {\n        newProps = this.props.aggedVals.sort((a, b) => Date.parse(a.level) > Date.parse(b.level) ? 1 : -1);\n      }\n\n      return newProps;\n    };\n\n    this.handleSortButton = event => {\n      let newVal = this.state.sortByLevel ? false : true;\n      this.setState({\n        sortByLevel: newVal\n      });\n    };\n\n    this.renderBestPeriods = () => {\n      [{\n        header: 'Project Report - April',\n        description: 'Leverage agile frameworks to provide a robust synopsis for high level overviews.',\n        meta: 'ROI: 30%'\n      }, {\n        header: 'Project Report - May',\n        description: 'Bring to the table win-win survival strategies to ensure proactive domination.',\n        meta: 'ROI: 34%'\n      }, {\n        header: 'Project Report - June',\n        description: 'Capitalise on low hanging fruit to identify a ballpark value added activity to beta test.',\n        meta: 'ROI: 27%'\n      }];\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Period\",\n      selection: \"2\",\n      options: this.periodOptions,\n      onChange: (event, data) => this.props.updatePeriod(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))), React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      placeholder: \"Region\",\n      selection: true,\n      options: this.genRegionOptions(),\n      onChange: (event, data) => this.props.updateRegion(data.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      floated: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Yep thats right I'm some text!\"))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      items: renderBestPeriods(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"summary-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(SummaryChart, {\n      aggedVals: this.controlSort(),\n      sortTrigger: this.state.sortByLevel,\n      mobileUser: this.props.mobileUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      class: \"ui button\",\n      onClick: this.handleSortButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Sort By \", this.state.sortByLevel ? 'Date' : 'Intensity Level'));\n  }\n\n}\nexport default Forecast;","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/Forecast.js"],"names":["React","Component","Dropdown","Table","Grid","Image","Segment","Container","SummaryChart","Forecast","state","period","region","sortByLevel","periodOptions","key","text","value","genRegionOptions","output","props","regionIndex","map","obj","id","name","sort","a","b","setPeriod","event","data","console","log","setState","setRegion","controlSort","newProps","aggedVals","Date","parse","from","level","handleSortButton","newVal","renderBestPeriods","header","description","meta","render","updatePeriod","updateRegion","mobileUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Table, Grid, Image, Segment, Container } from 'semantic-ui-react';\nimport SummaryChart from './SummaryChart'\n\nexport class Forecast extends Component {\n\n\nstate = {\n    period: 48,\n    region: 18,\n    sortByLevel: false\n}\n\n\n        periodOptions = [\n            {\n              key: 6,\n              text: '+6 hours',\n              value: 12,\n            //   image: { avatar: true, src: 'https://react.semantic-ui.com/images/avatar/small/jenny.jpg' },\n            },\n            {\n              key: 8,\n              text: '+8 hours',\n              value: 16,\n            },\n            {\n              key: 12,\n              text: '+12 hours',\n              value: 24,\n            },\n            {\n              key: 24,\n              text: '+24 hours',\n              value: 48,\n            },\n            {\n              key: 48,\n              text: '+48 hours',\n              value: 96,\n            },\n            {\n              key: 100,\n              text: 'Max',\n              value: 500,\n            },\n          ]\n\n          genRegionOptions = () => {\n          let output = this.props.regionIndex.map(obj => {\n                return {key: obj.id, text: obj.name, value: obj.id}\n            })\n            output.sort((a,b) => (a.key < b.key) ? 1 : -1)\n            return output\n        }\n\n        setPeriod = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                period: data.value\n            })\n        }\n        setRegion = (event, data) => {\n            console.log(data.value)\n            this.setState({\n                region: data.value\n            })\n        }\n\n        controlSort = () => {\n            let newProps = this.props.aggedVals\n          if (this.state.sortByLevel === false){\n           newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.from) > Date.parse(b.from)? 1 : -1))\n            }\n            else if (this.state.sortByLevel === true){\n                newProps = this.props.aggedVals.sort((a,b) => (Date.parse(a.level) > Date.parse(b.level)? 1 : -1))\n            }\n                 return newProps\n        }\n\n        handleSortButton = (event) => {\n            let newVal = this.state.sortByLevel ? false : true\n            this.setState({sortByLevel: newVal})\n        } \n\n        renderBestPeriods = () => {\n            [\n                {\n                  header: 'Project Report - April',\n                  description:\n                    'Leverage agile frameworks to provide a robust synopsis for high level overviews.',\n                  meta: 'ROI: 30%',\n                },\n                {\n                  header: 'Project Report - May',\n                  description:\n                    'Bring to the table win-win survival strategies to ensure proactive domination.',\n                  meta: 'ROI: 34%',\n                },\n                {\n                  header: 'Project Report - June',\n                  description:\n                    'Capitalise on low hanging fruit to identify a ballpark value added activity to beta test.',\n                  meta: 'ROI: 27%',\n                },\n              ]\n        } \n\n\n    render() {\n        return (\n\n            <div>\n\n            <div>\n                {/* <h1> Hi, it's me forecast! Hows things?</h1> */}\n\n<Grid columns='2' >\n<Grid.Row>\n   \n   <Grid.Column floated='left'>      \n    <Dropdown\n         placeholder='Period'\n         selection='2'\n         options={this.periodOptions}\n         onChange={(event, data) => this.props.updatePeriod(data.value)}\n         />\n      \n       </Grid.Column>\n       <Grid.Column floated='left'>\n   <p>Yep thats right I'm some text!</p>\n   </Grid.Column>\n\n</Grid.Row>\n\n\n<Grid.Row>\n   \n    <Grid.Column floated='left'>      \n    <Dropdown\n          placeholder='Region'\n          selection\n          options={this.genRegionOptions()}\n          onChange={(event, data) => this.props.updateRegion(data.value)}\n        />\n       \n        </Grid.Column>\n        <Grid.Column floated='left'>\n    <p>Yep thats right I'm some text!</p>\n    </Grid.Column>\n \n </Grid.Row>\n </Grid>\n</div>\n<div>\n<Card.Group items={renderBestPeriods()} />\n</div>\n\n\n\n<div id=\"summary-chart\" >\n\n<SummaryChart aggedVals={this.controlSort()} sortTrigger={this.state.sortByLevel} mobileUser={this.props.mobileUser}/>\n</div>\n<button class=\"ui button\" onClick={this.handleSortButton}>Sort By {this.state.sortByLevel ? 'Date' : 'Intensity Level'}</button>\n</div>\n        );\n    }\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}