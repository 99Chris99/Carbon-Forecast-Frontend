{"ast":null,"code":"var _jsxFileName = \"/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js\";\nimport React, { Component } from 'react';\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react';\nconst initialState = {\n  isLoading: false,\n  results: [],\n  value: ''\n};\nconst source = [{\n  title: 'faker.company.companyName()',\n  description: 'faker.company.catchPhrase()',\n  image: 'faker.internet.avatar()'\n}, {\n  price: \"faker.finance.amount(0, 100, 2, '$')\",\n  title: 'faker.company.companyName()',\n  description: 'faker.company.catchPhrase()',\n  image: 'faker.internet.avatar()',\n  price: \"faker.finance.amount(0, 100, 2, '$')\"\n}];\nexport default class PostCodeSearch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialState;\n\n    this.handleResultSelect = (e, {\n      result\n    }) => this.setState({\n      value: result.title\n    });\n\n    this.handleSearchChange = (e, {\n      value\n    }) => {\n      this.setState({\n        isLoading: true,\n        value\n      });\n      setTimeout(() => {\n        if (this.state.value.length < 1) return this.setState(initialState);\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i');\n\n        const isMatch = result => re.test(result.title);\n\n        this.setState({\n          isLoading: false,\n          results: _.filter(source, isMatch)\n        });\n      }, 300);\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          value = _this$state.value,\n          results = _this$state.results;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Search, Object.assign({\n      loading: isLoading,\n      onResultSelect: this.handleResultSelect,\n      onSearchChange: _.debounce(this.handleSearchChange, 500, {\n        leading: true\n      }),\n      results: results,\n      value: value\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"State\"), React.createElement(\"pre\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, JSON.stringify(this.state, null, 2)), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Options\"), React.createElement(\"pre\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, JSON.stringify(source, null, 2)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Chris/Development/Final-Project/carbon-forecast-frontend/src/components/PostCodeSearch.js"],"names":["React","Component","Search","Grid","Header","Segment","initialState","isLoading","results","value","source","title","description","image","price","PostCodeSearch","state","handleResultSelect","e","result","setState","handleSearchChange","setTimeout","length","re","RegExp","_","escapeRegExp","isMatch","test","filter","render","debounce","leading","props","overflowX","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\n\nconst initialState = { isLoading: false, results: [], value: '' }\n\nconst source = ([{\n  title: 'faker.company.companyName()',\n  description: 'faker.company.catchPhrase()',\n  image: 'faker.internet.avatar()'},\n  {price: \"faker.finance.amount(0, 100, 2, '$')\",\n  title: 'faker.company.companyName()',\n  description: 'faker.company.catchPhrase()',\n  image: 'faker.internet.avatar()',\n  price: \"faker.finance.amount(0, 100, 2, '$')\",\n}]\n\n)\n\nexport default class PostCodeSearch extends Component {\n  state = initialState\n\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }\n\n  render() {\n    const { isLoading, value, results } = this.state\n\n    return (\n      <Grid>\n        <Grid.Column width={6}>\n          <Search\n            loading={isLoading}\n            onResultSelect={this.handleResultSelect}\n            onSearchChange={_.debounce(this.handleSearchChange, 500, {\n              leading: true,\n            })}\n            results={results}\n            value={value}\n            {...this.props}\n          />\n        </Grid.Column>\n        <Grid.Column width={10}>\n          <Segment>\n            <Header>State</Header>\n            <pre style={{ overflowX: 'auto' }}>\n              {JSON.stringify(this.state, null, 2)}\n            </pre>\n            <Header>Options</Header>\n            <pre style={{ overflowX: 'auto' }}>\n              {JSON.stringify(source, null, 2)}\n            </pre>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}